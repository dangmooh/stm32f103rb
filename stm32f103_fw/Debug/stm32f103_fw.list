
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094c8  080094c8  0000b070  2**0
                  CONTENTS
  4 .ARM          00000000  080094c8  080094c8  0000b070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094c8  080094c8  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094c8  080094c8  0000a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094cc  080094cc  0000a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080094d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000070  08009540  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08009540  0000b688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b9f  00000000  00000000  0000b099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fc  00000000  00000000  0001bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bace  00000000  00000000  00020f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001892e  00000000  00000000  0003ca59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2d8  00000000  00000000  00055387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e065f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046dc  00000000  00000000  000e06a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e4d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08009428 	.word	0x08009428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08009428 	.word	0x08009428

0800014c <apInit>:




void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fbab 	bl	80008b0 <uartOpen>
  uartOpen(_DEF_UART2, 57600);
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fba6 	bl	80008b0 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

// gcc 계열에서 printf 함수를 사용하려면 syscallback 추가하면 된다.

void apMain(void) //main.c를 최소화하고 ap에서 모든 상위 작업을 진행한다.
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800016e:	f000 f84a 	bl	8000206 <millis>
 8000172:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis() - pre_time >= 500)
 8000174:	f000 f847 	bl	8000206 <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d3f7      	bcc.n	8000174 <apMain+0xc>
    {
      pre_time = millis();
 8000184:	f000 f83f 	bl	8000206 <millis>
 8000188:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 faba 	bl	8000704 <ledToggle>

      logPrintf("logPrintf test %d\n", (int)millis());
 8000190:	f000 f839 	bl	8000206 <millis>
 8000194:	4603      	mov	r3, r0
 8000196:	4619      	mov	r1, r3
 8000198:	4801      	ldr	r0, [pc, #4]	@ (80001a0 <apMain+0x38>)
 800019a:	f008 facd 	bl	8008738 <iprintf>
    if (millis() - pre_time >= 500)
 800019e:	e7e9      	b.n	8000174 <apMain+0xc>
 80001a0:	08009440 	.word	0x08009440

080001a4 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
  HAL_Init();
 80001aa:	f000 fd1b 	bl	8000be4 <HAL_Init>
  SystemClock_Config();
 80001ae:	f000 f840 	bl	8000232 <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE(); // gpio 수정시 복사
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <bspInit+0x48>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <bspInit+0x48>)
 80001b8:	f043 0304 	orr.w	r3, r3, #4
 80001bc:	6193      	str	r3, [r2, #24]
 80001be:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <bspInit+0x48>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f003 0304 	and.w	r3, r3, #4
 80001c6:	607b      	str	r3, [r7, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ca:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <bspInit+0x48>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	4a07      	ldr	r2, [pc, #28]	@ (80001ec <bspInit+0x48>)
 80001d0:	f043 0320 	orr.w	r3, r3, #32
 80001d4:	6193      	str	r3, [r2, #24]
 80001d6:	4b05      	ldr	r3, [pc, #20]	@ (80001ec <bspInit+0x48>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	f003 0320 	and.w	r3, r3, #32
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	683b      	ldr	r3, [r7, #0]

  //MX_USB_DEVICE_Init();

}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000

080001f0 <delay>:

void delay(uint32_t ms)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f000 fd55 	bl	8000ca8 <HAL_Delay>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <millis>:

uint32_t millis(void)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	af00      	add	r7, sp, #0
  return HAL_GetTick(); //sysTick에서 증가하는 uwTick 값을 가져옴
 800020a:	f000 fd43 	bl	8000c94 <HAL_GetTick>
 800020e:	4603      	mov	r3, r0
}
 8000210:	4618      	mov	r0, r3
 8000212:	bd80      	pop	{r7, pc}

08000214 <__io_putchar>:
int __io_putchar(int ch) // printf 호출 시 하나의 charactor를 보낸다.
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  // usb로 printf 캐릭터 전송
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2201      	movs	r2, #1
 8000220:	4619      	mov	r1, r3
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fbda 	bl	80009dc <uartWrite>

  return 1;
 8000228:	2301      	movs	r3, #1
}
 800022a:	4618      	mov	r0, r3
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b094      	sub	sp, #80	@ 0x50
 8000236:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000238:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800023c:	2228      	movs	r2, #40	@ 0x28
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f008 face 	bl	80087e2 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000262:	2305      	movs	r3, #5
 8000264:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	633b      	str	r3, [r7, #48]	@ 0x30
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000280:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000286:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800028c:	4618      	mov	r0, r3
 800028e:	f002 ff8d 	bl	80031ac <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x6a>
{
  Error_Handler();
 8000298:	f000 f82a 	bl	80002f0 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	617b      	str	r3, [r7, #20]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ac:	623b      	str	r3, [r7, #32]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2102      	movs	r1, #2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 f9f9 	bl	80036b0 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x96>
{
  Error_Handler();
 80002c4:	f000 f814 	bl	80002f0 <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002c8:	2311      	movs	r3, #17
 80002ca:	607b      	str	r3, [r7, #4]
PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80002cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d0:	60bb      	str	r3, [r7, #8]
PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 fb77 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0xb6>
{
  Error_Handler();
 80002e4:	f000 f804 	bl	80002f0 <Error_Handler>
}
}
 80002e8:	bf00      	nop
 80002ea:	3750      	adds	r7, #80	@ 0x50
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f4:	b672      	cpsid	i
}
 80002f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <Error_Handler+0x8>

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <HAL_MspInit+0x5c>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <HAL_MspInit+0x5c>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <HAL_MspInit+0x5c>)
 8000320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000324:	61d3      	str	r3, [r2, #28]
 8000326:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <HAL_MspInit+0x5c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000332:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <HAL_MspInit+0x60>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <HAL_MspInit+0x60>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	40010000 	.word	0x40010000

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <NMI_Handler+0x4>

08000368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <UsageFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b0:	f000 fc5e 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003bc:	4802      	ldr	r0, [pc, #8]	@ (80003c8 <DMA1_Channel5_IRQHandler+0x10>)
 80003be:	f000 ffa1 	bl	8001304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000218 	.word	0x20000218

080003cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003d0:	4802      	ldr	r0, [pc, #8]	@ (80003dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003d2:	f001 fb3c 	bl	8001a4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000264 	.word	0x20000264

080003e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <USART1_IRQHandler+0x10>)
 80003e6:	f003 fef5 	bl	80041d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200001d0 	.word	0x200001d0

080003f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	e00a      	b.n	800041c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000406:	f3af 8000 	nop.w
 800040a:	4601      	mov	r1, r0
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	60ba      	str	r2, [r7, #8]
 8000412:	b2ca      	uxtb	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf0      	blt.n	8000406 <_read+0x12>
  }

  return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b086      	sub	sp, #24
 8000432:	af00      	add	r7, sp, #0
 8000434:	60f8      	str	r0, [r7, #12]
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	e009      	b.n	8000454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60ba      	str	r2, [r7, #8]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fee3 	bl	8000214 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	429a      	cmp	r2, r3
 800045a:	dbf1      	blt.n	8000440 <_write+0x12>
  }
  return len;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <_close>:

int _close(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000472:	4618      	mov	r0, r3
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800048c:	605a      	str	r2, [r3, #4]
  return 0;
 800048e:	2300      	movs	r3, #0
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <_isatty>:

int _isatty(int file)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	60f8      	str	r0, [r7, #12]
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f008 f9c2 	bl	8008880 <__errno>
 80004fc:	4603      	mov	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	@ (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	4a05      	ldr	r2, [pc, #20]	@ (800052c <_sbrk+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20005000 	.word	0x20005000
 8000528:	00000400 	.word	0x00000400
 800052c:	2000008c 	.word	0x2000008c
 8000530:	20000688 	.word	0x20000688

08000534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000540:	f7ff fff8 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480b      	ldr	r0, [pc, #44]	@ (8000574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000546:	490c      	ldr	r1, [pc, #48]	@ (8000578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000548:	4a0c      	ldr	r2, [pc, #48]	@ (800057c <LoopFillZerobss+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a09      	ldr	r2, [pc, #36]	@ (8000580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800055c:	4c09      	ldr	r4, [pc, #36]	@ (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056a:	f008 f98f 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f008 f815 	bl	800859c <main>
  bx lr
 8000572:	4770      	bx	lr
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800057c:	080094d0 	.word	0x080094d0
  ldr r2, =_sbss
 8000580:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000584:	20000688 	.word	0x20000688

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>

0800058a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800058a:	b480      	push	{r7}
 800058c:	b087      	sub	sp, #28
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000596:	2301      	movs	r3, #1
 8000598:	75fb      	strb	r3, [r7, #23]


  p_node->in = 0;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf; // buff가 null인 경우 index만 관리한다. 실제 data를 관리하는게 아니라.
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  return ret;
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	371c      	adds	r7, #28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80005be:	b480      	push	{r7}
 80005c0:	b089      	sub	sp, #36	@ 0x24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80005ca:	2301      	movs	r3, #1
 80005cc:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;

  for(int i=0; i<length; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
 80005d2:	e027      	b.n	8000624 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len; // 다음 in index를 구해서 buf가 비어있는지 확인
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	6892      	ldr	r2, [r2, #8]
 80005de:	fbb3 f1f2 	udiv	r1, r3, r2
 80005e2:	fb01 f202 	mul.w	r2, r1, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	617b      	str	r3, [r7, #20]

    if(next_in != p_node->out)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d011      	beq.n	8000618 <qbufferWrite+0x5a>
    {
      if(p_node->p_buf != NULL) // buf가 NULL이 아니면 write 한다.
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d009      	beq.n	8000610 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	441a      	add	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	68d9      	ldr	r1, [r3, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	440b      	add	r3, r1
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in; // NULL인 경우에는 index만 관리한다.
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	e002      	b.n	800061e <qbufferWrite+0x60>
    }
    else // buffer가 꽉차있으면 break
    {
      ret = false;
 8000618:	2300      	movs	r3, #0
 800061a:	77fb      	strb	r3, [r7, #31]
      break;
 800061c:	e006      	b.n	800062c <qbufferWrite+0x6e>
  for(int i=0; i<length; i++)
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	3301      	adds	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8d3      	bhi.n	80005d4 <qbufferWrite+0x16>
    }
  }


  return ret;
 800062c:	7ffb      	ldrb	r3, [r7, #31]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	@ 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <ledInit>:
    };



bool ledInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  bool ret = true;
 800063e:	2301      	movs	r3, #1
 8000640:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <ledInit+0x84>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <ledInit+0x84>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <ledInit+0x84>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // led 공통 설정 요소
 8000668:	2301      	movs	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]

  for (int i =0; i<LED_MAX_CH; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	e017      	b.n	80006aa <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800067a:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <ledInit+0x88>)
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889b      	ldrh	r3, [r3, #4]
 8000684:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <ledInit+0x88>)
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800068e:	f107 0208 	add.w	r2, r7, #8
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff69 	bl	800156c <HAL_GPIO_Init>

    ledOff(i);
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f810 	bl	80006c4 <ledOff>
  for (int i =0; i<LED_MAX_CH; i++)
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dde4      	ble.n	800067a <ledInit+0x42>
  }

  return ret;
 80006b0:	7efb      	ldrb	r3, [r7, #27]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	20000004 	.word	0x20000004

080006c4 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d111      	bne.n	80006f8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <ledOff+0x3c>)
 80006d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <ledOff+0x3c>)
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	8899      	ldrh	r1, [r3, #4]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <ledOff+0x3c>)
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	4413      	add	r3, r2
 80006ee:	79db      	ldrb	r3, [r3, #7]
 80006f0:	461a      	mov	r2, r3
 80006f2:	f001 f97b 	bl	80019ec <HAL_GPIO_WritePin>
 80006f6:	e000      	b.n	80006fa <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80006f8:	bf00      	nop
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000004 	.word	0x20000004

08000704 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10d      	bne.n	8000730 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <ledToggle+0x34>)
 8000718:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4906      	ldr	r1, [pc, #24]	@ (8000738 <ledToggle+0x34>)
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	4619      	mov	r1, r3
 8000728:	4610      	mov	r0, r2
 800072a:	f001 f977 	bl	8001a1c <HAL_GPIO_TogglePin>
 800072e:	e000      	b.n	8000732 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000730:	bf00      	nop
}
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000004 	.word	0x20000004

0800073c <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  bool ret = true;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]


  // reset 핀이 눌렸다면
  if(RCC->CSR & (1<<26))
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <resetInit+0x50>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d012      	beq.n	8000778 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1); // 자기 자신을 1 증가한다.
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f84e 	bl	80007f4 <rtcBackupRegRead>
 8000758:	4603      	mov	r3, r0
 800075a:	3301      	adds	r3, #1
 800075c:	4619      	mov	r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	f000 f858 	bl	8000814 <rtcBackupRegWrite>
    delay(500); // 500ms 안에 누르면 rtcBackupReg가 증가한다.
 8000764:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000768:	f7ff fd42 	bl	80001f0 <delay>
    reset_count = rtcBackupRegRead(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 f841 	bl	80007f4 <rtcBackupRegRead>
 8000772:	4603      	mov	r3, r0
 8000774:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <resetInit+0x54>)
 8000776:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0); // 다음에도 0부터 시작을 위해 초기화, backupreg는 1부터 시작
 8000778:	2100      	movs	r1, #0
 800077a:	2001      	movs	r0, #1
 800077c:	f000 f84a 	bl	8000814 <rtcBackupRegWrite>

  return ret;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	20000090 	.word	0x20000090

08000794 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  bool ret = true;
 800079a:	2301      	movs	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <rtcInit+0x54>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <rtcInit+0x54>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <rtcInit+0x54>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance           = RTC;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <rtcInit+0x58>)
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <rtcInit+0x5c>)
 80007ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <rtcInit+0x58>)
 80007be:	f04f 32ff 	mov.w	r2, #4294967295
 80007c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <rtcInit+0x58>)
 80007c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ca:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <rtcInit+0x58>)
 80007ce:	f003 fa69 	bl	8003ca4 <HAL_RTC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <rtcInit+0x48>
  {
    Error_Handler();
 80007d8:	f7ff fd8a 	bl	80002f0 <Error_Handler>
  }


  return ret;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	20000094 	.word	0x20000094
 80007f0:	40002800 	.word	0x40002800

080007f4 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <rtcBackupRegRead+0x1c>)
 8000800:	f003 fb74 	bl	8003eec <HAL_RTCEx_BKUPRead>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000094 	.word	0x20000094

08000814 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data) // 16 bit reserved 16 bit data
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	4803      	ldr	r0, [pc, #12]	@ (8000830 <rtcBackupRegWrite+0x1c>)
 8000824:	f003 fb48 	bl	8003eb8 <HAL_RTCEx_BKUPWrite>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000094 	.word	0x20000094

08000834 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <HAL_RTC_MspInit+0x3c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d110      	bne.n	8000868 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000846:	f002 fca5 	bl	8003194 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_RTC_MspInit+0x40>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <HAL_RTC_MspInit+0x40>)
 8000850:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <HAL_RTC_MspInit+0x40>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000862:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_RTC_MspInit+0x44>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40002800 	.word	0x40002800
 8000874:	40021000 	.word	0x40021000
 8000878:	4242043c 	.word	0x4242043c

0800087c <uartInit>:




bool uartInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e007      	b.n	8000898 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000888:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <uartInit+0x30>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b01      	cmp	r3, #1
 800089c:	ddf4      	ble.n	8000888 <uartInit+0xc>
  }

  return true;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200000a8 	.word	0x200000a8

080008b0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <uartOpen+0x1c>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d007      	beq.n	80008da <uartOpen+0x2a>
 80008ca:	e074      	b.n	80009b6 <uartOpen+0x106>
  {
    case _DEF_UART1: // usb cdc
      is_open[ch] = true;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a3c      	ldr	r2, [pc, #240]	@ (80009c0 <uartOpen+0x110>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
      break;
 80008d8:	e06d      	b.n	80009b6 <uartOpen+0x106>

    case _DEF_UART2:
          huart1.Instance         = USART1;
 80008da:	4b3a      	ldr	r3, [pc, #232]	@ (80009c4 <uartOpen+0x114>)
 80008dc:	4a3a      	ldr	r2, [pc, #232]	@ (80009c8 <uartOpen+0x118>)
 80008de:	601a      	str	r2, [r3, #0]
          huart1.Init.BaudRate    = baud;
 80008e0:	4a38      	ldr	r2, [pc, #224]	@ (80009c4 <uartOpen+0x114>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6053      	str	r3, [r2, #4]
          huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80008e6:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <uartOpen+0x114>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
          huart1.Init.StopBits    = UART_STOPBITS_1;
 80008ec:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <uartOpen+0x114>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
          huart1.Init.Parity      = UART_PARITY_NONE;
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <uartOpen+0x114>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
          huart1.Init.Mode        = UART_MODE_TX_RX;
 80008f8:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <uartOpen+0x114>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
          huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80008fe:	4b31      	ldr	r3, [pc, #196]	@ (80009c4 <uartOpen+0x114>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
          huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8000904:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <uartOpen+0x114>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]


          HAL_UART_DeInit(&huart1);// usb 터미널 쪽에서 baud를 바꾸는 경우 다시 uart를 재 오픈해야한다,
 800090a:	482e      	ldr	r0, [pc, #184]	@ (80009c4 <uartOpen+0x114>)
 800090c:	f003 fb5a 	bl	8003fc4 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buff[0], 256);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	4a2d      	ldr	r2, [pc, #180]	@ (80009cc <uartOpen+0x11c>)
 8000916:	4413      	add	r3, r2
 8000918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091c:	492c      	ldr	r1, [pc, #176]	@ (80009d0 <uartOpen+0x120>)
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe33 	bl	800058a <qbufferCreate>

          /* DMA controller clock enable */
          __HAL_RCC_DMA1_CLK_ENABLE();
 8000924:	4b2b      	ldr	r3, [pc, #172]	@ (80009d4 <uartOpen+0x124>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	4a2a      	ldr	r2, [pc, #168]	@ (80009d4 <uartOpen+0x124>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6153      	str	r3, [r2, #20]
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <uartOpen+0x124>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]

          /* DMA interrupt init */
          /* DMA1_Channel5_IRQn interrupt configuration */
          HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	200f      	movs	r0, #15
 8000942:	f000 fad0 	bl	8000ee6 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 fae9 	bl	8000f1e <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart1) != HAL_OK)
 800094c:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <uartOpen+0x114>)
 800094e:	f003 fae9 	bl	8003f24 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <uartOpen+0xae>
          {
            ret = false;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
             * if (HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK) // rx_data[_DEF_UART2]에 1byte를 받고 callback 함수 실행
              {
                ret = false;
              }*/
          }
          break;
 800095c:	e02a      	b.n	80009b4 <uartOpen+0x104>
            ret = true;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <uartOpen+0x110>)
 8000966:	2101      	movs	r1, #1
 8000968:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buff[0], 256) != HAL_OK) // circular 방식이라 자동으로 다시 순환
 800096a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800096e:	4918      	ldr	r1, [pc, #96]	@ (80009d0 <uartOpen+0x120>)
 8000970:	4814      	ldr	r0, [pc, #80]	@ (80009c4 <uartOpen+0x114>)
 8000972:	f003 fc09 	bl	8004188 <HAL_UART_Receive_DMA>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <uartOpen+0xd0>
              ret = false;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
            qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <uartOpen+0x11c>)
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	4413      	add	r3, r2
 8000988:	3308      	adds	r3, #8
 800098a:	6819      	ldr	r1, [r3, #0]
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <uartOpen+0x128>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	490d      	ldr	r1, [pc, #52]	@ (80009cc <uartOpen+0x11c>)
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	440b      	add	r3, r1
 800099c:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	490a      	ldr	r1, [pc, #40]	@ (80009cc <uartOpen+0x11c>)
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	440a      	add	r2, r1
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	4908      	ldr	r1, [pc, #32]	@ (80009cc <uartOpen+0x11c>)
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	440b      	add	r3, r1
 80009b0:	3304      	adds	r3, #4
 80009b2:	601a      	str	r2, [r3, #0]
          break;
 80009b4:	bf00      	nop
  }

  return ret;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000a8 	.word	0x200000a8
 80009c4:	200001d0 	.word	0x200001d0
 80009c8:	40013800 	.word	0x40013800
 80009cc:	200000ac 	.word	0x200000ac
 80009d0:	200000cc 	.word	0x200000cc
 80009d4:	40021000 	.word	0x40021000
 80009d8:	20000218 	.word	0x20000218

080009dc <uartWrite>:

  return ret;
}

uint32_t  uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length) // ch에 p_data의 length 만큼 작성한다.
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d010      	beq.n	8000a16 <uartWrite+0x3a>
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d111      	bne.n	8000a1c <uartWrite+0x40>
    case _DEF_UART1:
      //ret = cdcWrite(p_data, length);
      break;

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	2364      	movs	r3, #100	@ 0x64
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	4809      	ldr	r0, [pc, #36]	@ (8000a28 <uartWrite+0x4c>)
 8000a02:	f003 fb11 	bl	8004028 <HAL_UART_Transmit>
 8000a06:	4603      	mov	r3, r0
 8000a08:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8000a0a:	7cfb      	ldrb	r3, [r7, #19]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d104      	bne.n	8000a1a <uartWrite+0x3e>
      {
        ret = length;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	617b      	str	r3, [r7, #20]
      }
      break;
 8000a14:	e001      	b.n	8000a1a <uartWrite+0x3e>
      break;
 8000a16:	bf00      	nop
 8000a18:	e000      	b.n	8000a1c <uartWrite+0x40>
      break;
 8000a1a:	bf00      	nop
  }

  return ret;
 8000a1c:	697b      	ldr	r3, [r7, #20]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001d0 	.word	0x200001d0

08000a2c <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_UART_RxCpltCallback>:

/*interrupt 방식은 interrupt가 너무 많이 걸려서 고속의 통신에서는 buffer가 덮어 씌여져 DMA 방식이 좋다.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // weak 함수를 같은 파일을 다른 곳에서 정의하면 그 함수가 호출된다.
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_UART_RxCpltCallback+0x30>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d109      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1); // 수신된 1byte를 buffer에 write한다.
 8000a52:	2201      	movs	r2, #1
 8000a54:	4907      	ldr	r1, [pc, #28]	@ (8000a74 <HAL_UART_RxCpltCallback+0x34>)
 8000a56:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <HAL_UART_RxCpltCallback+0x38>)
 8000a58:	f7ff fdb1 	bl	80005be <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1); // 호출되고 interrupt를 다 꺼버려서 다시 호출해 1byte를 받는다.
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4905      	ldr	r1, [pc, #20]	@ (8000a74 <HAL_UART_RxCpltCallback+0x34>)
 8000a60:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <HAL_UART_RxCpltCallback+0x3c>)
 8000a62:	f003 fb6c 	bl	800413e <HAL_UART_Receive_IT>

  }
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40013800 	.word	0x40013800
 8000a74:	200001cd 	.word	0x200001cd
 8000a78:	200000bc 	.word	0x200000bc
 8000a7c:	200001d0 	.word	0x200001d0

08000a80 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <HAL_UART_MspInit+0xe8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d15f      	bne.n	8000b60 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a31      	ldr	r2, [pc, #196]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <HAL_UART_MspInit+0xec>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <HAL_UART_MspInit+0xf0>)
 8000ae6:	f000 fd41 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	@ (8000b70 <HAL_UART_MspInit+0xf0>)
 8000b00:	f000 fd34 	bl	800156c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <HAL_UART_MspInit+0xf8>)
 8000b08:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b36:	f000 fa1b 	bl	8000f70 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b40:	f7ff fbd6 	bl	80002f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <HAL_UART_MspInit+0xf4>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2025      	movs	r0, #37	@ 0x25
 8000b56:	f000 f9c6 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5a:	2025      	movs	r0, #37	@ 0x25
 8000b5c:	f000 f9df 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	20000218 	.word	0x20000218
 8000b78:	40020058 	.word	0x40020058

08000b7c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <HAL_UART_MspDeInit+0x40>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d112      	bne.n	8000bb4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_UART_MspDeInit+0x44>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_UART_MspDeInit+0x44>)
 8000b94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b98:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 8000b9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000b9e:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <HAL_UART_MspDeInit+0x48>)
 8000ba0:	f000 fe68 	bl	8001874 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fa3b 	bl	8001024 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000bae:	2025      	movs	r0, #37	@ 0x25
 8000bb0:	f000 f9c3 	bl	8000f3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <hwInit>:




void hwInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  bspInit();
 8000bcc:	f7ff faea 	bl	80001a4 <bspInit>
  rtcInit();
 8000bd0:	f7ff fde0 	bl	8000794 <rtcInit>

  resetInit();
 8000bd4:	f7ff fdb2 	bl	800073c <resetInit>
  ledInit();
 8000bd8:	f7ff fd2e 	bl	8000638 <ledInit>
  uartInit();
 8000bdc:	f7ff fe4e 	bl	800087c <uartInit>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x28>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f96b 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fb7c 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f991 	bl	8000f56 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f94b 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	2000000c 	.word	0x2000000c

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a03      	ldr	r2, [pc, #12]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	2000025c 	.word	0x2000025c

08000c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b02      	ldr	r3, [pc, #8]	@ (8000ca4 <HAL_GetTick+0x10>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	2000025c 	.word	0x2000025c

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff fff0 	bl	8000c94 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffe0 	bl	8000c94 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000010 	.word	0x20000010

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4906      	ldr	r1, [pc, #24]	@ (8000d88 <__NVIC_EnableIRQ+0x34>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db12      	blt.n	8000dc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	490a      	ldr	r1, [pc, #40]	@ (8000dd0 <__NVIC_DisableIRQ+0x44>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	3320      	adds	r3, #32
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000db8:	f3bf 8f4f 	dsb	sy
}
 8000dbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dbe:	f3bf 8f6f 	isb	sy
}
 8000dc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff09 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff1e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff11 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff1f 	bl	8000d8c <__NVIC_DisableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff94 	bl	8000e8c <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e043      	b.n	800100e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <HAL_DMA_Init+0xa8>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <HAL_DMA_Init+0xac>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	009a      	lsls	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_DMA_Init+0xb0>)
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	bffdfff8 	.word	0xbffdfff8
 800101c:	cccccccd 	.word	0xcccccccd
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e046      	b.n	80010c4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_DMA_DeInit+0xac>)
 800106e:	4413      	add	r3, r2
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <HAL_DMA_DeInit+0xb0>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_DMA_DeInit+0xb4>)
 8001082:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	bffdfff8 	.word	0xbffdfff8
 80010d4:	cccccccd 	.word	0xcccccccd
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_DMA_Start_IT+0x20>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e04b      	b.n	8001194 <HAL_DMA_Start_IT+0xb8>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d13a      	bne.n	8001186 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f9eb 	bl	8001510 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 020e 	orr.w	r2, r2, #14
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e00f      	b.n	8001174 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 020a 	orr.w	r2, r2, #10
 8001172:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e005      	b.n	8001192 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800118e:	2302      	movs	r3, #2
 8001190:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e020      	b.n	8001208 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020e 	bic.w	r2, r2, #14
 80011d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d005      	beq.n	8001238 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e051      	b.n	80012dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020e 	bic.w	r2, r2, #14
 8001246:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0201 	bic.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a22      	ldr	r2, [pc, #136]	@ (80012e8 <HAL_DMA_Abort_IT+0xd4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d029      	beq.n	80012b6 <HAL_DMA_Abort_IT+0xa2>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <HAL_DMA_Abort_IT+0xd8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x9e>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <HAL_DMA_Abort_IT+0xdc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_Abort_IT+0x98>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1e      	ldr	r2, [pc, #120]	@ (80012f4 <HAL_DMA_Abort_IT+0xe0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d012      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x92>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <HAL_DMA_Abort_IT+0xe4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00a      	beq.n	80012a0 <HAL_DMA_Abort_IT+0x8c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <HAL_DMA_Abort_IT+0xe8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d102      	bne.n	800129a <HAL_DMA_Abort_IT+0x86>
 8001294:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001298:	e00e      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 800129a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800129e:	e00b      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 80012a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a4:	e008      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 80012a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012aa:	e005      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 80012ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b0:	e002      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 80012b2:	2310      	movs	r3, #16
 80012b4:	e000      	b.n	80012b8 <HAL_DMA_Abort_IT+0xa4>
 80012b6:	2301      	movs	r3, #1
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_DMA_Abort_IT+0xec>)
 80012ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
    } 
  }
  return status;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020008 	.word	0x40020008
 80012ec:	4002001c 	.word	0x4002001c
 80012f0:	40020030 	.word	0x40020030
 80012f4:	40020044 	.word	0x40020044
 80012f8:	40020058 	.word	0x40020058
 80012fc:	4002006c 	.word	0x4002006c
 8001300:	40020000 	.word	0x40020000

08001304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	2204      	movs	r2, #4
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d04f      	beq.n	80013cc <HAL_DMA_IRQHandler+0xc8>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04a      	beq.n	80013cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0204 	bic.w	r2, r2, #4
 8001352:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a66      	ldr	r2, [pc, #408]	@ (80014f4 <HAL_DMA_IRQHandler+0x1f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d029      	beq.n	80013b2 <HAL_DMA_IRQHandler+0xae>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_DMA_IRQHandler+0x1f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d022      	beq.n	80013ae <HAL_DMA_IRQHandler+0xaa>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a63      	ldr	r2, [pc, #396]	@ (80014fc <HAL_DMA_IRQHandler+0x1f8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01a      	beq.n	80013a8 <HAL_DMA_IRQHandler+0xa4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a62      	ldr	r2, [pc, #392]	@ (8001500 <HAL_DMA_IRQHandler+0x1fc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d012      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x9e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a60      	ldr	r2, [pc, #384]	@ (8001504 <HAL_DMA_IRQHandler+0x200>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00a      	beq.n	800139c <HAL_DMA_IRQHandler+0x98>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a5f      	ldr	r2, [pc, #380]	@ (8001508 <HAL_DMA_IRQHandler+0x204>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d102      	bne.n	8001396 <HAL_DMA_IRQHandler+0x92>
 8001390:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001394:	e00e      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 8001396:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800139a:	e00b      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 800139c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80013a0:	e008      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 80013a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013a6:	e005      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 80013a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ac:	e002      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	e000      	b.n	80013b4 <HAL_DMA_IRQHandler+0xb0>
 80013b2:	2304      	movs	r3, #4
 80013b4:	4a55      	ldr	r2, [pc, #340]	@ (800150c <HAL_DMA_IRQHandler+0x208>)
 80013b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8094 	beq.w	80014ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013ca:	e08e      	b.n	80014ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	2202      	movs	r2, #2
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d056      	beq.n	800148a <HAL_DMA_IRQHandler+0x186>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d051      	beq.n	800148a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 020a 	bic.w	r2, r2, #10
 8001402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a38      	ldr	r2, [pc, #224]	@ (80014f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d029      	beq.n	800146a <HAL_DMA_IRQHandler+0x166>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a37      	ldr	r2, [pc, #220]	@ (80014f8 <HAL_DMA_IRQHandler+0x1f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d022      	beq.n	8001466 <HAL_DMA_IRQHandler+0x162>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <HAL_DMA_IRQHandler+0x1f8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01a      	beq.n	8001460 <HAL_DMA_IRQHandler+0x15c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a34      	ldr	r2, [pc, #208]	@ (8001500 <HAL_DMA_IRQHandler+0x1fc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d012      	beq.n	800145a <HAL_DMA_IRQHandler+0x156>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a32      	ldr	r2, [pc, #200]	@ (8001504 <HAL_DMA_IRQHandler+0x200>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00a      	beq.n	8001454 <HAL_DMA_IRQHandler+0x150>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <HAL_DMA_IRQHandler+0x204>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <HAL_DMA_IRQHandler+0x14a>
 8001448:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800144c:	e00e      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 800144e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001452:	e00b      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 8001454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001458:	e008      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 800145a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145e:	e005      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 8001460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001464:	e002      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 8001466:	2320      	movs	r3, #32
 8001468:	e000      	b.n	800146c <HAL_DMA_IRQHandler+0x168>
 800146a:	2302      	movs	r3, #2
 800146c:	4a27      	ldr	r2, [pc, #156]	@ (800150c <HAL_DMA_IRQHandler+0x208>)
 800146e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d034      	beq.n	80014ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001488:	e02f      	b.n	80014ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	2208      	movs	r2, #8
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d028      	beq.n	80014ec <HAL_DMA_IRQHandler+0x1e8>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
    }
  }
  return;
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
}
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020008 	.word	0x40020008
 80014f8:	4002001c 	.word	0x4002001c
 80014fc:	40020030 	.word	0x40020030
 8001500:	40020044 	.word	0x40020044
 8001504:	40020058 	.word	0x40020058
 8001508:	4002006c 	.word	0x4002006c
 800150c:	40020000 	.word	0x40020000

08001510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b10      	cmp	r3, #16
 800153c:	d108      	bne.n	8001550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800154e:	e007      	b.n	8001560 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	@ 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e169      	b.n	8001854 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8158 	bne.w	800184e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a9a      	ldr	r2, [pc, #616]	@ (800180c <HAL_GPIO_Init+0x2a0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015a8:	4a98      	ldr	r2, [pc, #608]	@ (800180c <HAL_GPIO_Init+0x2a0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d875      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ae:	4a98      	ldr	r2, [pc, #608]	@ (8001810 <HAL_GPIO_Init+0x2a4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d058      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015b4:	4a96      	ldr	r2, [pc, #600]	@ (8001810 <HAL_GPIO_Init+0x2a4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d86f      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ba:	4a96      	ldr	r2, [pc, #600]	@ (8001814 <HAL_GPIO_Init+0x2a8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015c0:	4a94      	ldr	r2, [pc, #592]	@ (8001814 <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d869      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015c6:	4a94      	ldr	r2, [pc, #592]	@ (8001818 <HAL_GPIO_Init+0x2ac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04c      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015cc:	4a92      	ldr	r2, [pc, #584]	@ (8001818 <HAL_GPIO_Init+0x2ac>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d863      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015d2:	4a92      	ldr	r2, [pc, #584]	@ (800181c <HAL_GPIO_Init+0x2b0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d046      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015d8:	4a90      	ldr	r2, [pc, #576]	@ (800181c <HAL_GPIO_Init+0x2b0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d85d      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d82a      	bhi.n	8001638 <HAL_GPIO_Init+0xcc>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d859      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015e6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <HAL_GPIO_Init+0x80>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001695 	.word	0x08001695
 80015fc:	0800169b 	.word	0x0800169b
 8001600:	0800169b 	.word	0x0800169b
 8001604:	0800169b 	.word	0x0800169b
 8001608:	0800169b 	.word	0x0800169b
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800169b 	.word	0x0800169b
 8001614:	0800169b 	.word	0x0800169b
 8001618:	0800169b 	.word	0x0800169b
 800161c:	0800169b 	.word	0x0800169b
 8001620:	0800169b 	.word	0x0800169b
 8001624:	0800169b 	.word	0x0800169b
 8001628:	0800169b 	.word	0x0800169b
 800162c:	0800169b 	.word	0x0800169b
 8001630:	08001649 	.word	0x08001649
 8001634:	0800165d 	.word	0x0800165d
 8001638:	4a79      	ldr	r2, [pc, #484]	@ (8001820 <HAL_GPIO_Init+0x2b4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e02c      	b.n	800169a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e029      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e024      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3308      	adds	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e01f      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	330c      	adds	r3, #12
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e01a      	b.n	800169c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166e:	2304      	movs	r3, #4
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e013      	b.n	800169c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	611a      	str	r2, [r3, #16]
          break;
 8001686:	e009      	b.n	800169c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	615a      	str	r2, [r3, #20]
          break;
 8001692:	e003      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x130>
          break;
 800169a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d801      	bhi.n	80016a6 <HAL_GPIO_Init+0x13a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x13e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	@ 0xff
 80016b0:	d802      	bhi.n	80016b8 <HAL_GPIO_Init+0x14c>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x152>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	3b08      	subs	r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	210f      	movs	r1, #15
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80b1 	beq.w	800184e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <HAL_GPIO_Init+0x2b8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001704:	4a48      	ldr	r2, [pc, #288]	@ (8001828 <HAL_GPIO_Init+0x2bc>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a40      	ldr	r2, [pc, #256]	@ (800182c <HAL_GPIO_Init+0x2c0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1ec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <HAL_GPIO_Init+0x2c4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1e8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a3e      	ldr	r2, [pc, #248]	@ (8001834 <HAL_GPIO_Init+0x2c8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1e4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3d      	ldr	r2, [pc, #244]	@ (8001838 <HAL_GPIO_Init+0x2cc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1e0>
 8001748:	2303      	movs	r3, #3
 800174a:	e006      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 800174c:	2304      	movs	r3, #4
 800174e:	e004      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001750:	2302      	movs	r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_Init+0x1ee>
 8001758:	2300      	movs	r3, #0
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800176a:	492f      	ldr	r1, [pc, #188]	@ (8001828 <HAL_GPIO_Init+0x2bc>)
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001784:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	492c      	ldr	r1, [pc, #176]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4928      	ldr	r1, [pc, #160]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4922      	ldr	r1, [pc, #136]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	491e      	ldr	r1, [pc, #120]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4918      	ldr	r1, [pc, #96]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4914      	ldr	r1, [pc, #80]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d021      	beq.n	8001840 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e021      	b.n	800184e <HAL_GPIO_Init+0x2e2>
 800180a:	bf00      	nop
 800180c:	10320000 	.word	0x10320000
 8001810:	10310000 	.word	0x10310000
 8001814:	10220000 	.word	0x10220000
 8001818:	10210000 	.word	0x10210000
 800181c:	10120000 	.word	0x10120000
 8001820:	10110000 	.word	0x10110000
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	40011000 	.word	0x40011000
 8001838:	40011400 	.word	0x40011400
 800183c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_GPIO_Init+0x304>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	4909      	ldr	r1, [pc, #36]	@ (8001870 <HAL_GPIO_Init+0x304>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f ae8e 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	372c      	adds	r7, #44	@ 0x2c
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001882:	e09a      	b.n	80019ba <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 808d 	beq.w	80019b4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800189a:	4a4e      	ldr	r2, [pc, #312]	@ (80019d4 <HAL_GPIO_DeInit+0x160>)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a46      	ldr	r2, [pc, #280]	@ (80019d8 <HAL_GPIO_DeInit+0x164>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d013      	beq.n	80018ec <HAL_GPIO_DeInit+0x78>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a45      	ldr	r2, [pc, #276]	@ (80019dc <HAL_GPIO_DeInit+0x168>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_DeInit+0x74>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a44      	ldr	r2, [pc, #272]	@ (80019e0 <HAL_GPIO_DeInit+0x16c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_DeInit+0x70>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a43      	ldr	r2, [pc, #268]	@ (80019e4 <HAL_GPIO_DeInit+0x170>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_DeInit+0x6c>
 80018dc:	2303      	movs	r3, #3
 80018de:	e006      	b.n	80018ee <HAL_GPIO_DeInit+0x7a>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_DeInit+0x7a>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_DeInit+0x7a>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_DeInit+0x7a>
 80018ec:	2300      	movs	r3, #0
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d132      	bne.n	8001964 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	4938      	ldr	r1, [pc, #224]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 8001908:	4013      	ands	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 8001916:	4013      	ands	r3, r2
 8001918:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4931      	ldr	r1, [pc, #196]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 8001924:	4013      	ands	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001928:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	492d      	ldr	r1, [pc, #180]	@ (80019e8 <HAL_GPIO_DeInit+0x174>)
 8001932:	4013      	ands	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <HAL_GPIO_DeInit+0x160>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	43da      	mvns	r2, r3
 8001956:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <HAL_GPIO_DeInit+0x160>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	400a      	ands	r2, r1
 800195e:	3302      	adds	r3, #2
 8001960:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	@ 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_DeInit+0xfa>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_DeInit+0xfe>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	@ 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_DeInit+0x10c>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_DeInit+0x112>
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	2104      	movs	r1, #4
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	3301      	adds	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f47f af5e 	bne.w	8001884 <HAL_GPIO_DeInit+0x10>
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	40011000 	.word	0x40011000
 80019e4:	40011400 	.word	0x40011400
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b088      	sub	sp, #32
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fb65 	bl	800712a <USB_ReadInterrupts>
 8001a60:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fabb 	bl	8001fe8 <PCD_EP_ISR_Handler>

    return;
 8001a72:	e119      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d013      	beq.n	8001aa6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f006 fc1a 	bl	80082d0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f905 	bl	8001cae <HAL_PCD_SetAddress>

    return;
 8001aa4:	e100      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00c      	beq.n	8001aca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ac8:	e0ee      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00c      	beq.n	8001aee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001aec:	e0dc      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d027      	beq.n	8001b48 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0208 	bic.w	r2, r2, #8
 8001b22:	b292      	uxth	r2, r2
 8001b24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f006 fc09 	bl	8008340 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b40:	b292      	uxth	r2, r2
 8001b42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b46:	e0af      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8083 	beq.w	8001c5a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	77fb      	strb	r3, [r7, #31]
 8001b58:	e010      	b.n	8001b7c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	441a      	add	r2, r3
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	3320      	adds	r3, #32
 8001b70:	443b      	add	r3, r7
 8001b72:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	77fb      	strb	r3, [r7, #31]
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
 8001b7e:	2b07      	cmp	r3, #7
 8001b80:	d9eb      	bls.n	8001b5a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	b292      	uxth	r2, r2
 8001b96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bb2:	bf00      	nop
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f6      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	e00f      	b.n	8001c04 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001be4:	7ffb      	ldrb	r3, [r7, #31]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4611      	mov	r1, r2
 8001bec:	7ffa      	ldrb	r2, [r7, #31]
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	440a      	add	r2, r1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	3320      	adds	r3, #32
 8001bf6:	443b      	add	r3, r7
 8001bf8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001bfc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	3301      	adds	r3, #1
 8001c02:	77fb      	strb	r3, [r7, #31]
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d9ec      	bls.n	8001be4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0208 	orr.w	r2, r2, #8
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0204 	orr.w	r2, r2, #4
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 fb5a 	bl	800830c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c58:	e026      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00f      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f006 fb19 	bl	80082b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c82:	e011      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ca6:	bf00      	nop
  }
}
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PCD_SetAddress+0x1a>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e012      	b.n	8001cee <HAL_PCD_SetAddress+0x40>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 fa10 	bl	8007104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	803b      	strh	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da0e      	bge.n	8001d3a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	705a      	strb	r2, [r3, #1]
 8001d38:	e00e      	b.n	8001d58 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 0207 	and.w	r2, r3, #7
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d64:	883a      	ldrh	r2, [r7, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	78ba      	ldrb	r2, [r7, #2]
 8001d6e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d102      	bne.n	8001d7c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_PCD_EP_Open+0x94>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e00e      	b.n	8001da8 <HAL_PCD_EP_Open+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f945 	bl	8005028 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001da6:	7afb      	ldrb	r3, [r7, #11]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	f003 0207 	and.w	r2, r3, #7
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2200      	movs	r2, #0
 8001dee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fcd0 	bl	80057a8 <USB_EPStartXfer>

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	f003 0207 	and.w	r2, r3, #7
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3310      	adds	r3, #16
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6979      	ldr	r1, [r7, #20]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fc99 	bl	80057a8 <USB_EPStartXfer>

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	7912      	ldrb	r2, [r2, #4]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e04c      	b.n	8001f38 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da0e      	bge.n	8001ec4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0207 	and.w	r2, r3, #7
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
 8001ec2:	e00c      	b.n	8001ede <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_EP_SetStall+0x7e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e01c      	b.n	8001f38 <HAL_PCD_EP_SetStall+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fffc 	bl	8006f0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f005 f90d 	bl	8007148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	7912      	ldrb	r2, [r2, #4]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e040      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da0e      	bge.n	8001f84 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0207 	and.w	r2, r3, #7
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	3310      	adds	r3, #16
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_EP_ClrStall+0x82>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e00e      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 ffea 	bl	8006faa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b096      	sub	sp, #88	@ 0x58
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ff0:	e3bb      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800200c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8175 	bne.w	8002300 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d14e      	bne.n	80020c0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	81fb      	strh	r3, [r7, #14]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002042:	b29b      	uxth	r3, r3
 8002044:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3310      	adds	r3, #16
 800204a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	3302      	adds	r3, #2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002076:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	441a      	add	r2, r3
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002086:	2100      	movs	r1, #0
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f006 f8f9 	bl	8008280 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7b5b      	ldrb	r3, [r3, #13]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8368 	beq.w	800276a <PCD_EP_ISR_Handler+0x782>
 800209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8363 	bne.w	800276a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7b5b      	ldrb	r3, [r3, #13]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	735a      	strb	r2, [r3, #13]
 80020be:	e354      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020c6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d034      	beq.n	8002148 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	3306      	adds	r3, #6
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002108:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800211c:	b29b      	uxth	r3, r3
 800211e:	f005 f863 	bl	80071e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800212e:	4013      	ands	r3, r2
 8002130:	823b      	strh	r3, [r7, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	8a3a      	ldrh	r2, [r7, #16]
 8002138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f006 f870 	bl	8008226 <HAL_PCD_SetupStageCallback>
 8002146:	e310      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002148:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800214c:	2b00      	cmp	r3, #0
 800214e:	f280 830c 	bge.w	800276a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29a      	uxth	r2, r3
 800215a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800215e:	4013      	ands	r3, r2
 8002160:	83fb      	strh	r3, [r7, #30]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	8bfa      	ldrh	r2, [r7, #30]
 8002168:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	3306      	adds	r3, #6
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800219c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <PCD_EP_ISR_Handler+0x1f0>
 80021a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	6959      	ldr	r1, [r3, #20]
 80021b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f005 f813 	bl	80071e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	441a      	add	r2, r3
 80021cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 f839 	bl	800824a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 82bd 	bne.w	800276a <PCD_EP_ISR_Handler+0x782>
 80021f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021f4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021fc:	f000 82b5 	beq.w	800276a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	b29a      	uxth	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	801a      	strh	r2, [r3, #0]
 8002230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b3e      	cmp	r3, #62	@ 0x3e
 8002236:	d91d      	bls.n	8002274 <PCD_EP_ISR_Handler+0x28c>
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <PCD_EP_ISR_Handler+0x26a>
 800224c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224e:	3b01      	subs	r3, #1
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29a      	uxth	r2, r3
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225a:	b29b      	uxth	r3, r3
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	b29b      	uxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226c:	b29a      	uxth	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	e026      	b.n	80022c2 <PCD_EP_ISR_Handler+0x2da>
 8002274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <PCD_EP_ISR_Handler+0x2aa>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228a:	b29a      	uxth	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	e017      	b.n	80022c2 <PCD_EP_ISR_Handler+0x2da>
 8002292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	647b      	str	r3, [r7, #68]	@ 0x44
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <PCD_EP_ISR_Handler+0x2c4>
 80022a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a8:	3301      	adds	r3, #1
 80022aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d2:	827b      	strh	r3, [r7, #18]
 80022d4:	8a7b      	ldrh	r3, [r7, #18]
 80022d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80022da:	827b      	strh	r3, [r7, #18]
 80022dc:	8a7b      	ldrh	r3, [r7, #18]
 80022de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022e2:	827b      	strh	r3, [r7, #18]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	8a7b      	ldrh	r3, [r7, #18]
 80022ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	8013      	strh	r3, [r2, #0]
 80022fe:	e234      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002314:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002318:	2b00      	cmp	r3, #0
 800231a:	f280 80fc 	bge.w	8002516 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002334:	4013      	ands	r3, r2
 8002336:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800234c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002354:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800236a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236c:	7b1b      	ldrb	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d125      	bne.n	80023be <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	3306      	adds	r3, #6
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800239e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8092 	beq.w	80024cc <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	6959      	ldr	r1, [r3, #20]
 80023b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b2:	88da      	ldrh	r2, [r3, #6]
 80023b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023b8:	f004 ff16 	bl	80071e8 <USB_ReadPMA>
 80023bc:	e086      	b.n	80024cc <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d10a      	bne.n	80023dc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023ca:	461a      	mov	r2, r3
 80023cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f9d9 	bl	8002786 <HAL_PCD_EP_DB_Receive>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80023da:	e077      	b.n	80024cc <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023f6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	441a      	add	r2, r3
 8002408:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800240c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002418:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800241c:	b29b      	uxth	r3, r3
 800241e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d024      	beq.n	8002484 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3302      	adds	r3, #2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002462:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02e      	beq.n	80024cc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002478:	891a      	ldrh	r2, [r3, #8]
 800247a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800247e:	f004 feb3 	bl	80071e8 <USB_ReadPMA>
 8002482:	e023      	b.n	80024cc <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	3306      	adds	r3, #6
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80024b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024be:	6959      	ldr	r1, [r3, #20]
 80024c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c2:	895a      	ldrh	r2, [r3, #10]
 80024c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024c8:	f004 fe8e 	bl	80071e8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024d4:	441a      	add	r2, r3
 80024d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024e2:	441a      	add	r2, r3
 80024e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <PCD_EP_ISR_Handler+0x514>
 80024f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80024f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d206      	bcs.n	800250a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f005 fea1 	bl	800824a <HAL_PCD_DataOutStageCallback>
 8002508:	e005      	b.n	8002516 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002510:	4618      	mov	r0, r3
 8002512:	f003 f949 	bl	80057a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002516:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8123 	beq.w	800276a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002524:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	3310      	adds	r3, #16
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800254e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002552:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	441a      	add	r2, r3
 8002564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800256c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002570:	b29b      	uxth	r3, r3
 8002572:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 80a2 	bne.w	80026c2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800257e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002586:	7b1b      	ldrb	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8093 	beq.w	80026b4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800258e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d046      	beq.n	8002628 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d126      	bne.n	80025f0 <PCD_EP_ISR_Handler+0x608>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	4413      	add	r3, r2
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	011a      	lsls	r2, r3, #4
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	4413      	add	r3, r2
 80025c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e061      	b.n	80026b4 <PCD_EP_ISR_Handler+0x6cc>
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d15d      	bne.n	80026b4 <PCD_EP_ISR_Handler+0x6cc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260c:	4413      	add	r3, r2
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	011a      	lsls	r2, r3, #4
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	4413      	add	r3, r2
 800261a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e045      	b.n	80026b4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d126      	bne.n	8002684 <PCD_EP_ISR_Handler+0x69c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	637b      	str	r3, [r7, #52]	@ 0x34
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264a:	4413      	add	r3, r2
 800264c:	637b      	str	r3, [r7, #52]	@ 0x34
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	011a      	lsls	r2, r3, #4
 8002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002656:	4413      	add	r3, r2
 8002658:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800265c:	633b      	str	r3, [r7, #48]	@ 0x30
 800265e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002668:	b29a      	uxth	r2, r3
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267c:	b29a      	uxth	r2, r3
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e017      	b.n	80026b4 <PCD_EP_ISR_Handler+0x6cc>
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d113      	bne.n	80026b4 <PCD_EP_ISR_Handler+0x6cc>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269a:	4413      	add	r3, r2
 800269c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	2200      	movs	r2, #0
 80026b2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f005 fde0 	bl	8008280 <HAL_PCD_DataInStageCallback>
 80026c0:	e053      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d146      	bne.n	800275c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	3302      	adds	r3, #2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80026fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002702:	429a      	cmp	r2, r3
 8002704:	d907      	bls.n	8002716 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002712:	619a      	str	r2, [r3, #24]
 8002714:	e002      	b.n	800271c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f005 fda8 	bl	8008280 <HAL_PCD_DataInStageCallback>
 8002730:	e01b      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800273a:	441a      	add	r2, r3
 800273c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002748:	441a      	add	r2, r3
 800274a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002754:	4618      	mov	r0, r3
 8002756:	f003 f827 	bl	80057a8 <USB_EPStartXfer>
 800275a:	e006      	b.n	800276a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800275c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002760:	461a      	mov	r2, r3
 8002762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f91b 	bl	80029a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21b      	sxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f6ff ac3b 	blt.w	8001ff2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3758      	adds	r7, #88	@ 0x58
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	4613      	mov	r3, r2
 8002792:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07e      	beq.n	800289c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	3302      	adds	r3, #2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	8b7b      	ldrh	r3, [r7, #26]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d306      	bcc.n	80027e0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	8b7b      	ldrh	r3, [r7, #26]
 80027d8:	1ad2      	subs	r2, r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	619a      	str	r2, [r3, #24]
 80027de:	e002      	b.n	80027e6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d123      	bne.n	8002836 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002808:	833b      	strh	r3, [r7, #24]
 800280a:	8b3b      	ldrh	r3, [r7, #24]
 800280c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002810:	833b      	strh	r3, [r7, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	441a      	add	r2, r3
 8002820:	8b3b      	ldrh	r3, [r7, #24]
 8002822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800282a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01f      	beq.n	8002880 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800285a:	82fb      	strh	r3, [r7, #22]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	8afb      	ldrh	r3, [r7, #22]
 800286c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002878:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800287c:	b29b      	uxth	r3, r3
 800287e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002880:	8b7b      	ldrh	r3, [r7, #26]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8087 	beq.w	8002996 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	891a      	ldrh	r2, [r3, #8]
 8002894:	8b7b      	ldrh	r3, [r7, #26]
 8002896:	f004 fca7 	bl	80071e8 <USB_ReadPMA>
 800289a:	e07c      	b.n	8002996 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	3306      	adds	r3, #6
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	8b7b      	ldrh	r3, [r7, #26]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d306      	bcc.n	80028de <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	8b7b      	ldrh	r3, [r7, #26]
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	619a      	str	r2, [r3, #24]
 80028dc:	e002      	b.n	80028e4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d123      	bne.n	8002934 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002906:	83fb      	strh	r3, [r7, #30]
 8002908:	8bfb      	ldrh	r3, [r7, #30]
 800290a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800290e:	83fb      	strh	r3, [r7, #30]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8bfb      	ldrh	r3, [r7, #30]
 8002920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11f      	bne.n	800297e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002958:	83bb      	strh	r3, [r7, #28]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	8bbb      	ldrh	r3, [r7, #28]
 800296a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800296e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002976:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800297e:	8b7b      	ldrh	r3, [r7, #26]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6959      	ldr	r1, [r3, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	895a      	ldrh	r2, [r3, #10]
 8002990:	8b7b      	ldrh	r3, [r7, #26]
 8002992:	f004 fc29 	bl	80071e8 <USB_ReadPMA>
    }
  }

  return count;
 8002996:	8b7b      	ldrh	r3, [r7, #26]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0a4      	sub	sp, #144	@ 0x90
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 81dd 	beq.w	8002d74 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	3302      	adds	r3, #2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d907      	bls.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	619a      	str	r2, [r3, #24]
 8002a00:	e002      	b.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 80b9 	bne.w	8002b84 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d126      	bne.n	8002a68 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2e:	4413      	add	r3, r2
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	011a      	lsls	r2, r3, #4
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	e01a      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d116      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	4413      	add	r3, r2
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	011a      	lsls	r2, r3, #4
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	4413      	add	r3, r2
 8002a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d126      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x15a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	011a      	lsls	r2, r3, #4
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	e017      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d113      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	4413      	add	r3, r2
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	011a      	lsls	r2, r3, #4
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f005 fba5 	bl	8008280 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 82fc 	beq.w	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5c:	82fb      	strh	r3, [r7, #22]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	8afb      	ldrh	r3, [r7, #22]
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
 8002b82:	e2da      	b.n	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d021      	beq.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 82ae 	bne.w	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002be6:	441a      	add	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d30b      	bcc.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	621a      	str	r2, [r3, #32]
 8002c1c:	e017      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d108      	bne.n	8002c38 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002c26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c36:	e00a      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d165      	bne.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x382>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	011a      	lsls	r2, r3, #4
 8002c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c76:	4413      	add	r3, r2
 8002c78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c92:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c94:	d91d      	bls.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PCD_EP_DB_Transmit+0x310>
 8002caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cac:	3b01      	subs	r3, #1
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	e044      	b.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x350>
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	e035      	b.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	3301      	adds	r3, #1
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e01c      	b.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d118      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3e:	4413      	add	r3, r2
 8002d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	011a      	lsls	r2, r3, #4
 8002d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	6959      	ldr	r1, [r3, #20]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	891a      	ldrh	r2, [r3, #8]
 8002d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f004 f9f6 	bl	800715e <USB_WritePMA>
 8002d72:	e1e2      	b.n	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	3306      	adds	r3, #6
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d307      	bcc.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	619a      	str	r2, [r3, #24]
 8002dba:	e002      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 80c0 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d126      	bne.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x482>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002de8:	4413      	add	r3, r2
 8002dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	011a      	lsls	r2, r3, #4
 8002df2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df4:	4413      	add	r3, r2
 8002df6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e01a      	b.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d116      	bne.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e3e:	4413      	add	r3, r2
 8002e40:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	011a      	lsls	r2, r3, #4
 8002e48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12b      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7a:	4413      	add	r3, r2
 8002e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	011a      	lsls	r2, r3, #4
 8002e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e86:	4413      	add	r3, r2
 8002e88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	e017      	b.n	8002eee <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d113      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ed4:	4413      	add	r3, r2
 8002ed6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	011a      	lsls	r2, r3, #4
 8002ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f005 f9c3 	bl	8008280 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 811a 	bne.w	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f20:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8013      	strh	r3, [r2, #0]
 8002f4a:	e0f6      	b.n	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d121      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 80ca 	bne.w	800313a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fae:	441a      	add	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d30b      	bcc.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fde:	1ad2      	subs	r2, r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	621a      	str	r2, [r3, #32]
 8002fe4:	e017      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002fee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ffe:	e00a      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	657b      	str	r3, [r7, #84]	@ 0x54
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d165      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003038:	4413      	add	r3, r2
 800303a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003044:	4413      	add	r3, r2
 8003046:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800304a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800304c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003056:	b29a      	uxth	r2, r3
 8003058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003060:	2b3e      	cmp	r3, #62	@ 0x3e
 8003062:	d91d      	bls.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x700>
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800307a:	3b01      	subs	r3, #1
 800307c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800307e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29a      	uxth	r2, r3
 8003084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003086:	b29b      	uxth	r3, r3
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	b29b      	uxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003098:	b29a      	uxth	r2, r3
 800309a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e041      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x784>
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x71e>
 80030a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e032      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x784>
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x738>
 80030d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030d4:	3301      	adds	r3, #1
 80030d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	e019      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x784>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x784>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003100:	b29b      	uxth	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	4413      	add	r3, r2
 8003108:	657b      	str	r3, [r7, #84]	@ 0x54
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	011a      	lsls	r2, r3, #4
 8003110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003112:	4413      	add	r3, r2
 8003114:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003118:	653b      	str	r3, [r7, #80]	@ 0x50
 800311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800311e:	b29a      	uxth	r2, r3
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6959      	ldr	r1, [r3, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	895a      	ldrh	r2, [r3, #10]
 8003130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003134:	b29b      	uxth	r3, r3
 8003136:	f004 f812 	bl	800715e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003154:	82bb      	strh	r3, [r7, #20]
 8003156:	8abb      	ldrh	r3, [r7, #20]
 8003158:	f083 0310 	eor.w	r3, r3, #16
 800315c:	82bb      	strh	r3, [r7, #20]
 800315e:	8abb      	ldrh	r3, [r7, #20]
 8003160:	f083 0320 	eor.w	r3, r3, #32
 8003164:	82bb      	strh	r3, [r7, #20]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	8abb      	ldrh	r3, [r7, #20]
 8003176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800317a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800317e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3790      	adds	r7, #144	@ 0x90
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	420e0020 	.word	0x420e0020

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e272      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031cc:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d112      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
 80031e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4b89      	ldr	r3, [pc, #548]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d06c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x12c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d168      	bne.n	80032d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e24c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x76>
 8003214:	4b80      	ldr	r3, [pc, #512]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7f      	ldr	r2, [pc, #508]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e02e      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b7b      	ldr	r3, [pc, #492]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7a      	ldr	r2, [pc, #488]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b78      	ldr	r3, [pc, #480]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a77      	ldr	r2, [pc, #476]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0xbc>
 800324e:	4b72      	ldr	r3, [pc, #456]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a71      	ldr	r2, [pc, #452]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003268:	4b6b      	ldr	r3, [pc, #428]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6a      	ldr	r2, [pc, #424]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a67      	ldr	r2, [pc, #412]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fd04 	bl	8000c94 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fd00 	bl	8000c94 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e200      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xe4>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd fcf0 	bl	8000c94 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fcec 	bl	8000c94 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1ec      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x10c>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032f2:	4b49      	ldr	r3, [pc, #292]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
 80032fe:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b43      	ldr	r3, [pc, #268]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c0      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4939      	ldr	r1, [pc, #228]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fca5 	bl	8000c94 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd fca1 	bl	8000c94 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4927      	ldr	r1, [pc, #156]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fc84 	bl	8000c94 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fc80 	bl	8000c94 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e180      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <HAL_RCC_OscConfig+0x274>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fd fc64 	bl	8000c94 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd fc60 	bl	8000c94 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e160      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 face 	bl	8003990 <RCC_Delay>
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fc4a 	bl	8000c94 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003402:	e00f      	b.n	8003424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fd fc46 	bl	8000c94 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d908      	bls.n	8003424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e146      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	42420000 	.word	0x42420000
 8003420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b92      	ldr	r3, [pc, #584]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e9      	bne.n	8003404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a6 	beq.w	800358a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b8b      	ldr	r3, [pc, #556]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a87      	ldr	r2, [pc, #540]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]
 800345a:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b82      	ldr	r3, [pc, #520]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b7f      	ldr	r3, [pc, #508]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fd fc07 	bl	8000c94 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fd fc03 	bl	8000c94 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b64      	cmp	r3, #100	@ 0x64
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e103      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b75      	ldr	r3, [pc, #468]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e02d      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x334>
 80034c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b67      	ldr	r3, [pc, #412]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a66      	ldr	r2, [pc, #408]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	e01c      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x356>
 80034e8:	4b61      	ldr	r3, [pc, #388]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a60      	ldr	r2, [pc, #384]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a5a      	ldr	r2, [pc, #360]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a57      	ldr	r2, [pc, #348]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fd fbb7 	bl	8000c94 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fbb3 	bl	8000c94 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x37e>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fba1 	bl	8000c94 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fb9d 	bl	8000c94 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b3c      	ldr	r3, [pc, #240]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a3b      	ldr	r2, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8087 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d061      	beq.n	8003664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d146      	bne.n	8003636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b33      	ldr	r3, [pc, #204]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fb71 	bl	8000c94 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd fb6d 	bl	8000c94 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e06d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4921      	ldr	r1, [pc, #132]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a19      	ldr	r1, [r3, #32]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	491b      	ldr	r1, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fd fb41 	bl	8000c94 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd fb3d 	bl	8000c94 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
 8003634:	e035      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fb2a 	bl	8000c94 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fb26 	bl	8000c94 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e026      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x498>
 8003662:	e01e      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e019      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCC_OscConfig+0x500>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d0      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4965      	ldr	r1, [pc, #404]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a58      	ldr	r2, [pc, #352]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800372e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d040      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e073      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4936      	ldr	r1, [pc, #216]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fd fa78 	bl	8000c94 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fa74 	bl	8000c94 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e053      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4922      	ldr	r1, [pc, #136]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	@ (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1cc>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_ClockConfig+0x1d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd f9d6 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	08009454 	.word	0x08009454
 800387c:	20000000 	.word	0x20000000
 8003880:	2000000c 	.word	0x2000000c

08003884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x94>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x30>
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x36>
 80038b2:	e027      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b4:	4b19      	ldr	r3, [pc, #100]	@ (800391c <HAL_RCC_GetSysClockFreq+0x98>)
 80038b6:	613b      	str	r3, [r7, #16]
      break;
 80038b8:	e027      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	0c9b      	lsrs	r3, r3, #18
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	4a17      	ldr	r2, [pc, #92]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038c4:	5cd3      	ldrb	r3, [r2, r3]
 80038c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d010      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x94>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0c5b      	lsrs	r3, r3, #17
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a0d      	ldr	r2, [pc, #52]	@ (800391c <HAL_RCC_GetSysClockFreq+0x98>)
 80038e6:	fb03 f202 	mul.w	r2, r3, r2
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e004      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003928 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	613b      	str	r3, [r7, #16]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCC_GetSysClockFreq+0x98>)
 8003906:	613b      	str	r3, [r7, #16]
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	693b      	ldr	r3, [r7, #16]
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	007a1200 	.word	0x007a1200
 8003920:	0800946c 	.word	0x0800946c
 8003924:	0800947c 	.word	0x0800947c
 8003928:	003d0900 	.word	0x003d0900

0800392c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <HAL_RCC_GetHCLKFreq+0x10>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff2 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	08009464 	.word	0x08009464

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffde 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0adb      	lsrs	r3, r3, #11
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08009464 	.word	0x08009464

08003990 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <RCC_Delay+0x34>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <RCC_Delay+0x38>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0a5b      	lsrs	r3, r3, #9
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039ac:	bf00      	nop
  }
  while (Delay --);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	60fa      	str	r2, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f9      	bne.n	80039ac <RCC_Delay+0x1c>
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	20000000 	.word	0x20000000
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d07d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ec:	4b4f      	ldr	r3, [pc, #316]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b4c      	ldr	r3, [pc, #304]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4a4b      	ldr	r2, [pc, #300]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	61d3      	str	r3, [r2, #28]
 8003a04:	4b49      	ldr	r3, [pc, #292]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b46      	ldr	r3, [pc, #280]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d118      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a20:	4b43      	ldr	r3, [pc, #268]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a42      	ldr	r2, [pc, #264]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2c:	f7fd f932 	bl	8000c94 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	e008      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fd f92e 	bl	8000c94 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e06d      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4b3a      	ldr	r3, [pc, #232]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a52:	4b36      	ldr	r3, [pc, #216]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d027      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a70:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	4b2c      	ldr	r3, [pc, #176]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a86:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fd f8fd 	bl	8000c94 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fd f8f9 	bl	8000c94 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e036      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ee      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4917      	ldr	r1, [pc, #92]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a13      	ldr	r2, [pc, #76]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	490b      	ldr	r1, [pc, #44]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0e:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4904      	ldr	r1, [pc, #16]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42420440 	.word	0x42420440

08003b38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	f200 808a 	bhi.w	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d045      	beq.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d075      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b6e:	e082      	b.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b70:	4b46      	ldr	r3, [pc, #280]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b76:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d07b      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	4a41      	ldr	r2, [pc, #260]	@ (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b8c:	5cd3      	ldrb	r3, [r2, r3]
 8003b8e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d015      	beq.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0c5b      	lsrs	r3, r3, #17
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bb4:	4a38      	ldr	r2, [pc, #224]	@ (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a34      	ldr	r2, [pc, #208]	@ (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	61bb      	str	r3, [r7, #24]
      break;
 8003be2:	e04a      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
      break;
 8003bf2:	e042      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003bf4:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c04:	d108      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e01f      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c22:	d109      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c30:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e00f      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d11c      	bne.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c44:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c50:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c54:	61bb      	str	r3, [r7, #24]
      break;
 8003c56:	e012      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c58:	e011      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c5a:	f7ff fe85 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0b9b      	lsrs	r3, r3, #14
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	61bb      	str	r3, [r7, #24]
      break;
 8003c74:	e004      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c7e:	bf00      	nop
    }
  }
  return (frequency);
 8003c80:	69bb      	ldr	r3, [r7, #24]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08009480 	.word	0x08009480
 8003c94:	08009490 	.word	0x08009490
 8003c98:	007a1200 	.word	0x007a1200
 8003c9c:	003d0900 	.word	0x003d0900
 8003ca0:	aaaaaaab 	.word	0xaaaaaaab

08003ca4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07a      	b.n	8003db0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7c5b      	ldrb	r3, [r3, #17]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fc fdb2 	bl	8000834 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f870 	bl	8003dbc <HAL_RTC_WaitForSynchro>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e061      	b.n	8003db0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f892 	bl	8003e16 <RTC_EnterInitMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e056      	b.n	8003db0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0207 	bic.w	r2, r2, #7
 8003d10:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003d1a:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RTC_Init+0x114>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a26      	ldr	r2, [pc, #152]	@ (8003db8 <HAL_RTC_Init+0x114>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RTC_Init+0x114>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4921      	ldr	r1, [pc, #132]	@ (8003db8 <HAL_RTC_Init+0x114>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d003      	beq.n	8003d4a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00e      	b.n	8003d68 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7ff fef4 	bl	8003b38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d50:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e026      	b.n	8003db0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0c1a      	lsrs	r2, r3, #16
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 020f 	and.w	r2, r2, #15
 8003d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f870 	bl	8003e66 <RTC_ExitInitMode>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00c      	b.n	8003db0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40006c00 	.word	0x40006c00

08003dbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01d      	b.n	8003e0e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003de2:	f7fc ff57 	bl	8000c94 <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003de8:	e009      	b.n	8003dfe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003dea:	f7fc ff53 	bl	8000c94 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003df8:	d901      	bls.n	8003dfe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e007      	b.n	8003e0e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003e22:	f7fc ff37 	bl	8000c94 <HAL_GetTick>
 8003e26:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e28:	e009      	b.n	8003e3e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e2a:	f7fc ff33 	bl	8000c94 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e38:	d901      	bls.n	8003e3e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e00f      	b.n	8003e5e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0210 	orr.w	r2, r2, #16
 8003e5a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0210 	bic.w	r2, r2, #16
 8003e80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e82:	f7fc ff07 	bl	8000c94 <HAL_GetTick>
 8003e86:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e88:	e009      	b.n	8003e9e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e8a:	f7fc ff03 	bl	8000c94 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e98:	d901      	bls.n	8003e9e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e007      	b.n	8003eae <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003ec8:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <HAL_RTCEx_BKUPWrite+0x30>)
 8003eca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	b292      	uxth	r2, r2
 8003edc:	601a      	str	r2, [r3, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	40006c00 	.word	0x40006c00

08003eec <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003efe:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <HAL_RTCEx_BKUPRead+0x34>)
 8003f00:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003f14:	68bb      	ldr	r3, [r7, #8]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40006c00 	.word	0x40006c00

08003f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e042      	b.n	8003fbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fc fd98 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	@ 0x24
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 ffcf 	bl	8004f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e024      	b.n	8004020 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	@ 0x24
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fdc4 	bl	8000b7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d175      	bne.n	8004134 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_UART_Transmit+0x2c>
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e06e      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2221      	movs	r2, #33	@ 0x21
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004066:	f7fc fe15 	bl	8000c94 <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800409c:	e02e      	b.n	80040fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fc40 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03a      	b.n	8004136 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	3302      	adds	r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e007      	b.n	80040ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1cb      	bne.n	800409e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2140      	movs	r1, #64	@ 0x40
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fc0c 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	d112      	bne.n	800417e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_UART_Receive_IT+0x26>
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e00b      	b.n	8004180 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	461a      	mov	r2, r3
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fc33 	bl	80049e0 <UART_Start_Receive_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	e000      	b.n	8004180 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d112      	bne.n	80041c8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_UART_Receive_DMA+0x26>
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00b      	b.n	80041ca <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fc48 	bl	8004a54 <UART_Start_Receive_DMA>
 80041c4:	4603      	mov	r3, r0
 80041c6:	e000      	b.n	80041ca <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b0ba      	sub	sp, #232	@ 0xe8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_UART_IRQHandler+0x66>
 8004226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fdac 	bl	8004d90 <UART_Receive_IT>
      return;
 8004238:	e25b      	b.n	80046f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800423a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80de 	beq.w	8004400 <HAL_UART_IRQHandler+0x22c>
 8004244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004254:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80d1 	beq.w	8004400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xae>
 800426a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_UART_IRQHandler+0xd2>
 800428e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_UART_IRQHandler+0xf6>
 80042b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_UART_IRQHandler+0x126>
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 81f2 	beq.w	80046e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_UART_IRQHandler+0x14e>
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fd37 	bl	8004d90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_UART_IRQHandler+0x17a>
 8004346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04f      	beq.n	80043ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fc41 	bl	8004bd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d041      	beq.n	80043e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800437c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800438e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800439a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1d9      	bne.n	8004362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d013      	beq.n	80043de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	4a7e      	ldr	r2, [pc, #504]	@ (80045b4 <HAL_UART_IRQHandler+0x3e0>)
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc ff26 	bl	8001214 <HAL_DMA_Abort_IT>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043d8:	4610      	mov	r0, r2
 80043da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00e      	b.n	80043fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fb24 	bl	8000a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e00a      	b.n	80043fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fb20 	bl	8000a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	e006      	b.n	80043fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fb1c 	bl	8000a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043fa:	e175      	b.n	80046e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	bf00      	nop
    return;
 80043fe:	e173      	b.n	80046e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 814f 	bne.w	80046a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8148 	beq.w	80046a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8141 	beq.w	80046a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80b6 	beq.w	80045b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8145 	beq.w	80046ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800446a:	429a      	cmp	r2, r3
 800446c:	f080 813e 	bcs.w	80046ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004476:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b20      	cmp	r3, #32
 8004480:	f000 8088 	beq.w	8004594 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800449a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800449e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1d9      	bne.n	8004484 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e1      	bne.n	80044d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800451c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800451e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004530:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004532:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004536:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800453e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004576:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004578:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800457c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fe04 	bl	800119c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8b6 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b0:	e09c      	b.n	80046ec <HAL_UART_IRQHandler+0x518>
 80045b2:	bf00      	nop
 80045b4:	08004c9b 	.word	0x08004c9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 808e 	beq.w	80046f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8089 	beq.w	80046f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004602:	647a      	str	r2, [r7, #68]	@ 0x44
 8004604:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e3      	bne.n	80045de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	623b      	str	r3, [r7, #32]
   return(result);
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800463a:	633a      	str	r2, [r7, #48]	@ 0x30
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e3      	bne.n	8004616 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	60fb      	str	r3, [r7, #12]
   return(result);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004680:	61fa      	str	r2, [r7, #28]
 8004682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	69b9      	ldr	r1, [r7, #24]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	617b      	str	r3, [r7, #20]
   return(result);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800469a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f83b 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a6:	e023      	b.n	80046f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_UART_IRQHandler+0x4f4>
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fafe 	bl	8004cc2 <UART_Transmit_IT>
    return;
 80046c6:	e014      	b.n	80046f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <HAL_UART_IRQHandler+0x51e>
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb3d 	bl	8004d60 <UART_EndTransmit_IT>
    return;
 80046e6:	e004      	b.n	80046f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80046f0:	bf00      	nop
  }
}
 80046f2:	37e8      	adds	r7, #232	@ 0xe8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b09c      	sub	sp, #112	@ 0x70
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d172      	bne.n	8004834 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800474e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004750:	2200      	movs	r2, #0
 8004752:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800476a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004774:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004776:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800477a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	667b      	str	r3, [r7, #100]	@ 0x64
 80047a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80047aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	623b      	str	r3, [r7, #32]
   return(result);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d119      	bne.n	8004834 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0310 	bic.w	r3, r3, #16
 8004816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004836:	2200      	movs	r2, #0
 8004838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	2b01      	cmp	r3, #1
 8004840:	d106      	bne.n	8004850 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004844:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004846:	4619      	mov	r1, r3
 8004848:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800484a:	f7ff ff67 	bl	800471c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800484e:	e002      	b.n	8004856 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004852:	f7fc f8f5 	bl	8000a40 <HAL_UART_RxCpltCallback>
}
 8004856:	bf00      	nop
 8004858:	3770      	adds	r7, #112	@ 0x70
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	2b01      	cmp	r3, #1
 8004878:	d108      	bne.n	800488c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff ff49 	bl	800471c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800488a:	e002      	b.n	8004892 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff ff3c 	bl	800470a <HAL_UART_RxHalfCpltCallback>
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b21      	cmp	r3, #33	@ 0x21
 80048cc:	d108      	bne.n	80048e0 <UART_DMAError+0x46>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f000 f954 	bl	8004b88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b22      	cmp	r3, #34	@ 0x22
 8004900:	d108      	bne.n	8004914 <UART_DMAError+0x7a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2200      	movs	r2, #0
 800490c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800490e:	68b8      	ldr	r0, [r7, #8]
 8004910:	f000 f961 	bl	8004bd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004920:	68b8      	ldr	r0, [r7, #8]
 8004922:	f7fc f883 	bl	8000a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	e03b      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d037      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fc f9a4 	bl	8000c94 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	6a3a      	ldr	r2, [r7, #32]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <UART_WaitOnFlagUntilTimeout+0x30>
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e03a      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d023      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d020      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d01d      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d116      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f918 	bl	8004bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2208      	movs	r2, #8
 80049aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e00f      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4013      	ands	r3, r2
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d0b4      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2222      	movs	r2, #34	@ 0x22
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0220 	orr.w	r2, r2, #32
 8004a44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
	...

08004a54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b098      	sub	sp, #96	@ 0x60
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2222      	movs	r2, #34	@ 0x22
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	4a3e      	ldr	r2, [pc, #248]	@ (8004b7c <UART_Start_Receive_DMA+0x128>)
 8004a82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	4a3d      	ldr	r2, [pc, #244]	@ (8004b80 <UART_Start_Receive_DMA+0x12c>)
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	4a3c      	ldr	r2, [pc, #240]	@ (8004b84 <UART_Start_Receive_DMA+0x130>)
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	2200      	movs	r2, #0
 8004a9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	f7fc fb12 	bl	80010dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d019      	beq.n	8004b0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004af6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004afc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3760      	adds	r7, #96	@ 0x60
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004733 	.word	0x08004733
 8004b80:	0800485f 	.word	0x0800485f
 8004b84:	0800489b 	.word	0x0800489b

08004b88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	@ 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	61ba      	str	r2, [r7, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004bcc:	bf00      	nop
 8004bce:	3724      	adds	r7, #36	@ 0x24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b095      	sub	sp, #84	@ 0x54
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bfe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d119      	bne.n	8004c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6e:	61ba      	str	r2, [r7, #24]
 8004c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c90:	bf00      	nop
 8004c92:	3754      	adds	r7, #84	@ 0x54
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fb feb9 	bl	8000a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b21      	cmp	r3, #33	@ 0x21
 8004cd4:	d13e      	bne.n	8004d54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cde:	d114      	bne.n	8004d0a <UART_Transmit_IT+0x48>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d110      	bne.n	8004d0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	1c9a      	adds	r2, r3, #2
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]
 8004d08:	e008      	b.n	8004d1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6211      	str	r1, [r2, #32]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fcb9 	bl	80046f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08c      	sub	sp, #48	@ 0x30
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b22      	cmp	r3, #34	@ 0x22
 8004da2:	f040 80ae 	bne.w	8004f02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d117      	bne.n	8004de0 <UART_Receive_IT+0x50>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d113      	bne.n	8004de0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	1c9a      	adds	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dde:	e026      	b.n	8004e2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df2:	d007      	beq.n	8004e04 <UART_Receive_IT+0x74>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <UART_Receive_IT+0x82>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e008      	b.n	8004e24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d15d      	bne.n	8004efe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0220 	bic.w	r2, r2, #32
 8004e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d135      	bne.n	8004ef4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 0310 	bic.w	r3, r3, #16
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eae:	623a      	str	r2, [r7, #32]
 8004eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d10a      	bne.n	8004ee6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fc15 	bl	800471c <HAL_UARTEx_RxEventCallback>
 8004ef2:	e002      	b.n	8004efa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fb fda3 	bl	8000a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e002      	b.n	8004f04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
  }
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3730      	adds	r7, #48	@ 0x30
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f46:	f023 030c 	bic.w	r3, r3, #12
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005020 <UART_SetConfig+0x114>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f74:	f7fe fcf8 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	e002      	b.n	8004f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fce0 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8004f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	4a22      	ldr	r2, [pc, #136]	@ (8005024 <UART_SetConfig+0x118>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	0119      	lsls	r1, r3, #4
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <UART_SetConfig+0x118>)
 8004fba:	fba3 0302 	umull	r0, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2064      	movs	r0, #100	@ 0x64
 8004fc2:	fb00 f303 	mul.w	r3, r0, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	3332      	adds	r3, #50	@ 0x32
 8004fcc:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <UART_SetConfig+0x118>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd8:	4419      	add	r1, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <UART_SetConfig+0x118>)
 8004ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2064      	movs	r0, #100	@ 0x64
 8004ffa:	fb00 f303 	mul.w	r3, r0, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	@ 0x32
 8005004:	4a07      	ldr	r2, [pc, #28]	@ (8005024 <UART_SetConfig+0x118>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	440a      	add	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40013800 	.word	0x40013800
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005028:	b480      	push	{r7}
 800502a:	b09d      	sub	sp, #116	@ 0x74
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800504a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	78db      	ldrb	r3, [r3, #3]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d81f      	bhi.n	800509a <USB_ActivateEndpoint+0x72>
 800505a:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <USB_ActivateEndpoint+0x38>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005071 	.word	0x08005071
 8005064:	0800508d 	.word	0x0800508d
 8005068:	080050a3 	.word	0x080050a3
 800506c:	0800507f 	.word	0x0800507f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005074:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005078:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800507c:	e012      	b.n	80050a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800507e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005082:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005086:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800508a:	e00b      	b.n	80050a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800508c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005094:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005098:	e004      	b.n	80050a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80050a0:	e000      	b.n	80050a4 <USB_ActivateEndpoint+0x7c>
      break;
 80050a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050dc:	b29b      	uxth	r3, r3
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	7b1b      	ldrb	r3, [r3, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 8178 	bne.w	8005404 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8084 	beq.w	8005226 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	4413      	add	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	011a      	lsls	r2, r3, #4
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	88db      	ldrh	r3, [r3, #6]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	827b      	strh	r3, [r7, #18]
 8005160:	8a7b      	ldrh	r3, [r7, #18]
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01b      	beq.n	80051a2 <USB_ActivateEndpoint+0x17a>
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005180:	823b      	strh	r3, [r7, #16]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	8a3b      	ldrh	r3, [r7, #16]
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800519a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	78db      	ldrb	r3, [r3, #3]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d020      	beq.n	80051ec <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c0:	81bb      	strh	r3, [r7, #12]
 80051c2:	89bb      	ldrh	r3, [r7, #12]
 80051c4:	f083 0320 	eor.w	r3, r3, #32
 80051c8:	81bb      	strh	r3, [r7, #12]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	89bb      	ldrh	r3, [r7, #12]
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]
 80051ea:	e2d5      	b.n	8005798 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005202:	81fb      	strh	r3, [r7, #14]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
 8005224:	e2b8      	b.n	8005798 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	4413      	add	r3, r2
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	011a      	lsls	r2, r3, #4
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	4413      	add	r3, r2
 8005244:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	4413      	add	r3, r2
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	011a      	lsls	r2, r3, #4
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	4413      	add	r3, r2
 8005278:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005288:	b29a      	uxth	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b3e      	cmp	r3, #62	@ 0x3e
 8005294:	d91d      	bls.n	80052d2 <USB_ActivateEndpoint+0x2aa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <USB_ActivateEndpoint+0x288>
 80052aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ac:	3b01      	subs	r3, #1
 80052ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4313      	orrs	r3, r2
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e026      	b.n	8005320 <USB_ActivateEndpoint+0x2f8>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <USB_ActivateEndpoint+0x2c8>
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e017      	b.n	8005320 <USB_ActivateEndpoint+0x2f8>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <USB_ActivateEndpoint+0x2e2>
 8005304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005306:	3301      	adds	r3, #1
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29a      	uxth	r2, r3
 8005310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005312:	b29b      	uxth	r3, r3
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	b29b      	uxth	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b29a      	uxth	r2, r3
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800532e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <USB_ActivateEndpoint+0x348>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	843b      	strh	r3, [r7, #32]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	8c3b      	ldrh	r3, [r7, #32]
 800535c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d124      	bne.n	80053c2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800538a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538e:	83bb      	strh	r3, [r7, #28]
 8005390:	8bbb      	ldrh	r3, [r7, #28]
 8005392:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005396:	83bb      	strh	r3, [r7, #28]
 8005398:	8bbb      	ldrh	r3, [r7, #28]
 800539a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800539e:	83bb      	strh	r3, [r7, #28]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	8bbb      	ldrh	r3, [r7, #28]
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
 80053c0:	e1ea      	b.n	8005798 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d8:	83fb      	strh	r3, [r7, #30]
 80053da:	8bfb      	ldrh	r3, [r7, #30]
 80053dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053e0:	83fb      	strh	r3, [r7, #30]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	8bfb      	ldrh	r3, [r7, #30]
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
 8005402:	e1c9      	b.n	8005798 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	78db      	ldrb	r3, [r3, #3]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d11e      	bne.n	800544a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005444:	b29b      	uxth	r3, r3
 8005446:	8013      	strh	r3, [r2, #0]
 8005448:	e01d      	b.n	8005486 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800545c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005460:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005490:	b29b      	uxth	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005496:	4413      	add	r3, r2
 8005498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	011a      	lsls	r2, r3, #4
 80054a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	891b      	ldrh	r3, [r3, #8]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ca:	4413      	add	r3, r2
 80054cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	011a      	lsls	r2, r3, #4
 80054d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80054dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	895b      	ldrh	r3, [r3, #10]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 8093 	bne.w	800561e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800550c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <USB_ActivateEndpoint+0x524>
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800555a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <USB_ActivateEndpoint+0x574>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005594:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80055ba:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055bc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	441a      	add	r2, r3
 80055ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005618:	b29b      	uxth	r3, r3
 800561a:	8013      	strh	r3, [r2, #0]
 800561c:	e0bc      	b.n	8005798 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800562e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01d      	beq.n	8005676 <USB_ActivateEndpoint+0x64e>
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005650:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800566a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800566e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005686:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01d      	beq.n	80056ce <USB_ActivateEndpoint+0x6a6>
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	441a      	add	r2, r3
 80056b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	78db      	ldrb	r3, [r3, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d024      	beq.n	8005720 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80056f4:	f083 0320 	eor.w	r3, r3, #32
 80056f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	441a      	add	r2, r3
 8005706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800570a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800570e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]
 800571e:	e01d      	b.n	800575c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005736:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005798:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800579c:	4618      	mov	r0, r3
 800579e:	3774      	adds	r7, #116	@ 0x74
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b0c2      	sub	sp, #264	@ 0x108
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b6:	6018      	str	r0, [r3, #0]
 80057b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	f040 86b7 	bne.w	8006542 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d908      	bls.n	8005802 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80057f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005800:	e007      	b.n	8005812 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	7b1b      	ldrb	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d13a      	bne.n	8005898 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	88da      	ldrh	r2, [r3, #6]
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	b29b      	uxth	r3, r3
 8005840:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005844:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	f001 fc88 	bl	800715e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	f000 be1f 	b.w	80064d6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	f040 8462 	bne.w	800616e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	f240 83df 	bls.w	8006086 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005918:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800591c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005920:	b29b      	uxth	r3, r3
 8005922:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	1ad2      	subs	r2, r2, r3
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 81c7 	beq.w	8005cf8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30
 8005976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d177      	bne.n	8005a76 <USB_EPStartXfer+0x2ce>
 8005986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	4413      	add	r3, r2
 80059a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	011a      	lsls	r2, r3, #4
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80059d8:	d921      	bls.n	8005a1e <USB_EPStartXfer+0x276>
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <USB_EPStartXfer+0x252>
 80059f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e050      	b.n	8005ac0 <USB_EPStartXfer+0x318>
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <USB_EPStartXfer+0x294>
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	e041      	b.n	8005ac0 <USB_EPStartXfer+0x318>
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <USB_EPStartXfer+0x2b4>
 8005a52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a56:	3301      	adds	r3, #1
 8005a58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e024      	b.n	8005ac0 <USB_EPStartXfer+0x318>
 8005a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d11c      	bne.n	8005ac0 <USB_EPStartXfer+0x318>
 8005a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	4413      	add	r3, r2
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	011a      	lsls	r2, r3, #4
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	4413      	add	r3, r2
 8005ab0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	895b      	ldrh	r3, [r3, #10]
 8005acc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6959      	ldr	r1, [r3, #20]
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ae6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005aea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005aee:	6800      	ldr	r0, [r0, #0]
 8005af0:	f001 fb35 	bl	800715e <USB_WritePMA>
            ep->xfer_buff += len;
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	441a      	add	r2, r3
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a1a      	ldr	r2, [r3, #32]
 8005b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d90f      	bls.n	8005b4e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a1a      	ldr	r2, [r3, #32]
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	621a      	str	r2, [r3, #32]
 8005b4c:	e00e      	b.n	8005b6c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d177      	bne.n	8005c6c <USB_EPStartXfer+0x4c4>
 8005b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011a      	lsls	r2, r3, #4
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bce:	d921      	bls.n	8005c14 <USB_EPStartXfer+0x46c>
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <USB_EPStartXfer+0x448>
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4313      	orrs	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e056      	b.n	8005cc2 <USB_EPStartXfer+0x51a>
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <USB_EPStartXfer+0x48a>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	e047      	b.n	8005cc2 <USB_EPStartXfer+0x51a>
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <USB_EPStartXfer+0x4aa>
 8005c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e02a      	b.n	8005cc2 <USB_EPStartXfer+0x51a>
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d122      	bne.n	8005cc2 <USB_EPStartXfer+0x51a>
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	623b      	str	r3, [r7, #32]
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	891b      	ldrh	r3, [r3, #8]
 8005cce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6959      	ldr	r1, [r3, #20]
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ce8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cf0:	6800      	ldr	r0, [r0, #0]
 8005cf2:	f001 fa34 	bl	800715e <USB_WritePMA>
 8005cf6:	e3ee      	b.n	80064d6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d177      	bne.n	8005df8 <USB_EPStartXfer+0x650>
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d28:	4413      	add	r3, r2
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	011a      	lsls	r2, r3, #4
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d58:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d5a:	d921      	bls.n	8005da0 <USB_EPStartXfer+0x5f8>
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_EPStartXfer+0x5d4>
 8005d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d76:	3b01      	subs	r3, #1
 8005d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e056      	b.n	8005e4e <USB_EPStartXfer+0x6a6>
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <USB_EPStartXfer+0x616>
 8005da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e047      	b.n	8005e4e <USB_EPStartXfer+0x6a6>
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <USB_EPStartXfer+0x636>
 8005dd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e02a      	b.n	8005e4e <USB_EPStartXfer+0x6a6>
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d122      	bne.n	8005e4e <USB_EPStartXfer+0x6a6>
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e28:	4413      	add	r3, r2
 8005e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	011a      	lsls	r2, r3, #4
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	891b      	ldrh	r3, [r3, #8]
 8005e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6959      	ldr	r1, [r3, #20]
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e7c:	6800      	ldr	r0, [r0, #0]
 8005e7e:	f001 f96e 	bl	800715e <USB_WritePMA>
            ep->xfer_buff += len;
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	441a      	add	r2, r3
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d90f      	bls.n	8005edc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ecc:	1ad2      	subs	r2, r2, r3
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	621a      	str	r2, [r3, #32]
 8005eda:	e00e      	b.n	8005efa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d177      	bne.n	8006006 <USB_EPStartXfer+0x85e>
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	4413      	add	r3, r2
 8005f38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f68:	d921      	bls.n	8005fae <USB_EPStartXfer+0x806>
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <USB_EPStartXfer+0x7e2>
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	3b01      	subs	r3, #1
 8005f86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	029b      	lsls	r3, r3, #10
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e050      	b.n	8006050 <USB_EPStartXfer+0x8a8>
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <USB_EPStartXfer+0x824>
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e041      	b.n	8006050 <USB_EPStartXfer+0x8a8>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <USB_EPStartXfer+0x844>
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e024      	b.n	8006050 <USB_EPStartXfer+0x8a8>
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d11c      	bne.n	8006050 <USB_EPStartXfer+0x8a8>
 8006016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800602a:	4413      	add	r3, r2
 800602c:	643b      	str	r3, [r7, #64]	@ 0x40
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800603e:	4413      	add	r3, r2
 8006040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604a:	b29a      	uxth	r2, r3
 800604c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	895b      	ldrh	r3, [r3, #10]
 800605c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6959      	ldr	r1, [r3, #20]
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	b29b      	uxth	r3, r3
 8006072:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006076:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800607a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800607e:	6800      	ldr	r0, [r0, #0]
 8006080:	f001 f86d 	bl	800715e <USB_WritePMA>
 8006084:	e227      	b.n	80064d6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80060b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006112:	4413      	add	r3, r2
 8006114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006126:	4413      	add	r3, r2
 8006128:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800612c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006132:	b29a      	uxth	r2, r3
 8006134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006136:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	b29b      	uxth	r3, r3
 800615a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800615e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006162:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	f000 fff9 	bl	800715e <USB_WritePMA>
 800616c:	e1b3      	b.n	80064d6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800616e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80c6 	beq.w	8006340 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	673b      	str	r3, [r7, #112]	@ 0x70
 80061c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d177      	bne.n	80062c0 <USB_EPStartXfer+0xb18>
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061f0:	4413      	add	r3, r2
 80061f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006204:	4413      	add	r3, r2
 8006206:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800620a:	667b      	str	r3, [r7, #100]	@ 0x64
 800620c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006216:	b29a      	uxth	r2, r3
 8006218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	2b3e      	cmp	r3, #62	@ 0x3e
 8006222:	d921      	bls.n	8006268 <USB_EPStartXfer+0xac0>
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <USB_EPStartXfer+0xa9c>
 800623a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800623e:	3b01      	subs	r3, #1
 8006240:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800624e:	b29b      	uxth	r3, r3
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	b29b      	uxth	r3, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006260:	b29a      	uxth	r2, r3
 8006262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	e050      	b.n	800630a <USB_EPStartXfer+0xb62>
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <USB_EPStartXfer+0xade>
 8006270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e041      	b.n	800630a <USB_EPStartXfer+0xb62>
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <USB_EPStartXfer+0xafe>
 800629c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062a0:	3301      	adds	r3, #1
 80062a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	029b      	lsls	r3, r3, #10
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4313      	orrs	r3, r2
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e024      	b.n	800630a <USB_EPStartXfer+0xb62>
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d11c      	bne.n	800630a <USB_EPStartXfer+0xb62>
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062de:	b29b      	uxth	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062e4:	4413      	add	r3, r2
 80062e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062f8:	4413      	add	r3, r2
 80062fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	b29a      	uxth	r2, r3
 8006306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006308:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	895b      	ldrh	r3, [r3, #10]
 8006316:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6959      	ldr	r1, [r3, #20]
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	b29b      	uxth	r3, r3
 800632c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006330:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006334:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006338:	6800      	ldr	r0, [r0, #0]
 800633a:	f000 ff10 	bl	800715e <USB_WritePMA>
 800633e:	e0ca      	b.n	80064d6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d177      	bne.n	8006440 <USB_EPStartXfer+0xc98>
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006370:	4413      	add	r3, r2
 8006372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	011a      	lsls	r2, r3, #4
 8006382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006384:	4413      	add	r3, r2
 8006386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800638a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800638c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006396:	b29a      	uxth	r2, r3
 8006398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063a2:	d921      	bls.n	80063e8 <USB_EPStartXfer+0xc40>
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <USB_EPStartXfer+0xc1c>
 80063ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80063be:	3b01      	subs	r3, #1
 80063c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80063c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	e05c      	b.n	80064a2 <USB_EPStartXfer+0xcfa>
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <USB_EPStartXfer+0xc5e>
 80063f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fe:	b29a      	uxth	r2, r3
 8006400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e04d      	b.n	80064a2 <USB_EPStartXfer+0xcfa>
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <USB_EPStartXfer+0xc7e>
 800641c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006420:	3301      	adds	r3, #1
 8006422:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006426:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006430:	b29b      	uxth	r3, r3
 8006432:	029b      	lsls	r3, r3, #10
 8006434:	b29b      	uxth	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b29a      	uxth	r2, r3
 800643a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e030      	b.n	80064a2 <USB_EPStartXfer+0xcfa>
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d128      	bne.n	80064a2 <USB_EPStartXfer+0xcfa>
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800648c:	4413      	add	r3, r2
 800648e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	891b      	ldrh	r3, [r3, #8]
 80064ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6959      	ldr	r1, [r3, #20]
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064d0:	6800      	ldr	r0, [r0, #0]
 80064d2:	f000 fe44 	bl	800715e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fc:	817b      	strh	r3, [r7, #10]
 80064fe:	897b      	ldrh	r3, [r7, #10]
 8006500:	f083 0310 	eor.w	r3, r3, #16
 8006504:	817b      	strh	r3, [r7, #10]
 8006506:	897b      	ldrh	r3, [r7, #10]
 8006508:	f083 0320 	eor.w	r3, r3, #32
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	897b      	ldrh	r3, [r7, #10]
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]
 800653e:	f000 bcde 	b.w	8006efe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	7b1b      	ldrb	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 80bb 	bne.w	80066ca <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d917      	bls.n	80065a0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	619a      	str	r2, [r3, #24]
 800659e:	e00e      	b.n	80065be <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065e2:	4413      	add	r3, r2
 80065e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	011a      	lsls	r2, r3, #4
 80065f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065fa:	4413      	add	r3, r2
 80065fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	2b3e      	cmp	r3, #62	@ 0x3e
 800661e:	d924      	bls.n	800666a <USB_EPStartXfer+0xec2>
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <USB_EPStartXfer+0xe98>
 8006636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800663a:	3b01      	subs	r3, #1
 800663c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800664c:	b29b      	uxth	r3, r3
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	b29b      	uxth	r3, r3
 8006652:	4313      	orrs	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665e:	b29a      	uxth	r2, r3
 8006660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	f000 bc10 	b.w	8006e8a <USB_EPStartXfer+0x16e2>
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <USB_EPStartXfer+0xee4>
 8006672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e3fe      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USB_EPStartXfer+0xf04>
 80066a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e3df      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	f040 8218 	bne.w	8006b0c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f040 809d 	bne.w	8006828 <USB_EPStartXfer+0x1080>
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006712:	4413      	add	r3, r2
 8006714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	011a      	lsls	r2, r3, #4
 8006726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800672a:	4413      	add	r3, r2
 800672c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006740:	b29a      	uxth	r2, r3
 8006742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b3e      	cmp	r3, #62	@ 0x3e
 8006756:	d92b      	bls.n	80067b0 <USB_EPStartXfer+0x1008>
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800676a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_EPStartXfer+0xfe0>
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	3b01      	subs	r3, #1
 8006784:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e070      	b.n	8006892 <USB_EPStartXfer+0x10ea>
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <USB_EPStartXfer+0x1032>
 80067c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e05b      	b.n	8006892 <USB_EPStartXfer+0x10ea>
 80067da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <USB_EPStartXfer+0x1062>
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006804:	3301      	adds	r3, #1
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800680a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e034      	b.n	8006892 <USB_EPStartXfer+0x10ea>
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d12c      	bne.n	8006892 <USB_EPStartXfer+0x10ea>
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006854:	b29b      	uxth	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800685c:	4413      	add	r3, r2
 800685e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	011a      	lsls	r2, r3, #4
 8006870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006874:	4413      	add	r3, r2
 8006876:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800687a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800687e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 809d 	bne.w	80069ec <USB_EPStartXfer+0x1244>
 80068b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068d6:	4413      	add	r3, r2
 80068d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	011a      	lsls	r2, r3, #4
 80068ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068ee:	4413      	add	r3, r2
 80068f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006904:	b29a      	uxth	r2, r3
 8006906:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b3e      	cmp	r3, #62	@ 0x3e
 800691a:	d92b      	bls.n	8006974 <USB_EPStartXfer+0x11cc>
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <USB_EPStartXfer+0x11a4>
 8006942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006946:	3b01      	subs	r3, #1
 8006948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800694c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29a      	uxth	r2, r3
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29b      	uxth	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b29b      	uxth	r3, r3
 8006962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696a:	b29a      	uxth	r2, r3
 800696c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e069      	b.n	8006a48 <USB_EPStartXfer+0x12a0>
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <USB_EPStartXfer+0x11f6>
 8006984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	e054      	b.n	8006a48 <USB_EPStartXfer+0x12a0>
 800699e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <USB_EPStartXfer+0x1226>
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c8:	3301      	adds	r3, #1
 80069ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069da:	b29b      	uxth	r3, r3
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e02d      	b.n	8006a48 <USB_EPStartXfer+0x12a0>
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d125      	bne.n	8006a48 <USB_EPStartXfer+0x12a0>
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a12:	4413      	add	r3, r2
 8006a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	011a      	lsls	r2, r3, #4
 8006a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8218 	beq.w	8006e8a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <USB_EPStartXfer+0x12ea>
 8006a86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10d      	bne.n	8006aae <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 81f5 	bne.w	8006e8a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aa0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 81ee 	bne.w	8006e8a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]
 8006b0a:	e1be      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	78db      	ldrb	r3, [r3, #3]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 81b4 	bne.w	8006e86 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d917      	bls.n	8006b6a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	619a      	str	r2, [r3, #24]
 8006b68:	e00e      	b.n	8006b88 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2200      	movs	r2, #0
 8006b86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 8085 	bne.w	8006ca4 <USB_EPStartXfer+0x14fc>
 8006b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bfa:	d923      	bls.n	8006c44 <USB_EPStartXfer+0x149c>
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <USB_EPStartXfer+0x1474>
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c16:	3b01      	subs	r3, #1
 8006c18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e060      	b.n	8006d06 <USB_EPStartXfer+0x155e>
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10c      	bne.n	8006c66 <USB_EPStartXfer+0x14be>
 8006c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e04f      	b.n	8006d06 <USB_EPStartXfer+0x155e>
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USB_EPStartXfer+0x14de>
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c80:	3301      	adds	r3, #1
 8006c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e030      	b.n	8006d06 <USB_EPStartXfer+0x155e>
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d128      	bne.n	8006d06 <USB_EPStartXfer+0x155e>
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cd8:	4413      	add	r3, r2
 8006cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	011a      	lsls	r2, r3, #4
 8006cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 8085 	bne.w	8006e30 <USB_EPStartXfer+0x1688>
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	011a      	lsls	r2, r3, #4
 8006d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d62:	4413      	add	r3, r2
 8006d64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d86:	d923      	bls.n	8006dd0 <USB_EPStartXfer+0x1628>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <USB_EPStartXfer+0x1600>
 8006d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006da2:	3b01      	subs	r3, #1
 8006da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e05c      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10c      	bne.n	8006df2 <USB_EPStartXfer+0x164a>
 8006dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	e04b      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	085b      	lsrs	r3, r3, #1
 8006df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <USB_EPStartXfer+0x166a>
 8006e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	e02c      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
 8006e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d124      	bne.n	8006e8a <USB_EPStartXfer+0x16e2>
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e56:	4413      	add	r3, r2
 8006e58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	011a      	lsls	r2, r3, #4
 8006e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	e001      	b.n	8006e8a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e03a      	b.n	8006f00 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006eb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006eb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ebc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ec0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ec4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d020      	beq.n	8006f5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f32:	81bb      	strh	r3, [r7, #12]
 8006f34:	89bb      	ldrh	r3, [r7, #12]
 8006f36:	f083 0310 	eor.w	r3, r3, #16
 8006f3a:	81bb      	strh	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	89bb      	ldrh	r3, [r7, #12]
 8006f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]
 8006f5c:	e01f      	b.n	8006f9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f74:	81fb      	strh	r3, [r7, #14]
 8006f76:	89fb      	ldrh	r3, [r7, #14]
 8006f78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f7c:	81fb      	strh	r3, [r7, #14]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	89fb      	ldrh	r3, [r7, #14]
 8006f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	7b1b      	ldrb	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 809d 	bne.w	80070f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d04c      	beq.n	8007060 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	823b      	strh	r3, [r7, #16]
 8006fd4:	8a3b      	ldrh	r3, [r7, #16]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01b      	beq.n	8007016 <USB_EPClearStall+0x6c>
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	81fb      	strh	r3, [r7, #14]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	441a      	add	r2, r3
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007012:	b29b      	uxth	r3, r3
 8007014:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d06c      	beq.n	80070f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007034:	81bb      	strh	r3, [r7, #12]
 8007036:	89bb      	ldrh	r3, [r7, #12]
 8007038:	f083 0320 	eor.w	r3, r3, #32
 800703c:	81bb      	strh	r3, [r7, #12]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	441a      	add	r2, r3
 8007048:	89bb      	ldrh	r3, [r7, #12]
 800704a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800704e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]
 800705e:	e04b      	b.n	80070f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	82fb      	strh	r3, [r7, #22]
 800706e:	8afb      	ldrh	r3, [r7, #22]
 8007070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01b      	beq.n	80070b0 <USB_EPClearStall+0x106>
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	82bb      	strh	r3, [r7, #20]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	8abb      	ldrh	r3, [r7, #20]
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c6:	827b      	strh	r3, [r7, #18]
 80070c8:	8a7b      	ldrh	r3, [r7, #18]
 80070ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070ce:	827b      	strh	r3, [r7, #18]
 80070d0:	8a7b      	ldrh	r3, [r7, #18]
 80070d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070d6:	827b      	strh	r3, [r7, #18]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	8a7b      	ldrh	r3, [r7, #18]
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2280      	movs	r2, #128	@ 0x80
 800711a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007138:	b29b      	uxth	r3, r3
 800713a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800713c:	68fb      	ldr	r3, [r7, #12]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr

08007148 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800715e:	b480      	push	{r7}
 8007160:	b08b      	sub	sp, #44	@ 0x2c
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	4611      	mov	r1, r2
 800716a:	461a      	mov	r2, r3
 800716c:	460b      	mov	r3, r1
 800716e:	80fb      	strh	r3, [r7, #6]
 8007170:	4613      	mov	r3, r2
 8007172:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007174:	88bb      	ldrh	r3, [r7, #4]
 8007176:	3301      	adds	r3, #1
 8007178:	085b      	lsrs	r3, r3, #1
 800717a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	005a      	lsls	r2, r3, #1
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007190:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
 8007196:	e01e      	b.n	80071d6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3301      	adds	r3, #1
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	b21a      	sxth	r2, r3
 80071a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	8a7a      	ldrh	r2, [r7, #18]
 80071b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	3302      	adds	r3, #2
 80071bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	3302      	adds	r3, #2
 80071c2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	3b01      	subs	r3, #1
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1dd      	bne.n	8007198 <USB_WritePMA+0x3a>
  }
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	372c      	adds	r7, #44	@ 0x2c
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b08b      	sub	sp, #44	@ 0x2c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4611      	mov	r1, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	460b      	mov	r3, r1
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071fe:	88bb      	ldrh	r3, [r7, #4]
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	005a      	lsls	r2, r3, #1
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800721a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007220:	e01b      	b.n	800725a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	3302      	adds	r3, #2
 800722e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	b2da      	uxtb	r2, r3
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3301      	adds	r3, #1
 800723c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b2da      	uxtb	r2, r3
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3301      	adds	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	3302      	adds	r3, #2
 8007252:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	3b01      	subs	r3, #1
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e0      	bne.n	8007222 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007260:	88bb      	ldrh	r3, [r7, #4]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	701a      	strb	r2, [r3, #0]
  }
}
 800727c:	bf00      	nop
 800727e:	372c      	adds	r7, #44	@ 0x2c
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072a6:	2302      	movs	r3, #2
 80072a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00c      	beq.n	80072ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	78fa      	ldrb	r2, [r7, #3]
 80072be:	4611      	mov	r1, r2
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4611      	mov	r1, r2
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fed8 	bl	80080c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2b02      	cmp	r3, #2
 8007338:	d016      	beq.n	8007368 <USBD_LL_SetupStage+0x6a>
 800733a:	2b02      	cmp	r3, #2
 800733c:	d81c      	bhi.n	8007378 <USBD_LL_SetupStage+0x7a>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <USBD_LL_SetupStage+0x4a>
 8007342:	2b01      	cmp	r3, #1
 8007344:	d008      	beq.n	8007358 <USBD_LL_SetupStage+0x5a>
 8007346:	e017      	b.n	8007378 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9cb 	bl	80076ec <USBD_StdDevReq>
      break;
 8007356:	e01a      	b.n	800738e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa2d 	bl	80077c0 <USBD_StdItfReq>
      break;
 8007366:	e012      	b.n	800738e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa6d 	bl	8007850 <USBD_StdEPReq>
      break;
 8007376:	e00a      	b.n	800738e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800737e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 f80e 	bl	80083a8 <USBD_LL_StallEP>
      break;
 800738c:	bf00      	nop
  }

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	460b      	mov	r3, r1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d14b      	bne.n	8007444 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d134      	bne.n	8007428 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d919      	bls.n	80073fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d203      	bcs.n	80073ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	e002      	b.n	80073f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fedd 	bl	80081b6 <USBD_CtlContinueRx>
 80073fc:	e038      	b.n	8007470 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007410:	2b03      	cmp	r3, #3
 8007412:	d105      	bne.n	8007420 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 feda 	bl	80081da <USBD_CtlSendStatus>
 8007426:	e023      	b.n	8007470 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800742e:	2b05      	cmp	r3, #5
 8007430:	d11e      	bne.n	8007470 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800743a:	2100      	movs	r1, #0
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 ffb3 	bl	80083a8 <USBD_LL_StallEP>
 8007442:	e015      	b.n	8007470 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00d      	beq.n	800746c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007456:	2b03      	cmp	r3, #3
 8007458:	d108      	bne.n	800746c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	7afa      	ldrb	r2, [r7, #11]
 8007464:	4611      	mov	r1, r2
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	4798      	blx	r3
 800746a:	e001      	b.n	8007470 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800746c:	2302      	movs	r3, #2
 800746e:	e000      	b.n	8007472 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	460b      	mov	r3, r1
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d17f      	bne.n	800758e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3314      	adds	r3, #20
 8007492:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800749a:	2b02      	cmp	r3, #2
 800749c:	d15c      	bne.n	8007558 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d915      	bls.n	80074d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fe65 	bl	8008192 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c8:	2300      	movs	r3, #0
 80074ca:	2200      	movs	r2, #0
 80074cc:	2100      	movs	r1, #0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f001 f815 	bl	80084fe <USBD_LL_PrepareReceive>
 80074d4:	e04e      	b.n	8007574 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6912      	ldr	r2, [r2, #16]
 80074de:	fbb3 f1f2 	udiv	r1, r3, r2
 80074e2:	fb01 f202 	mul.w	r2, r1, r2
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d11c      	bne.n	8007526 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d316      	bcc.n	8007526 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007502:	429a      	cmp	r2, r3
 8007504:	d20f      	bcs.n	8007526 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fe41 	bl	8008192 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007518:	2300      	movs	r3, #0
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 ffed 	bl	80084fe <USBD_LL_PrepareReceive>
 8007524:	e026      	b.n	8007574 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007538:	2b03      	cmp	r3, #3
 800753a:	d105      	bne.n	8007548 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007548:	2180      	movs	r1, #128	@ 0x80
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 ff2c 	bl	80083a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fe55 	bl	8008200 <USBD_CtlReceiveStatus>
 8007556:	e00d      	b.n	8007574 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800755e:	2b04      	cmp	r3, #4
 8007560:	d004      	beq.n	800756c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800756c:	2180      	movs	r1, #128	@ 0x80
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 ff1a 	bl	80083a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d11d      	bne.n	80075ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fe81 	bl	8007286 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800758c:	e015      	b.n	80075ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00d      	beq.n	80075b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d108      	bne.n	80075b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	7afa      	ldrb	r2, [r7, #11]
 80075ae:	4611      	mov	r1, r2
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	4798      	blx	r3
 80075b4:	e001      	b.n	80075ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075b6:	2302      	movs	r3, #2
 80075b8:	e000      	b.n	80075bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075cc:	2340      	movs	r3, #64	@ 0x40
 80075ce:	2200      	movs	r2, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fec2 	bl	800835c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2240      	movs	r2, #64	@ 0x40
 80075e4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e8:	2340      	movs	r3, #64	@ 0x40
 80075ea:	2200      	movs	r2, #0
 80075ec:	2180      	movs	r1, #128	@ 0x80
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 feb4 	bl	800835c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2240      	movs	r2, #64	@ 0x40
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6852      	ldr	r2, [r2, #4]
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	4611      	mov	r1, r2
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800769a:	2b04      	cmp	r3, #4
 800769c:	d105      	bne.n	80076aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d10b      	bne.n	80076e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d005      	beq.n	8007712 <USBD_StdDevReq+0x26>
 8007706:	2b40      	cmp	r3, #64	@ 0x40
 8007708:	d84f      	bhi.n	80077aa <USBD_StdDevReq+0xbe>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <USBD_StdDevReq+0x36>
 800770e:	2b20      	cmp	r3, #32
 8007710:	d14b      	bne.n	80077aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
      break;
 8007720:	e048      	b.n	80077b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	2b09      	cmp	r3, #9
 8007728:	d839      	bhi.n	800779e <USBD_StdDevReq+0xb2>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <USBD_StdDevReq+0x44>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007781 	.word	0x08007781
 8007734:	08007795 	.word	0x08007795
 8007738:	0800779f 	.word	0x0800779f
 800773c:	0800778b 	.word	0x0800778b
 8007740:	0800779f 	.word	0x0800779f
 8007744:	08007763 	.word	0x08007763
 8007748:	08007759 	.word	0x08007759
 800774c:	0800779f 	.word	0x0800779f
 8007750:	08007777 	.word	0x08007777
 8007754:	0800776d 	.word	0x0800776d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f9dc 	bl	8007b18 <USBD_GetDescriptor>
          break;
 8007760:	e022      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fb3f 	bl	8007de8 <USBD_SetAddress>
          break;
 800776a:	e01d      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb7e 	bl	8007e70 <USBD_SetConfig>
          break;
 8007774:	e018      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc07 	bl	8007f8c <USBD_GetConfig>
          break;
 800777e:	e013      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fc37 	bl	8007ff6 <USBD_GetStatus>
          break;
 8007788:	e00e      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fc65 	bl	800805c <USBD_SetFeature>
          break;
 8007792:	e009      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc74 	bl	8008084 <USBD_ClrFeature>
          break;
 800779c:	e004      	b.n	80077a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fcc9 	bl	8008138 <USBD_CtlError>
          break;
 80077a6:	bf00      	nop
      }
      break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fcc3 	bl	8008138 <USBD_CtlError>
      break;
 80077b2:	bf00      	nop
  }

  return ret;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop

080077c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077d6:	2b40      	cmp	r3, #64	@ 0x40
 80077d8:	d005      	beq.n	80077e6 <USBD_StdItfReq+0x26>
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d82e      	bhi.n	800783c <USBD_StdItfReq+0x7c>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <USBD_StdItfReq+0x26>
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d12a      	bne.n	800783c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ec:	3b01      	subs	r3, #1
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d81d      	bhi.n	800782e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d813      	bhi.n	8007824 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	88db      	ldrh	r3, [r3, #6]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d110      	bne.n	8007838 <USBD_StdItfReq+0x78>
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fcdc 	bl	80081da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007822:	e009      	b.n	8007838 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fc86 	bl	8008138 <USBD_CtlError>
          break;
 800782c:	e004      	b.n	8007838 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc81 	bl	8008138 <USBD_CtlError>
          break;
 8007836:	e000      	b.n	800783a <USBD_StdItfReq+0x7a>
          break;
 8007838:	bf00      	nop
      }
      break;
 800783a:	e004      	b.n	8007846 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc7a 	bl	8008138 <USBD_CtlError>
      break;
 8007844:	bf00      	nop
  }

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	889b      	ldrh	r3, [r3, #4]
 8007862:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	d007      	beq.n	8007880 <USBD_StdEPReq+0x30>
 8007870:	2b40      	cmp	r3, #64	@ 0x40
 8007872:	f200 8146 	bhi.w	8007b02 <USBD_StdEPReq+0x2b2>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <USBD_StdEPReq+0x40>
 800787a:	2b20      	cmp	r3, #32
 800787c:	f040 8141 	bne.w	8007b02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
      break;
 800788e:	e13d      	b.n	8007b0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007898:	2b20      	cmp	r3, #32
 800789a:	d10a      	bne.n	80078b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	e12d      	b.n	8007b0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d007      	beq.n	80078ca <USBD_StdEPReq+0x7a>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f300 811b 	bgt.w	8007af6 <USBD_StdEPReq+0x2a6>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d072      	beq.n	80079aa <USBD_StdEPReq+0x15a>
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d03a      	beq.n	800793e <USBD_StdEPReq+0xee>
 80078c8:	e115      	b.n	8007af6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d002      	beq.n	80078da <USBD_StdEPReq+0x8a>
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d015      	beq.n	8007904 <USBD_StdEPReq+0xb4>
 80078d8:	e02b      	b.n	8007932 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <USBD_StdEPReq+0xaa>
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b80      	cmp	r3, #128	@ 0x80
 80078e4:	d009      	beq.n	80078fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fd5c 	bl	80083a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078f0:	2180      	movs	r1, #128	@ 0x80
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fd58 	bl	80083a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f8:	e020      	b.n	800793c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc1b 	bl	8008138 <USBD_CtlError>
              break;
 8007902:	e01b      	b.n	800793c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	885b      	ldrh	r3, [r3, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10e      	bne.n	800792a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <USBD_StdEPReq+0xda>
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b80      	cmp	r3, #128	@ 0x80
 8007916:	d008      	beq.n	800792a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	88db      	ldrh	r3, [r3, #6]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fd3f 	bl	80083a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fc55 	bl	80081da <USBD_CtlSendStatus>

              break;
 8007930:	e004      	b.n	800793c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fbff 	bl	8008138 <USBD_CtlError>
              break;
 800793a:	bf00      	nop
          }
          break;
 800793c:	e0e0      	b.n	8007b00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007944:	2b02      	cmp	r3, #2
 8007946:	d002      	beq.n	800794e <USBD_StdEPReq+0xfe>
 8007948:	2b03      	cmp	r3, #3
 800794a:	d015      	beq.n	8007978 <USBD_StdEPReq+0x128>
 800794c:	e026      	b.n	800799c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00c      	beq.n	800796e <USBD_StdEPReq+0x11e>
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d009      	beq.n	800796e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fd22 	bl	80083a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007964:	2180      	movs	r1, #128	@ 0x80
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fd1e 	bl	80083a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800796c:	e01c      	b.n	80079a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fbe1 	bl	8008138 <USBD_CtlError>
              break;
 8007976:	e017      	b.n	80079a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	885b      	ldrh	r3, [r3, #2]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fd29 	bl	80083e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc20 	bl	80081da <USBD_CtlSendStatus>
              }
              break;
 800799a:	e004      	b.n	80079a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fbca 	bl	8008138 <USBD_CtlError>
              break;
 80079a4:	e000      	b.n	80079a8 <USBD_StdEPReq+0x158>
              break;
 80079a6:	bf00      	nop
          }
          break;
 80079a8:	e0aa      	b.n	8007b00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d002      	beq.n	80079ba <USBD_StdEPReq+0x16a>
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d032      	beq.n	8007a1e <USBD_StdEPReq+0x1ce>
 80079b8:	e097      	b.n	8007aea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <USBD_StdEPReq+0x180>
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b80      	cmp	r3, #128	@ 0x80
 80079c4:	d004      	beq.n	80079d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fbb5 	bl	8008138 <USBD_CtlError>
                break;
 80079ce:	e091      	b.n	8007af4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da0b      	bge.n	80079f0 <USBD_StdEPReq+0x1a0>
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	3310      	adds	r3, #16
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	4413      	add	r3, r2
 80079ec:	3304      	adds	r3, #4
 80079ee:	e00b      	b.n	8007a08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	3304      	adds	r3, #4
 8007a08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2202      	movs	r2, #2
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb9f 	bl	800815a <USBD_CtlSendData>
              break;
 8007a1c:	e06a      	b.n	8007af4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da11      	bge.n	8007a4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3318      	adds	r3, #24
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d117      	bne.n	8007a70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fb78 	bl	8008138 <USBD_CtlError>
                  break;
 8007a48:	e054      	b.n	8007af4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb65 	bl	8008138 <USBD_CtlError>
                  break;
 8007a6e:	e041      	b.n	8007af4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da0b      	bge.n	8007a90 <USBD_StdEPReq+0x240>
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	3310      	adds	r3, #16
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	e00b      	b.n	8007aa8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <USBD_StdEPReq+0x266>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d103      	bne.n	8007abe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e00e      	b.n	8007adc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fcae 	bl	8008424 <USBD_LL_IsStallEP>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e002      	b.n	8007adc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb39 	bl	800815a <USBD_CtlSendData>
              break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb23 	bl	8008138 <USBD_CtlError>
              break;
 8007af2:	bf00      	nop
          }
          break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb1d 	bl	8008138 <USBD_CtlError>
          break;
 8007afe:	bf00      	nop
      }
      break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb17 	bl	8008138 <USBD_CtlError>
      break;
 8007b0a:	bf00      	nop
  }

  return ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	f200 8128 	bhi.w	8007d8e <USBD_GetDescriptor+0x276>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <USBD_GetDescriptor+0x2c>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b79 	.word	0x08007b79
 8007b4c:	08007bb9 	.word	0x08007bb9
 8007b50:	08007d8f 	.word	0x08007d8f
 8007b54:	08007d8f 	.word	0x08007d8f
 8007b58:	08007d2f 	.word	0x08007d2f
 8007b5c:	08007d5b 	.word	0x08007d5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7c12      	ldrb	r2, [r2, #16]
 8007b6c:	f107 0108 	add.w	r1, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
      break;
 8007b76:	e112      	b.n	8007d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7c1b      	ldrb	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10d      	bne.n	8007b9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	2202      	movs	r2, #2
 8007b98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b9a:	e100      	b.n	8007d9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	f107 0208 	add.w	r2, r7, #8
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	701a      	strb	r2, [r3, #0]
      break;
 8007bb6:	e0f2      	b.n	8007d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	885b      	ldrh	r3, [r3, #2]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	f200 80ac 	bhi.w	8007d1c <USBD_GetDescriptor+0x204>
 8007bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <USBD_GetDescriptor+0xb4>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c81 	.word	0x08007c81
 8007bdc:	08007cb5 	.word	0x08007cb5
 8007be0:	08007ce9 	.word	0x08007ce9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c06:	e091      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa94 	bl	8008138 <USBD_CtlError>
            err++;
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	3301      	adds	r3, #1
 8007c14:	72fb      	strb	r3, [r7, #11]
          break;
 8007c16:	e089      	b.n	8007d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3a:	e077      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa7a 	bl	8008138 <USBD_CtlError>
            err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4a:	e06f      	b.n	8007d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e05d      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa60 	bl	8008138 <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e055      	b.n	8007d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e043      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa46 	bl	8008138 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e03b      	b.n	8007d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e029      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa2c 	bl	8008138 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e021      	b.n	8007d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e00f      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa12 	bl	8008138 <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e007      	b.n	8007d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa0a 	bl	8008138 <USBD_CtlError>
          err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d2a:	e038      	b.n	8007d9e <USBD_GetDescriptor+0x286>
 8007d2c:	e037      	b.n	8007d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7c1b      	ldrb	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3e:	f107 0208 	add.w	r2, r7, #8
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d48:	e029      	b.n	8007d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f9f3 	bl	8008138 <USBD_CtlError>
        err++;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	3301      	adds	r3, #1
 8007d56:	72fb      	strb	r3, [r7, #11]
      break;
 8007d58:	e021      	b.n	8007d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7c1b      	ldrb	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10d      	bne.n	8007d7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6a:	f107 0208 	add.w	r2, r7, #8
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4798      	blx	r3
 8007d72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	2207      	movs	r2, #7
 8007d7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d7c:	e00f      	b.n	8007d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f9d9 	bl	8008138 <USBD_CtlError>
        err++;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d8c:	e007      	b.n	8007d9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f9d1 	bl	8008138 <USBD_CtlError>
      err++;
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9c:	bf00      	nop
  }

  if (err != 0U)
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d11c      	bne.n	8007dde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007da4:	893b      	ldrh	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d011      	beq.n	8007dce <USBD_GetDescriptor+0x2b6>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88da      	ldrh	r2, [r3, #6]
 8007db6:	893b      	ldrh	r3, [r7, #8]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bf28      	it	cs
 8007dbc:	4613      	movcs	r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f9c6 	bl	800815a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f9ff 	bl	80081da <USBD_CtlSendStatus>
 8007ddc:	e000      	b.n	8007de0 <USBD_GetDescriptor+0x2c8>
    return;
 8007dde:	bf00      	nop
    }
  }
}
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop

08007de8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	889b      	ldrh	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d130      	bne.n	8007e5c <USBD_SetAddress+0x74>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d12c      	bne.n	8007e5c <USBD_SetAddress+0x74>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e08:	d828      	bhi.n	8007e5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	885b      	ldrh	r3, [r3, #2]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d104      	bne.n	8007e2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f988 	bl	8008138 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	e01d      	b.n	8007e66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb1f 	bl	800847a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f9cc 	bl	80081da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e50:	e009      	b.n	8007e66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5a:	e004      	b.n	8007e66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f96a 	bl	8008138 <USBD_CtlError>
  }
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	885b      	ldrh	r3, [r3, #2]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	4b41      	ldr	r3, [pc, #260]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e84:	4b40      	ldr	r3, [pc, #256]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d904      	bls.n	8007e96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f952 	bl	8008138 <USBD_CtlError>
 8007e94:	e075      	b.n	8007f82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d002      	beq.n	8007ea6 <USBD_SetConfig+0x36>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d023      	beq.n	8007eec <USBD_SetConfig+0x7c>
 8007ea4:	e062      	b.n	8007f6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ea6:	4b38      	ldr	r3, [pc, #224]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01a      	beq.n	8007ee4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007eae:	4b36      	ldr	r3, [pc, #216]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2203      	movs	r2, #3
 8007ebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ec0:	4b31      	ldr	r3, [pc, #196]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff f9e7 	bl	800729a <USBD_SetClassConfig>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d104      	bne.n	8007edc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f92f 	bl	8008138 <USBD_CtlError>
            return;
 8007eda:	e052      	b.n	8007f82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f97c 	bl	80081da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ee2:	e04e      	b.n	8007f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f978 	bl	80081da <USBD_CtlSendStatus>
        break;
 8007eea:	e04a      	b.n	8007f82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007eec:	4b26      	ldr	r3, [pc, #152]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d112      	bne.n	8007f1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007efc:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f06:	4b20      	ldr	r3, [pc, #128]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff f9e3 	bl	80072d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f961 	bl	80081da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f18:	e033      	b.n	8007f82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d01d      	beq.n	8007f64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff f9d1 	bl	80072d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f36:	4b14      	ldr	r3, [pc, #80]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f40:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff f9a7 	bl	800729a <USBD_SetClassConfig>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d104      	bne.n	8007f5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f8ef 	bl	8008138 <USBD_CtlError>
            return;
 8007f5a:	e012      	b.n	8007f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f93c 	bl	80081da <USBD_CtlSendStatus>
        break;
 8007f62:	e00e      	b.n	8007f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f938 	bl	80081da <USBD_CtlSendStatus>
        break;
 8007f6a:	e00a      	b.n	8007f82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f8e2 	bl	8008138 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f74:	4b04      	ldr	r3, [pc, #16]	@ (8007f88 <USBD_SetConfig+0x118>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff f9ac 	bl	80072d8 <USBD_ClrClassConfig>
        break;
 8007f80:	bf00      	nop
    }
  }
}
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000260 	.word	0x20000260

08007f8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88db      	ldrh	r3, [r3, #6]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d004      	beq.n	8007fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8c9 	bl	8008138 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fa6:	e022      	b.n	8007fee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	dc02      	bgt.n	8007fb8 <USBD_GetConfig+0x2c>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc03      	bgt.n	8007fbe <USBD_GetConfig+0x32>
 8007fb6:	e015      	b.n	8007fe4 <USBD_GetConfig+0x58>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d00b      	beq.n	8007fd4 <USBD_GetConfig+0x48>
 8007fbc:	e012      	b.n	8007fe4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8c4 	bl	800815a <USBD_CtlSendData>
        break;
 8007fd2:	e00c      	b.n	8007fee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	2201      	movs	r2, #1
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8bc 	bl	800815a <USBD_CtlSendData>
        break;
 8007fe2:	e004      	b.n	8007fee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8a6 	bl	8008138 <USBD_CtlError>
        break;
 8007fec:	bf00      	nop
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008006:	3b01      	subs	r3, #1
 8008008:	2b02      	cmp	r3, #2
 800800a:	d81e      	bhi.n	800804a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d004      	beq.n	800801e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f88e 	bl	8008138 <USBD_CtlError>
        break;
 800801c:	e01a      	b.n	8008054 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f043 0202 	orr.w	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	330c      	adds	r3, #12
 800803e:	2202      	movs	r2, #2
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f889 	bl	800815a <USBD_CtlSendData>
      break;
 8008048:	e004      	b.n	8008054 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f873 	bl	8008138 <USBD_CtlError>
      break;
 8008052:	bf00      	nop
  }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d106      	bne.n	800807c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8af 	bl	80081da <USBD_CtlSendStatus>
  }
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008094:	3b01      	subs	r3, #1
 8008096:	2b02      	cmp	r3, #2
 8008098:	d80b      	bhi.n	80080b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d10c      	bne.n	80080bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f895 	bl	80081da <USBD_CtlSendStatus>
      }
      break;
 80080b0:	e004      	b.n	80080bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f83f 	bl	8008138 <USBD_CtlError>
      break;
 80080ba:	e000      	b.n	80080be <USBD_ClrFeature+0x3a>
      break;
 80080bc:	bf00      	nop
  }
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	785a      	ldrb	r2, [r3, #1]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	3302      	adds	r3, #2
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	3303      	adds	r3, #3
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	4413      	add	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	3305      	adds	r3, #5
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	b29b      	uxth	r3, r3
 800810c:	4413      	add	r3, r2
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	3306      	adds	r3, #6
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	3307      	adds	r3, #7
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	b29b      	uxth	r3, r3
 8008126:	4413      	add	r3, r2
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	80da      	strh	r2, [r3, #6]

}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008142:	2180      	movs	r1, #128	@ 0x80
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f92f 	bl	80083a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800814a:	2100      	movs	r1, #0
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f92b 	bl	80083a8 <USBD_LL_StallEP>
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2202      	movs	r2, #2
 800816c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	2100      	movs	r1, #0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f998 	bl	80084b8 <USBD_LL_Transmit>

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f986 	bl	80084b8 <USBD_LL_Transmit>

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	4613      	mov	r3, r2
 80081c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	2100      	movs	r1, #0
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f997 	bl	80084fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f961 	bl	80084b8 <USBD_LL_Transmit>

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2205      	movs	r2, #5
 800820c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008210:	2300      	movs	r3, #0
 8008212:	2200      	movs	r2, #0
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f971 	bl	80084fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7ff f85e 	bl	80072fe <USBD_LL_SetupStage>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	440b      	add	r3, r1
 800826a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	4619      	mov	r1, r3
 8008274:	f7ff f890 	bl	8007398 <USBD_LL_DataOutStage>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	440b      	add	r3, r1
 80082a0:	3324      	adds	r3, #36	@ 0x24
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	4619      	mov	r1, r3
 80082a8:	f7ff f8e7 	bl	800747a <USBD_LL_DataInStage>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd) // usb는 통신할때 항상 1ms 단위로 callback이 호출된다.
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f9f7 	bl	80076b6 <USBD_LL_SOF>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	799b      	ldrb	r3, [r3, #6]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d001      	beq.n	80082e8 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082e4:	f7f8 f804 	bl	80002f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ee:	7bfa      	ldrb	r2, [r7, #15]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f9a7 	bl	8007646 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff f960 	bl	80075c4 <USBD_LL_Reset>
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff f9a2 	bl	8007664 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7a9b      	ldrb	r3, [r3, #10]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008328:	4b04      	ldr	r3, [pc, #16]	@ (800833c <HAL_PCD_SuspendCallback+0x30>)
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	4a03      	ldr	r2, [pc, #12]	@ (800833c <HAL_PCD_SuspendCallback+0x30>)
 800832e:	f043 0306 	orr.w	r3, r3, #6
 8008332:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff f99c 	bl	800768c <USBD_LL_Resume>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	4603      	mov	r3, r0
 800836c:	70fb      	strb	r3, [r7, #3]
 800836e:	460b      	mov	r3, r1
 8008370:	70bb      	strb	r3, [r7, #2]
 8008372:	4613      	mov	r3, r2
 8008374:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008384:	78bb      	ldrb	r3, [r7, #2]
 8008386:	883a      	ldrh	r2, [r7, #0]
 8008388:	78f9      	ldrb	r1, [r7, #3]
 800838a:	f7f9 fcb4 	bl	8001cf6 <HAL_PCD_EP_Open>
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f8d5 	bl	8008544 <USBD_Get_USB_Status>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839e:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 fd5a 	bl	8001e80 <HAL_PCD_EP_SetStall>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f8b6 	bl	8008544 <USBD_Get_USB_Status>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	4611      	mov	r1, r2
 8008404:	4618      	mov	r0, r3
 8008406:	f7f9 fd9b 	bl	8001f40 <HAL_PCD_EP_ClrStall>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f897 	bl	8008544 <USBD_Get_USB_Status>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800841a:	7bbb      	ldrb	r3, [r7, #14]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	da0b      	bge.n	8008458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	440b      	add	r3, r1
 8008452:	3312      	adds	r3, #18
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	e00b      	b.n	8008470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	440b      	add	r3, r1
 800846a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800846e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr

0800847a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7f9 fc08 	bl	8001cae <HAL_PCD_SetAddress>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 f84d 	bl	8008544 <USBD_Get_USB_Status>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	460b      	mov	r3, r1
 80084c6:	72fb      	strb	r3, [r7, #11]
 80084c8:	4613      	mov	r3, r2
 80084ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084da:	893b      	ldrh	r3, [r7, #8]
 80084dc:	7af9      	ldrb	r1, [r7, #11]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f7f9 fc97 	bl	8001e12 <HAL_PCD_EP_Transmit>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f82a 	bl	8008544 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	461a      	mov	r2, r3
 800850a:	460b      	mov	r3, r1
 800850c:	72fb      	strb	r3, [r7, #11]
 800850e:	4613      	mov	r3, r2
 8008510:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008520:	893b      	ldrh	r3, [r7, #8]
 8008522:	7af9      	ldrb	r1, [r7, #11]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	f7f9 fc43 	bl	8001db0 <HAL_PCD_EP_Receive>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f807 	bl	8008544 <USBD_Get_USB_Status>
 8008536:	4603      	mov	r3, r0
 8008538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800853a:	7dbb      	ldrb	r3, [r7, #22]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	2b03      	cmp	r3, #3
 8008556:	d817      	bhi.n	8008588 <USBD_Get_USB_Status+0x44>
 8008558:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <USBD_Get_USB_Status+0x1c>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008571 	.word	0x08008571
 8008564:	08008577 	.word	0x08008577
 8008568:	0800857d 	.word	0x0800857d
 800856c:	08008583 	.word	0x08008583
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e00b      	b.n	800858e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	e008      	b.n	800858e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
    break;
 8008580:	e005      	b.n	800858e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008582:	2302      	movs	r3, #2
 8008584:	73fb      	strb	r3, [r7, #15]
    break;
 8008586:	e002      	b.n	800858e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008588:	2302      	movs	r3, #2
 800858a:	73fb      	strb	r3, [r7, #15]
    break;
 800858c:	bf00      	nop
  }
  return usb_status;
 800858e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop

0800859c <main>:




int main(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  hwInit();
 80085a0:	f7f8 fb12 	bl	8000bc8 <hwInit>
  apInit();
 80085a4:	f7f7 fdd2 	bl	800014c <apInit>

  apMain();
 80085a8:	f7f7 fdde 	bl	8000168 <apMain>

  return 0;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <std>:
 80085b4:	2300      	movs	r3, #0
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	e9c0 3300 	strd	r3, r3, [r0]
 80085be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085c2:	6083      	str	r3, [r0, #8]
 80085c4:	8181      	strh	r1, [r0, #12]
 80085c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80085c8:	81c2      	strh	r2, [r0, #14]
 80085ca:	6183      	str	r3, [r0, #24]
 80085cc:	4619      	mov	r1, r3
 80085ce:	2208      	movs	r2, #8
 80085d0:	305c      	adds	r0, #92	@ 0x5c
 80085d2:	f000 f906 	bl	80087e2 <memset>
 80085d6:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <std+0x58>)
 80085d8:	6224      	str	r4, [r4, #32]
 80085da:	6263      	str	r3, [r4, #36]	@ 0x24
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <std+0x5c>)
 80085de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <std+0x60>)
 80085e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <std+0x64>)
 80085e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80085e8:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <std+0x68>)
 80085ea:	429c      	cmp	r4, r3
 80085ec:	d006      	beq.n	80085fc <std+0x48>
 80085ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085f2:	4294      	cmp	r4, r2
 80085f4:	d002      	beq.n	80085fc <std+0x48>
 80085f6:	33d0      	adds	r3, #208	@ 0xd0
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d105      	bne.n	8008608 <std+0x54>
 80085fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008604:	f000 b966 	b.w	80088d4 <__retarget_lock_init_recursive>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	bf00      	nop
 800860c:	0800875d 	.word	0x0800875d
 8008610:	0800877f 	.word	0x0800877f
 8008614:	080087b7 	.word	0x080087b7
 8008618:	080087db 	.word	0x080087db
 800861c:	2000053c 	.word	0x2000053c

08008620 <stdio_exit_handler>:
 8008620:	4a02      	ldr	r2, [pc, #8]	@ (800862c <stdio_exit_handler+0xc>)
 8008622:	4903      	ldr	r1, [pc, #12]	@ (8008630 <stdio_exit_handler+0x10>)
 8008624:	4803      	ldr	r0, [pc, #12]	@ (8008634 <stdio_exit_handler+0x14>)
 8008626:	f000 b869 	b.w	80086fc <_fwalk_sglue>
 800862a:	bf00      	nop
 800862c:	20000014 	.word	0x20000014
 8008630:	0800916d 	.word	0x0800916d
 8008634:	20000024 	.word	0x20000024

08008638 <cleanup_stdio>:
 8008638:	6841      	ldr	r1, [r0, #4]
 800863a:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <cleanup_stdio+0x34>)
 800863c:	b510      	push	{r4, lr}
 800863e:	4299      	cmp	r1, r3
 8008640:	4604      	mov	r4, r0
 8008642:	d001      	beq.n	8008648 <cleanup_stdio+0x10>
 8008644:	f000 fd92 	bl	800916c <_fflush_r>
 8008648:	68a1      	ldr	r1, [r4, #8]
 800864a:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <cleanup_stdio+0x38>)
 800864c:	4299      	cmp	r1, r3
 800864e:	d002      	beq.n	8008656 <cleanup_stdio+0x1e>
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fd8b 	bl	800916c <_fflush_r>
 8008656:	68e1      	ldr	r1, [r4, #12]
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <cleanup_stdio+0x3c>)
 800865a:	4299      	cmp	r1, r3
 800865c:	d004      	beq.n	8008668 <cleanup_stdio+0x30>
 800865e:	4620      	mov	r0, r4
 8008660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008664:	f000 bd82 	b.w	800916c <_fflush_r>
 8008668:	bd10      	pop	{r4, pc}
 800866a:	bf00      	nop
 800866c:	2000053c 	.word	0x2000053c
 8008670:	200005a4 	.word	0x200005a4
 8008674:	2000060c 	.word	0x2000060c

08008678 <global_stdio_init.part.0>:
 8008678:	b510      	push	{r4, lr}
 800867a:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <global_stdio_init.part.0+0x30>)
 800867c:	4c0b      	ldr	r4, [pc, #44]	@ (80086ac <global_stdio_init.part.0+0x34>)
 800867e:	4a0c      	ldr	r2, [pc, #48]	@ (80086b0 <global_stdio_init.part.0+0x38>)
 8008680:	4620      	mov	r0, r4
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	2104      	movs	r1, #4
 8008686:	2200      	movs	r2, #0
 8008688:	f7ff ff94 	bl	80085b4 <std>
 800868c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008690:	2201      	movs	r2, #1
 8008692:	2109      	movs	r1, #9
 8008694:	f7ff ff8e 	bl	80085b4 <std>
 8008698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800869c:	2202      	movs	r2, #2
 800869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a2:	2112      	movs	r1, #18
 80086a4:	f7ff bf86 	b.w	80085b4 <std>
 80086a8:	20000674 	.word	0x20000674
 80086ac:	2000053c 	.word	0x2000053c
 80086b0:	08008621 	.word	0x08008621

080086b4 <__sfp_lock_acquire>:
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <__sfp_lock_acquire+0x8>)
 80086b6:	f000 b90e 	b.w	80088d6 <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	2000067d 	.word	0x2000067d

080086c0 <__sfp_lock_release>:
 80086c0:	4801      	ldr	r0, [pc, #4]	@ (80086c8 <__sfp_lock_release+0x8>)
 80086c2:	f000 b909 	b.w	80088d8 <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	2000067d 	.word	0x2000067d

080086cc <__sinit>:
 80086cc:	b510      	push	{r4, lr}
 80086ce:	4604      	mov	r4, r0
 80086d0:	f7ff fff0 	bl	80086b4 <__sfp_lock_acquire>
 80086d4:	6a23      	ldr	r3, [r4, #32]
 80086d6:	b11b      	cbz	r3, 80086e0 <__sinit+0x14>
 80086d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086dc:	f7ff bff0 	b.w	80086c0 <__sfp_lock_release>
 80086e0:	4b04      	ldr	r3, [pc, #16]	@ (80086f4 <__sinit+0x28>)
 80086e2:	6223      	str	r3, [r4, #32]
 80086e4:	4b04      	ldr	r3, [pc, #16]	@ (80086f8 <__sinit+0x2c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f5      	bne.n	80086d8 <__sinit+0xc>
 80086ec:	f7ff ffc4 	bl	8008678 <global_stdio_init.part.0>
 80086f0:	e7f2      	b.n	80086d8 <__sinit+0xc>
 80086f2:	bf00      	nop
 80086f4:	08008639 	.word	0x08008639
 80086f8:	20000674 	.word	0x20000674

080086fc <_fwalk_sglue>:
 80086fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008700:	4607      	mov	r7, r0
 8008702:	4688      	mov	r8, r1
 8008704:	4614      	mov	r4, r2
 8008706:	2600      	movs	r6, #0
 8008708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800870c:	f1b9 0901 	subs.w	r9, r9, #1
 8008710:	d505      	bpl.n	800871e <_fwalk_sglue+0x22>
 8008712:	6824      	ldr	r4, [r4, #0]
 8008714:	2c00      	cmp	r4, #0
 8008716:	d1f7      	bne.n	8008708 <_fwalk_sglue+0xc>
 8008718:	4630      	mov	r0, r6
 800871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d907      	bls.n	8008734 <_fwalk_sglue+0x38>
 8008724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008728:	3301      	adds	r3, #1
 800872a:	d003      	beq.n	8008734 <_fwalk_sglue+0x38>
 800872c:	4629      	mov	r1, r5
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	4306      	orrs	r6, r0
 8008734:	3568      	adds	r5, #104	@ 0x68
 8008736:	e7e9      	b.n	800870c <_fwalk_sglue+0x10>

08008738 <iprintf>:
 8008738:	b40f      	push	{r0, r1, r2, r3}
 800873a:	b507      	push	{r0, r1, r2, lr}
 800873c:	4906      	ldr	r1, [pc, #24]	@ (8008758 <iprintf+0x20>)
 800873e:	ab04      	add	r3, sp, #16
 8008740:	6808      	ldr	r0, [r1, #0]
 8008742:	f853 2b04 	ldr.w	r2, [r3], #4
 8008746:	6881      	ldr	r1, [r0, #8]
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	f000 f9e5 	bl	8008b18 <_vfiprintf_r>
 800874e:	b003      	add	sp, #12
 8008750:	f85d eb04 	ldr.w	lr, [sp], #4
 8008754:	b004      	add	sp, #16
 8008756:	4770      	bx	lr
 8008758:	20000020 	.word	0x20000020

0800875c <__sread>:
 800875c:	b510      	push	{r4, lr}
 800875e:	460c      	mov	r4, r1
 8008760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008764:	f000 f868 	bl	8008838 <_read_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	bfab      	itete	ge
 800876c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800876e:	89a3      	ldrhlt	r3, [r4, #12]
 8008770:	181b      	addge	r3, r3, r0
 8008772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008776:	bfac      	ite	ge
 8008778:	6563      	strge	r3, [r4, #84]	@ 0x54
 800877a:	81a3      	strhlt	r3, [r4, #12]
 800877c:	bd10      	pop	{r4, pc}

0800877e <__swrite>:
 800877e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	461f      	mov	r7, r3
 8008784:	898b      	ldrh	r3, [r1, #12]
 8008786:	4605      	mov	r5, r0
 8008788:	05db      	lsls	r3, r3, #23
 800878a:	460c      	mov	r4, r1
 800878c:	4616      	mov	r6, r2
 800878e:	d505      	bpl.n	800879c <__swrite+0x1e>
 8008790:	2302      	movs	r3, #2
 8008792:	2200      	movs	r2, #0
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	f000 f83c 	bl	8008814 <_lseek_r>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	4632      	mov	r2, r6
 80087a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	4628      	mov	r0, r5
 80087a8:	463b      	mov	r3, r7
 80087aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b2:	f000 b853 	b.w	800885c <_write_r>

080087b6 <__sseek>:
 80087b6:	b510      	push	{r4, lr}
 80087b8:	460c      	mov	r4, r1
 80087ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087be:	f000 f829 	bl	8008814 <_lseek_r>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	bf15      	itete	ne
 80087c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087d2:	81a3      	strheq	r3, [r4, #12]
 80087d4:	bf18      	it	ne
 80087d6:	81a3      	strhne	r3, [r4, #12]
 80087d8:	bd10      	pop	{r4, pc}

080087da <__sclose>:
 80087da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087de:	f000 b809 	b.w	80087f4 <_close_r>

080087e2 <memset>:
 80087e2:	4603      	mov	r3, r0
 80087e4:	4402      	add	r2, r0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d100      	bne.n	80087ec <memset+0xa>
 80087ea:	4770      	bx	lr
 80087ec:	f803 1b01 	strb.w	r1, [r3], #1
 80087f0:	e7f9      	b.n	80087e6 <memset+0x4>
	...

080087f4 <_close_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	2300      	movs	r3, #0
 80087f8:	4d05      	ldr	r5, [pc, #20]	@ (8008810 <_close_r+0x1c>)
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	f7f7 fe31 	bl	8000466 <_close>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_close_r+0x1a>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_close_r+0x1a>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20000678 	.word	0x20000678

08008814 <_lseek_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	4611      	mov	r1, r2
 800881c:	2200      	movs	r2, #0
 800881e:	4d05      	ldr	r5, [pc, #20]	@ (8008834 <_lseek_r+0x20>)
 8008820:	602a      	str	r2, [r5, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	f7f7 fe43 	bl	80004ae <_lseek>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_lseek_r+0x1e>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_lseek_r+0x1e>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20000678 	.word	0x20000678

08008838 <_read_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	2200      	movs	r2, #0
 8008842:	4d05      	ldr	r5, [pc, #20]	@ (8008858 <_read_r+0x20>)
 8008844:	602a      	str	r2, [r5, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f7f7 fdd4 	bl	80003f4 <_read>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_read_r+0x1e>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_read_r+0x1e>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000678 	.word	0x20000678

0800885c <_write_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	2200      	movs	r2, #0
 8008866:	4d05      	ldr	r5, [pc, #20]	@ (800887c <_write_r+0x20>)
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7f7 fddf 	bl	800042e <_write>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_write_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_write_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000678 	.word	0x20000678

08008880 <__errno>:
 8008880:	4b01      	ldr	r3, [pc, #4]	@ (8008888 <__errno+0x8>)
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20000020 	.word	0x20000020

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	2600      	movs	r6, #0
 8008890:	4d0c      	ldr	r5, [pc, #48]	@ (80088c4 <__libc_init_array+0x38>)
 8008892:	4c0d      	ldr	r4, [pc, #52]	@ (80088c8 <__libc_init_array+0x3c>)
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	f000 fdc4 	bl	8009428 <_init>
 80088a0:	2600      	movs	r6, #0
 80088a2:	4d0a      	ldr	r5, [pc, #40]	@ (80088cc <__libc_init_array+0x40>)
 80088a4:	4c0a      	ldr	r4, [pc, #40]	@ (80088d0 <__libc_init_array+0x44>)
 80088a6:	1b64      	subs	r4, r4, r5
 80088a8:	10a4      	asrs	r4, r4, #2
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	080094c8 	.word	0x080094c8
 80088c8:	080094c8 	.word	0x080094c8
 80088cc:	080094c8 	.word	0x080094c8
 80088d0:	080094cc 	.word	0x080094cc

080088d4 <__retarget_lock_init_recursive>:
 80088d4:	4770      	bx	lr

080088d6 <__retarget_lock_acquire_recursive>:
 80088d6:	4770      	bx	lr

080088d8 <__retarget_lock_release_recursive>:
 80088d8:	4770      	bx	lr
	...

080088dc <_free_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4605      	mov	r5, r0
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d040      	beq.n	8008966 <_free_r+0x8a>
 80088e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e8:	1f0c      	subs	r4, r1, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfb8      	it	lt
 80088ee:	18e4      	addlt	r4, r4, r3
 80088f0:	f000 f8de 	bl	8008ab0 <__malloc_lock>
 80088f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008968 <_free_r+0x8c>)
 80088f6:	6813      	ldr	r3, [r2, #0]
 80088f8:	b933      	cbnz	r3, 8008908 <_free_r+0x2c>
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	6014      	str	r4, [r2, #0]
 80088fe:	4628      	mov	r0, r5
 8008900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008904:	f000 b8da 	b.w	8008abc <__malloc_unlock>
 8008908:	42a3      	cmp	r3, r4
 800890a:	d908      	bls.n	800891e <_free_r+0x42>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	1821      	adds	r1, r4, r0
 8008910:	428b      	cmp	r3, r1
 8008912:	bf01      	itttt	eq
 8008914:	6819      	ldreq	r1, [r3, #0]
 8008916:	685b      	ldreq	r3, [r3, #4]
 8008918:	1809      	addeq	r1, r1, r0
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	e7ed      	b.n	80088fa <_free_r+0x1e>
 800891e:	461a      	mov	r2, r3
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	b10b      	cbz	r3, 8008928 <_free_r+0x4c>
 8008924:	42a3      	cmp	r3, r4
 8008926:	d9fa      	bls.n	800891e <_free_r+0x42>
 8008928:	6811      	ldr	r1, [r2, #0]
 800892a:	1850      	adds	r0, r2, r1
 800892c:	42a0      	cmp	r0, r4
 800892e:	d10b      	bne.n	8008948 <_free_r+0x6c>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	4401      	add	r1, r0
 8008934:	1850      	adds	r0, r2, r1
 8008936:	4283      	cmp	r3, r0
 8008938:	6011      	str	r1, [r2, #0]
 800893a:	d1e0      	bne.n	80088fe <_free_r+0x22>
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	4408      	add	r0, r1
 8008942:	6010      	str	r0, [r2, #0]
 8008944:	6053      	str	r3, [r2, #4]
 8008946:	e7da      	b.n	80088fe <_free_r+0x22>
 8008948:	d902      	bls.n	8008950 <_free_r+0x74>
 800894a:	230c      	movs	r3, #12
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	e7d6      	b.n	80088fe <_free_r+0x22>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	1821      	adds	r1, r4, r0
 8008954:	428b      	cmp	r3, r1
 8008956:	bf01      	itttt	eq
 8008958:	6819      	ldreq	r1, [r3, #0]
 800895a:	685b      	ldreq	r3, [r3, #4]
 800895c:	1809      	addeq	r1, r1, r0
 800895e:	6021      	streq	r1, [r4, #0]
 8008960:	6063      	str	r3, [r4, #4]
 8008962:	6054      	str	r4, [r2, #4]
 8008964:	e7cb      	b.n	80088fe <_free_r+0x22>
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000684 	.word	0x20000684

0800896c <sbrk_aligned>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	4e0f      	ldr	r6, [pc, #60]	@ (80089ac <sbrk_aligned+0x40>)
 8008970:	460c      	mov	r4, r1
 8008972:	6831      	ldr	r1, [r6, #0]
 8008974:	4605      	mov	r5, r0
 8008976:	b911      	cbnz	r1, 800897e <sbrk_aligned+0x12>
 8008978:	f000 fcb4 	bl	80092e4 <_sbrk_r>
 800897c:	6030      	str	r0, [r6, #0]
 800897e:	4621      	mov	r1, r4
 8008980:	4628      	mov	r0, r5
 8008982:	f000 fcaf 	bl	80092e4 <_sbrk_r>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d103      	bne.n	8008992 <sbrk_aligned+0x26>
 800898a:	f04f 34ff 	mov.w	r4, #4294967295
 800898e:	4620      	mov	r0, r4
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	1cc4      	adds	r4, r0, #3
 8008994:	f024 0403 	bic.w	r4, r4, #3
 8008998:	42a0      	cmp	r0, r4
 800899a:	d0f8      	beq.n	800898e <sbrk_aligned+0x22>
 800899c:	1a21      	subs	r1, r4, r0
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fca0 	bl	80092e4 <_sbrk_r>
 80089a4:	3001      	adds	r0, #1
 80089a6:	d1f2      	bne.n	800898e <sbrk_aligned+0x22>
 80089a8:	e7ef      	b.n	800898a <sbrk_aligned+0x1e>
 80089aa:	bf00      	nop
 80089ac:	20000680 	.word	0x20000680

080089b0 <_malloc_r>:
 80089b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b4:	1ccd      	adds	r5, r1, #3
 80089b6:	f025 0503 	bic.w	r5, r5, #3
 80089ba:	3508      	adds	r5, #8
 80089bc:	2d0c      	cmp	r5, #12
 80089be:	bf38      	it	cc
 80089c0:	250c      	movcc	r5, #12
 80089c2:	2d00      	cmp	r5, #0
 80089c4:	4606      	mov	r6, r0
 80089c6:	db01      	blt.n	80089cc <_malloc_r+0x1c>
 80089c8:	42a9      	cmp	r1, r5
 80089ca:	d904      	bls.n	80089d6 <_malloc_r+0x26>
 80089cc:	230c      	movs	r3, #12
 80089ce:	6033      	str	r3, [r6, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008aac <_malloc_r+0xfc>
 80089da:	f000 f869 	bl	8008ab0 <__malloc_lock>
 80089de:	f8d8 3000 	ldr.w	r3, [r8]
 80089e2:	461c      	mov	r4, r3
 80089e4:	bb44      	cbnz	r4, 8008a38 <_malloc_r+0x88>
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff ffbf 	bl	800896c <sbrk_aligned>
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	4604      	mov	r4, r0
 80089f2:	d158      	bne.n	8008aa6 <_malloc_r+0xf6>
 80089f4:	f8d8 4000 	ldr.w	r4, [r8]
 80089f8:	4627      	mov	r7, r4
 80089fa:	2f00      	cmp	r7, #0
 80089fc:	d143      	bne.n	8008a86 <_malloc_r+0xd6>
 80089fe:	2c00      	cmp	r4, #0
 8008a00:	d04b      	beq.n	8008a9a <_malloc_r+0xea>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	4639      	mov	r1, r7
 8008a06:	4630      	mov	r0, r6
 8008a08:	eb04 0903 	add.w	r9, r4, r3
 8008a0c:	f000 fc6a 	bl	80092e4 <_sbrk_r>
 8008a10:	4581      	cmp	r9, r0
 8008a12:	d142      	bne.n	8008a9a <_malloc_r+0xea>
 8008a14:	6821      	ldr	r1, [r4, #0]
 8008a16:	4630      	mov	r0, r6
 8008a18:	1a6d      	subs	r5, r5, r1
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7ff ffa6 	bl	800896c <sbrk_aligned>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d03a      	beq.n	8008a9a <_malloc_r+0xea>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	442b      	add	r3, r5
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	bb62      	cbnz	r2, 8008a8c <_malloc_r+0xdc>
 8008a32:	f8c8 7000 	str.w	r7, [r8]
 8008a36:	e00f      	b.n	8008a58 <_malloc_r+0xa8>
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	1b52      	subs	r2, r2, r5
 8008a3c:	d420      	bmi.n	8008a80 <_malloc_r+0xd0>
 8008a3e:	2a0b      	cmp	r2, #11
 8008a40:	d917      	bls.n	8008a72 <_malloc_r+0xc2>
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	6025      	str	r5, [r4, #0]
 8008a48:	bf18      	it	ne
 8008a4a:	6059      	strne	r1, [r3, #4]
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	bf08      	it	eq
 8008a50:	f8c8 1000 	streq.w	r1, [r8]
 8008a54:	5162      	str	r2, [r4, r5]
 8008a56:	604b      	str	r3, [r1, #4]
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 f82f 	bl	8008abc <__malloc_unlock>
 8008a5e:	f104 000b 	add.w	r0, r4, #11
 8008a62:	1d23      	adds	r3, r4, #4
 8008a64:	f020 0007 	bic.w	r0, r0, #7
 8008a68:	1ac2      	subs	r2, r0, r3
 8008a6a:	bf1c      	itt	ne
 8008a6c:	1a1b      	subne	r3, r3, r0
 8008a6e:	50a3      	strne	r3, [r4, r2]
 8008a70:	e7af      	b.n	80089d2 <_malloc_r+0x22>
 8008a72:	6862      	ldr	r2, [r4, #4]
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	bf0c      	ite	eq
 8008a78:	f8c8 2000 	streq.w	r2, [r8]
 8008a7c:	605a      	strne	r2, [r3, #4]
 8008a7e:	e7eb      	b.n	8008a58 <_malloc_r+0xa8>
 8008a80:	4623      	mov	r3, r4
 8008a82:	6864      	ldr	r4, [r4, #4]
 8008a84:	e7ae      	b.n	80089e4 <_malloc_r+0x34>
 8008a86:	463c      	mov	r4, r7
 8008a88:	687f      	ldr	r7, [r7, #4]
 8008a8a:	e7b6      	b.n	80089fa <_malloc_r+0x4a>
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d1fb      	bne.n	8008a8c <_malloc_r+0xdc>
 8008a94:	2300      	movs	r3, #0
 8008a96:	6053      	str	r3, [r2, #4]
 8008a98:	e7de      	b.n	8008a58 <_malloc_r+0xa8>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	6033      	str	r3, [r6, #0]
 8008aa0:	f000 f80c 	bl	8008abc <__malloc_unlock>
 8008aa4:	e794      	b.n	80089d0 <_malloc_r+0x20>
 8008aa6:	6005      	str	r5, [r0, #0]
 8008aa8:	e7d6      	b.n	8008a58 <_malloc_r+0xa8>
 8008aaa:	bf00      	nop
 8008aac:	20000684 	.word	0x20000684

08008ab0 <__malloc_lock>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	@ (8008ab8 <__malloc_lock+0x8>)
 8008ab2:	f7ff bf10 	b.w	80088d6 <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	2000067c 	.word	0x2000067c

08008abc <__malloc_unlock>:
 8008abc:	4801      	ldr	r0, [pc, #4]	@ (8008ac4 <__malloc_unlock+0x8>)
 8008abe:	f7ff bf0b 	b.w	80088d8 <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	2000067c 	.word	0x2000067c

08008ac8 <__sfputc_r>:
 8008ac8:	6893      	ldr	r3, [r2, #8]
 8008aca:	b410      	push	{r4}
 8008acc:	3b01      	subs	r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	6093      	str	r3, [r2, #8]
 8008ad2:	da07      	bge.n	8008ae4 <__sfputc_r+0x1c>
 8008ad4:	6994      	ldr	r4, [r2, #24]
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	db01      	blt.n	8008ade <__sfputc_r+0x16>
 8008ada:	290a      	cmp	r1, #10
 8008adc:	d102      	bne.n	8008ae4 <__sfputc_r+0x1c>
 8008ade:	bc10      	pop	{r4}
 8008ae0:	f000 bb6c 	b.w	80091bc <__swbuf_r>
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	1c58      	adds	r0, r3, #1
 8008ae8:	6010      	str	r0, [r2, #0]
 8008aea:	7019      	strb	r1, [r3, #0]
 8008aec:	4608      	mov	r0, r1
 8008aee:	bc10      	pop	{r4}
 8008af0:	4770      	bx	lr

08008af2 <__sfputs_r>:
 8008af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	18d5      	adds	r5, r2, r3
 8008afc:	42ac      	cmp	r4, r5
 8008afe:	d101      	bne.n	8008b04 <__sfputs_r+0x12>
 8008b00:	2000      	movs	r0, #0
 8008b02:	e007      	b.n	8008b14 <__sfputs_r+0x22>
 8008b04:	463a      	mov	r2, r7
 8008b06:	4630      	mov	r0, r6
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	f7ff ffdc 	bl	8008ac8 <__sfputc_r>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d1f3      	bne.n	8008afc <__sfputs_r+0xa>
 8008b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b18 <_vfiprintf_r>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	4698      	mov	r8, r3
 8008b22:	4606      	mov	r6, r0
 8008b24:	b09d      	sub	sp, #116	@ 0x74
 8008b26:	b118      	cbz	r0, 8008b30 <_vfiprintf_r+0x18>
 8008b28:	6a03      	ldr	r3, [r0, #32]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x18>
 8008b2c:	f7ff fdce 	bl	80086cc <__sinit>
 8008b30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b32:	07d9      	lsls	r1, r3, #31
 8008b34:	d405      	bmi.n	8008b42 <_vfiprintf_r+0x2a>
 8008b36:	89ab      	ldrh	r3, [r5, #12]
 8008b38:	059a      	lsls	r2, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_vfiprintf_r+0x2a>
 8008b3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b3e:	f7ff feca 	bl	80088d6 <__retarget_lock_acquire_recursive>
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	071b      	lsls	r3, r3, #28
 8008b46:	d501      	bpl.n	8008b4c <_vfiprintf_r+0x34>
 8008b48:	692b      	ldr	r3, [r5, #16]
 8008b4a:	b99b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x5c>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 fb72 	bl	8009238 <__swsetup_r>
 8008b54:	b170      	cbz	r0, 8008b74 <_vfiprintf_r+0x5c>
 8008b56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b58:	07dc      	lsls	r4, r3, #31
 8008b5a:	d504      	bpl.n	8008b66 <_vfiprintf_r+0x4e>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	b01d      	add	sp, #116	@ 0x74
 8008b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	0598      	lsls	r0, r3, #22
 8008b6a:	d4f7      	bmi.n	8008b5c <_vfiprintf_r+0x44>
 8008b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b6e:	f7ff feb3 	bl	80088d8 <__retarget_lock_release_recursive>
 8008b72:	e7f3      	b.n	8008b5c <_vfiprintf_r+0x44>
 8008b74:	2300      	movs	r3, #0
 8008b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b7e:	2330      	movs	r3, #48	@ 0x30
 8008b80:	f04f 0901 	mov.w	r9, #1
 8008b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d34 <_vfiprintf_r+0x21c>
 8008b8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b90:	4623      	mov	r3, r4
 8008b92:	469a      	mov	sl, r3
 8008b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b98:	b10a      	cbz	r2, 8008b9e <_vfiprintf_r+0x86>
 8008b9a:	2a25      	cmp	r2, #37	@ 0x25
 8008b9c:	d1f9      	bne.n	8008b92 <_vfiprintf_r+0x7a>
 8008b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba2:	d00b      	beq.n	8008bbc <_vfiprintf_r+0xa4>
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ffa1 	bl	8008af2 <__sfputs_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	f000 80a7 	beq.w	8008d04 <_vfiprintf_r+0x1ec>
 8008bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb8:	445a      	add	r2, fp
 8008bba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 809f 	beq.w	8008d04 <_vfiprintf_r+0x1ec>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd0:	f10a 0a01 	add.w	sl, sl, #1
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	9307      	str	r3, [sp, #28]
 8008bd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bde:	4654      	mov	r4, sl
 8008be0:	2205      	movs	r2, #5
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4853      	ldr	r0, [pc, #332]	@ (8008d34 <_vfiprintf_r+0x21c>)
 8008be8:	f000 fb8c 	bl	8009304 <memchr>
 8008bec:	9a04      	ldr	r2, [sp, #16]
 8008bee:	b9d8      	cbnz	r0, 8008c28 <_vfiprintf_r+0x110>
 8008bf0:	06d1      	lsls	r1, r2, #27
 8008bf2:	bf44      	itt	mi
 8008bf4:	2320      	movmi	r3, #32
 8008bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bfa:	0713      	lsls	r3, r2, #28
 8008bfc:	bf44      	itt	mi
 8008bfe:	232b      	movmi	r3, #43	@ 0x2b
 8008c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c0a:	d015      	beq.n	8008c38 <_vfiprintf_r+0x120>
 8008c0c:	4654      	mov	r4, sl
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	9a07      	ldr	r2, [sp, #28]
 8008c16:	4621      	mov	r1, r4
 8008c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1c:	3b30      	subs	r3, #48	@ 0x30
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d94b      	bls.n	8008cba <_vfiprintf_r+0x1a2>
 8008c22:	b1b0      	cbz	r0, 8008c52 <_vfiprintf_r+0x13a>
 8008c24:	9207      	str	r2, [sp, #28]
 8008c26:	e014      	b.n	8008c52 <_vfiprintf_r+0x13a>
 8008c28:	eba0 0308 	sub.w	r3, r0, r8
 8008c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	46a2      	mov	sl, r4
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	e7d2      	b.n	8008bde <_vfiprintf_r+0xc6>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	1d19      	adds	r1, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	9103      	str	r1, [sp, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfbb      	ittet	lt
 8008c44:	425b      	neglt	r3, r3
 8008c46:	f042 0202 	orrlt.w	r2, r2, #2
 8008c4a:	9307      	strge	r3, [sp, #28]
 8008c4c:	9307      	strlt	r3, [sp, #28]
 8008c4e:	bfb8      	it	lt
 8008c50:	9204      	strlt	r2, [sp, #16]
 8008c52:	7823      	ldrb	r3, [r4, #0]
 8008c54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c56:	d10a      	bne.n	8008c6e <_vfiprintf_r+0x156>
 8008c58:	7863      	ldrb	r3, [r4, #1]
 8008c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5c:	d132      	bne.n	8008cc4 <_vfiprintf_r+0x1ac>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	3402      	adds	r4, #2
 8008c62:	1d1a      	adds	r2, r3, #4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	9203      	str	r2, [sp, #12]
 8008c68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d38 <_vfiprintf_r+0x220>
 8008c72:	2203      	movs	r2, #3
 8008c74:	4650      	mov	r0, sl
 8008c76:	7821      	ldrb	r1, [r4, #0]
 8008c78:	f000 fb44 	bl	8009304 <memchr>
 8008c7c:	b138      	cbz	r0, 8008c8e <_vfiprintf_r+0x176>
 8008c7e:	2240      	movs	r2, #64	@ 0x40
 8008c80:	9b04      	ldr	r3, [sp, #16]
 8008c82:	eba0 000a 	sub.w	r0, r0, sl
 8008c86:	4082      	lsls	r2, r0
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c92:	2206      	movs	r2, #6
 8008c94:	4829      	ldr	r0, [pc, #164]	@ (8008d3c <_vfiprintf_r+0x224>)
 8008c96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c9a:	f000 fb33 	bl	8009304 <memchr>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d03f      	beq.n	8008d22 <_vfiprintf_r+0x20a>
 8008ca2:	4b27      	ldr	r3, [pc, #156]	@ (8008d40 <_vfiprintf_r+0x228>)
 8008ca4:	bb1b      	cbnz	r3, 8008cee <_vfiprintf_r+0x1d6>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	3307      	adds	r3, #7
 8008caa:	f023 0307 	bic.w	r3, r3, #7
 8008cae:	3308      	adds	r3, #8
 8008cb0:	9303      	str	r3, [sp, #12]
 8008cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb4:	443b      	add	r3, r7
 8008cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb8:	e76a      	b.n	8008b90 <_vfiprintf_r+0x78>
 8008cba:	460c      	mov	r4, r1
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc2:	e7a8      	b.n	8008c16 <_vfiprintf_r+0xfe>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f04f 0c0a 	mov.w	ip, #10
 8008cca:	4619      	mov	r1, r3
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd6:	3a30      	subs	r2, #48	@ 0x30
 8008cd8:	2a09      	cmp	r2, #9
 8008cda:	d903      	bls.n	8008ce4 <_vfiprintf_r+0x1cc>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0c6      	beq.n	8008c6e <_vfiprintf_r+0x156>
 8008ce0:	9105      	str	r1, [sp, #20]
 8008ce2:	e7c4      	b.n	8008c6e <_vfiprintf_r+0x156>
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cec:	e7f0      	b.n	8008cd0 <_vfiprintf_r+0x1b8>
 8008cee:	ab03      	add	r3, sp, #12
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	462a      	mov	r2, r5
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <_vfiprintf_r+0x22c>)
 8008cf8:	a904      	add	r1, sp, #16
 8008cfa:	f3af 8000 	nop.w
 8008cfe:	4607      	mov	r7, r0
 8008d00:	1c78      	adds	r0, r7, #1
 8008d02:	d1d6      	bne.n	8008cb2 <_vfiprintf_r+0x19a>
 8008d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d06:	07d9      	lsls	r1, r3, #31
 8008d08:	d405      	bmi.n	8008d16 <_vfiprintf_r+0x1fe>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	059a      	lsls	r2, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_vfiprintf_r+0x1fe>
 8008d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d12:	f7ff fde1 	bl	80088d8 <__retarget_lock_release_recursive>
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	065b      	lsls	r3, r3, #25
 8008d1a:	f53f af1f 	bmi.w	8008b5c <_vfiprintf_r+0x44>
 8008d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d20:	e71e      	b.n	8008b60 <_vfiprintf_r+0x48>
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	462a      	mov	r2, r5
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4b06      	ldr	r3, [pc, #24]	@ (8008d44 <_vfiprintf_r+0x22c>)
 8008d2c:	a904      	add	r1, sp, #16
 8008d2e:	f000 f87d 	bl	8008e2c <_printf_i>
 8008d32:	e7e4      	b.n	8008cfe <_vfiprintf_r+0x1e6>
 8008d34:	08009492 	.word	0x08009492
 8008d38:	08009498 	.word	0x08009498
 8008d3c:	0800949c 	.word	0x0800949c
 8008d40:	00000000 	.word	0x00000000
 8008d44:	08008af3 	.word	0x08008af3

08008d48 <_printf_common>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	4698      	mov	r8, r3
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	4607      	mov	r7, r0
 8008d56:	4293      	cmp	r3, r2
 8008d58:	bfb8      	it	lt
 8008d5a:	4613      	movlt	r3, r2
 8008d5c:	6033      	str	r3, [r6, #0]
 8008d5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d62:	460c      	mov	r4, r1
 8008d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d68:	b10a      	cbz	r2, 8008d6e <_printf_common+0x26>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	0699      	lsls	r1, r3, #26
 8008d72:	bf42      	ittt	mi
 8008d74:	6833      	ldrmi	r3, [r6, #0]
 8008d76:	3302      	addmi	r3, #2
 8008d78:	6033      	strmi	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	f015 0506 	ands.w	r5, r5, #6
 8008d80:	d106      	bne.n	8008d90 <_printf_common+0x48>
 8008d82:	f104 0a19 	add.w	sl, r4, #25
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	6832      	ldr	r2, [r6, #0]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc2b      	bgt.n	8008de8 <_printf_common+0xa0>
 8008d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	3b00      	subs	r3, #0
 8008d98:	bf18      	it	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	0692      	lsls	r2, r2, #26
 8008d9e:	d430      	bmi.n	8008e02 <_printf_common+0xba>
 8008da0:	4641      	mov	r1, r8
 8008da2:	4638      	mov	r0, r7
 8008da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008da8:	47c8      	blx	r9
 8008daa:	3001      	adds	r0, #1
 8008dac:	d023      	beq.n	8008df6 <_printf_common+0xae>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	f003 0306 	and.w	r3, r3, #6
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	bf14      	ite	ne
 8008dba:	2500      	movne	r5, #0
 8008dbc:	6833      	ldreq	r3, [r6, #0]
 8008dbe:	f04f 0600 	mov.w	r6, #0
 8008dc2:	bf08      	it	eq
 8008dc4:	68e5      	ldreq	r5, [r4, #12]
 8008dc6:	f104 041a 	add.w	r4, r4, #26
 8008dca:	bf08      	it	eq
 8008dcc:	1aed      	subeq	r5, r5, r3
 8008dce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008dd2:	bf08      	it	eq
 8008dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bfc4      	itt	gt
 8008ddc:	1a9b      	subgt	r3, r3, r2
 8008dde:	18ed      	addgt	r5, r5, r3
 8008de0:	42b5      	cmp	r5, r6
 8008de2:	d11a      	bne.n	8008e1a <_printf_common+0xd2>
 8008de4:	2000      	movs	r0, #0
 8008de6:	e008      	b.n	8008dfa <_printf_common+0xb2>
 8008de8:	2301      	movs	r3, #1
 8008dea:	4652      	mov	r2, sl
 8008dec:	4641      	mov	r1, r8
 8008dee:	4638      	mov	r0, r7
 8008df0:	47c8      	blx	r9
 8008df2:	3001      	adds	r0, #1
 8008df4:	d103      	bne.n	8008dfe <_printf_common+0xb6>
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfe:	3501      	adds	r5, #1
 8008e00:	e7c1      	b.n	8008d86 <_printf_common+0x3e>
 8008e02:	2030      	movs	r0, #48	@ 0x30
 8008e04:	18e1      	adds	r1, r4, r3
 8008e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e10:	4422      	add	r2, r4
 8008e12:	3302      	adds	r3, #2
 8008e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e18:	e7c2      	b.n	8008da0 <_printf_common+0x58>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	4641      	mov	r1, r8
 8008e20:	4638      	mov	r0, r7
 8008e22:	47c8      	blx	r9
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0e6      	beq.n	8008df6 <_printf_common+0xae>
 8008e28:	3601      	adds	r6, #1
 8008e2a:	e7d9      	b.n	8008de0 <_printf_common+0x98>

08008e2c <_printf_i>:
 8008e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	7e0f      	ldrb	r7, [r1, #24]
 8008e32:	4691      	mov	r9, r2
 8008e34:	2f78      	cmp	r7, #120	@ 0x78
 8008e36:	4680      	mov	r8, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	469a      	mov	sl, r3
 8008e3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e42:	d807      	bhi.n	8008e54 <_printf_i+0x28>
 8008e44:	2f62      	cmp	r7, #98	@ 0x62
 8008e46:	d80a      	bhi.n	8008e5e <_printf_i+0x32>
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	f000 80d3 	beq.w	8008ff4 <_printf_i+0x1c8>
 8008e4e:	2f58      	cmp	r7, #88	@ 0x58
 8008e50:	f000 80ba 	beq.w	8008fc8 <_printf_i+0x19c>
 8008e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e5c:	e03a      	b.n	8008ed4 <_printf_i+0xa8>
 8008e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e62:	2b15      	cmp	r3, #21
 8008e64:	d8f6      	bhi.n	8008e54 <_printf_i+0x28>
 8008e66:	a101      	add	r1, pc, #4	@ (adr r1, 8008e6c <_printf_i+0x40>)
 8008e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e6c:	08008ec5 	.word	0x08008ec5
 8008e70:	08008ed9 	.word	0x08008ed9
 8008e74:	08008e55 	.word	0x08008e55
 8008e78:	08008e55 	.word	0x08008e55
 8008e7c:	08008e55 	.word	0x08008e55
 8008e80:	08008e55 	.word	0x08008e55
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008e55 	.word	0x08008e55
 8008e8c:	08008e55 	.word	0x08008e55
 8008e90:	08008e55 	.word	0x08008e55
 8008e94:	08008e55 	.word	0x08008e55
 8008e98:	08008fdb 	.word	0x08008fdb
 8008e9c:	08008f03 	.word	0x08008f03
 8008ea0:	08008f95 	.word	0x08008f95
 8008ea4:	08008e55 	.word	0x08008e55
 8008ea8:	08008e55 	.word	0x08008e55
 8008eac:	08008ffd 	.word	0x08008ffd
 8008eb0:	08008e55 	.word	0x08008e55
 8008eb4:	08008f03 	.word	0x08008f03
 8008eb8:	08008e55 	.word	0x08008e55
 8008ebc:	08008e55 	.word	0x08008e55
 8008ec0:	08008f9d 	.word	0x08008f9d
 8008ec4:	6833      	ldr	r3, [r6, #0]
 8008ec6:	1d1a      	adds	r2, r3, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6032      	str	r2, [r6, #0]
 8008ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e09e      	b.n	8009016 <_printf_i+0x1ea>
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	6820      	ldr	r0, [r4, #0]
 8008edc:	1d19      	adds	r1, r3, #4
 8008ede:	6031      	str	r1, [r6, #0]
 8008ee0:	0606      	lsls	r6, r0, #24
 8008ee2:	d501      	bpl.n	8008ee8 <_printf_i+0xbc>
 8008ee4:	681d      	ldr	r5, [r3, #0]
 8008ee6:	e003      	b.n	8008ef0 <_printf_i+0xc4>
 8008ee8:	0645      	lsls	r5, r0, #25
 8008eea:	d5fb      	bpl.n	8008ee4 <_printf_i+0xb8>
 8008eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	da03      	bge.n	8008efc <_printf_i+0xd0>
 8008ef4:	232d      	movs	r3, #45	@ 0x2d
 8008ef6:	426d      	negs	r5, r5
 8008ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008efc:	230a      	movs	r3, #10
 8008efe:	4859      	ldr	r0, [pc, #356]	@ (8009064 <_printf_i+0x238>)
 8008f00:	e011      	b.n	8008f26 <_printf_i+0xfa>
 8008f02:	6821      	ldr	r1, [r4, #0]
 8008f04:	6833      	ldr	r3, [r6, #0]
 8008f06:	0608      	lsls	r0, r1, #24
 8008f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f0c:	d402      	bmi.n	8008f14 <_printf_i+0xe8>
 8008f0e:	0649      	lsls	r1, r1, #25
 8008f10:	bf48      	it	mi
 8008f12:	b2ad      	uxthmi	r5, r5
 8008f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f16:	6033      	str	r3, [r6, #0]
 8008f18:	bf14      	ite	ne
 8008f1a:	230a      	movne	r3, #10
 8008f1c:	2308      	moveq	r3, #8
 8008f1e:	4851      	ldr	r0, [pc, #324]	@ (8009064 <_printf_i+0x238>)
 8008f20:	2100      	movs	r1, #0
 8008f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f26:	6866      	ldr	r6, [r4, #4]
 8008f28:	2e00      	cmp	r6, #0
 8008f2a:	bfa8      	it	ge
 8008f2c:	6821      	ldrge	r1, [r4, #0]
 8008f2e:	60a6      	str	r6, [r4, #8]
 8008f30:	bfa4      	itt	ge
 8008f32:	f021 0104 	bicge.w	r1, r1, #4
 8008f36:	6021      	strge	r1, [r4, #0]
 8008f38:	b90d      	cbnz	r5, 8008f3e <_printf_i+0x112>
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	d04b      	beq.n	8008fd6 <_printf_i+0x1aa>
 8008f3e:	4616      	mov	r6, r2
 8008f40:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f44:	fb03 5711 	mls	r7, r3, r1, r5
 8008f48:	5dc7      	ldrb	r7, [r0, r7]
 8008f4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f4e:	462f      	mov	r7, r5
 8008f50:	42bb      	cmp	r3, r7
 8008f52:	460d      	mov	r5, r1
 8008f54:	d9f4      	bls.n	8008f40 <_printf_i+0x114>
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d10b      	bne.n	8008f72 <_printf_i+0x146>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	07df      	lsls	r7, r3, #31
 8008f5e:	d508      	bpl.n	8008f72 <_printf_i+0x146>
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	6861      	ldr	r1, [r4, #4]
 8008f64:	4299      	cmp	r1, r3
 8008f66:	bfde      	ittt	le
 8008f68:	2330      	movle	r3, #48	@ 0x30
 8008f6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f72:	1b92      	subs	r2, r2, r6
 8008f74:	6122      	str	r2, [r4, #16]
 8008f76:	464b      	mov	r3, r9
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f8cd a000 	str.w	sl, [sp]
 8008f80:	aa03      	add	r2, sp, #12
 8008f82:	f7ff fee1 	bl	8008d48 <_printf_common>
 8008f86:	3001      	adds	r0, #1
 8008f88:	d14a      	bne.n	8009020 <_printf_i+0x1f4>
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	b004      	add	sp, #16
 8008f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	f043 0320 	orr.w	r3, r3, #32
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	2778      	movs	r7, #120	@ 0x78
 8008f9e:	4832      	ldr	r0, [pc, #200]	@ (8009068 <_printf_i+0x23c>)
 8008fa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	6831      	ldr	r1, [r6, #0]
 8008fa8:	061f      	lsls	r7, r3, #24
 8008faa:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fae:	d402      	bmi.n	8008fb6 <_printf_i+0x18a>
 8008fb0:	065f      	lsls	r7, r3, #25
 8008fb2:	bf48      	it	mi
 8008fb4:	b2ad      	uxthmi	r5, r5
 8008fb6:	6031      	str	r1, [r6, #0]
 8008fb8:	07d9      	lsls	r1, r3, #31
 8008fba:	bf44      	itt	mi
 8008fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc0:	6023      	strmi	r3, [r4, #0]
 8008fc2:	b11d      	cbz	r5, 8008fcc <_printf_i+0x1a0>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	e7ab      	b.n	8008f20 <_printf_i+0xf4>
 8008fc8:	4826      	ldr	r0, [pc, #152]	@ (8009064 <_printf_i+0x238>)
 8008fca:	e7e9      	b.n	8008fa0 <_printf_i+0x174>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	f023 0320 	bic.w	r3, r3, #32
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	e7f6      	b.n	8008fc4 <_printf_i+0x198>
 8008fd6:	4616      	mov	r6, r2
 8008fd8:	e7bd      	b.n	8008f56 <_printf_i+0x12a>
 8008fda:	6833      	ldr	r3, [r6, #0]
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1d18      	adds	r0, r3, #4
 8008fe0:	6961      	ldr	r1, [r4, #20]
 8008fe2:	6030      	str	r0, [r6, #0]
 8008fe4:	062e      	lsls	r6, r5, #24
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	d501      	bpl.n	8008fee <_printf_i+0x1c2>
 8008fea:	6019      	str	r1, [r3, #0]
 8008fec:	e002      	b.n	8008ff4 <_printf_i+0x1c8>
 8008fee:	0668      	lsls	r0, r5, #25
 8008ff0:	d5fb      	bpl.n	8008fea <_printf_i+0x1be>
 8008ff2:	8019      	strh	r1, [r3, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4616      	mov	r6, r2
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	e7bc      	b.n	8008f76 <_printf_i+0x14a>
 8008ffc:	6833      	ldr	r3, [r6, #0]
 8008ffe:	2100      	movs	r1, #0
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	6032      	str	r2, [r6, #0]
 8009004:	681e      	ldr	r6, [r3, #0]
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f97b 	bl	8009304 <memchr>
 800900e:	b108      	cbz	r0, 8009014 <_printf_i+0x1e8>
 8009010:	1b80      	subs	r0, r0, r6
 8009012:	6060      	str	r0, [r4, #4]
 8009014:	6863      	ldr	r3, [r4, #4]
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	2300      	movs	r3, #0
 800901a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800901e:	e7aa      	b.n	8008f76 <_printf_i+0x14a>
 8009020:	4632      	mov	r2, r6
 8009022:	4649      	mov	r1, r9
 8009024:	4640      	mov	r0, r8
 8009026:	6923      	ldr	r3, [r4, #16]
 8009028:	47d0      	blx	sl
 800902a:	3001      	adds	r0, #1
 800902c:	d0ad      	beq.n	8008f8a <_printf_i+0x15e>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	079b      	lsls	r3, r3, #30
 8009032:	d413      	bmi.n	800905c <_printf_i+0x230>
 8009034:	68e0      	ldr	r0, [r4, #12]
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	4298      	cmp	r0, r3
 800903a:	bfb8      	it	lt
 800903c:	4618      	movlt	r0, r3
 800903e:	e7a6      	b.n	8008f8e <_printf_i+0x162>
 8009040:	2301      	movs	r3, #1
 8009042:	4632      	mov	r2, r6
 8009044:	4649      	mov	r1, r9
 8009046:	4640      	mov	r0, r8
 8009048:	47d0      	blx	sl
 800904a:	3001      	adds	r0, #1
 800904c:	d09d      	beq.n	8008f8a <_printf_i+0x15e>
 800904e:	3501      	adds	r5, #1
 8009050:	68e3      	ldr	r3, [r4, #12]
 8009052:	9903      	ldr	r1, [sp, #12]
 8009054:	1a5b      	subs	r3, r3, r1
 8009056:	42ab      	cmp	r3, r5
 8009058:	dcf2      	bgt.n	8009040 <_printf_i+0x214>
 800905a:	e7eb      	b.n	8009034 <_printf_i+0x208>
 800905c:	2500      	movs	r5, #0
 800905e:	f104 0619 	add.w	r6, r4, #25
 8009062:	e7f5      	b.n	8009050 <_printf_i+0x224>
 8009064:	080094a3 	.word	0x080094a3
 8009068:	080094b4 	.word	0x080094b4

0800906c <__sflush_r>:
 800906c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	0716      	lsls	r6, r2, #28
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	d454      	bmi.n	8009124 <__sflush_r+0xb8>
 800907a:	684b      	ldr	r3, [r1, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	dc02      	bgt.n	8009086 <__sflush_r+0x1a>
 8009080:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd48      	ble.n	8009118 <__sflush_r+0xac>
 8009086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009088:	2e00      	cmp	r6, #0
 800908a:	d045      	beq.n	8009118 <__sflush_r+0xac>
 800908c:	2300      	movs	r3, #0
 800908e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009092:	682f      	ldr	r7, [r5, #0]
 8009094:	6a21      	ldr	r1, [r4, #32]
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	d030      	beq.n	80090fc <__sflush_r+0x90>
 800909a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	0759      	lsls	r1, r3, #29
 80090a0:	d505      	bpl.n	80090ae <__sflush_r+0x42>
 80090a2:	6863      	ldr	r3, [r4, #4]
 80090a4:	1ad2      	subs	r2, r2, r3
 80090a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090a8:	b10b      	cbz	r3, 80090ae <__sflush_r+0x42>
 80090aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ac:	1ad2      	subs	r2, r2, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	4628      	mov	r0, r5
 80090b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b4:	6a21      	ldr	r1, [r4, #32]
 80090b6:	47b0      	blx	r6
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	d106      	bne.n	80090cc <__sflush_r+0x60>
 80090be:	6829      	ldr	r1, [r5, #0]
 80090c0:	291d      	cmp	r1, #29
 80090c2:	d82b      	bhi.n	800911c <__sflush_r+0xb0>
 80090c4:	4a28      	ldr	r2, [pc, #160]	@ (8009168 <__sflush_r+0xfc>)
 80090c6:	410a      	asrs	r2, r1
 80090c8:	07d6      	lsls	r6, r2, #31
 80090ca:	d427      	bmi.n	800911c <__sflush_r+0xb0>
 80090cc:	2200      	movs	r2, #0
 80090ce:	6062      	str	r2, [r4, #4]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	04d9      	lsls	r1, r3, #19
 80090d4:	6022      	str	r2, [r4, #0]
 80090d6:	d504      	bpl.n	80090e2 <__sflush_r+0x76>
 80090d8:	1c42      	adds	r2, r0, #1
 80090da:	d101      	bne.n	80090e0 <__sflush_r+0x74>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b903      	cbnz	r3, 80090e2 <__sflush_r+0x76>
 80090e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80090e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090e4:	602f      	str	r7, [r5, #0]
 80090e6:	b1b9      	cbz	r1, 8009118 <__sflush_r+0xac>
 80090e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090ec:	4299      	cmp	r1, r3
 80090ee:	d002      	beq.n	80090f6 <__sflush_r+0x8a>
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7ff fbf3 	bl	80088dc <_free_r>
 80090f6:	2300      	movs	r3, #0
 80090f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090fa:	e00d      	b.n	8009118 <__sflush_r+0xac>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	4602      	mov	r2, r0
 8009104:	1c50      	adds	r0, r2, #1
 8009106:	d1c9      	bne.n	800909c <__sflush_r+0x30>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0c6      	beq.n	800909c <__sflush_r+0x30>
 800910e:	2b1d      	cmp	r3, #29
 8009110:	d001      	beq.n	8009116 <__sflush_r+0xaa>
 8009112:	2b16      	cmp	r3, #22
 8009114:	d11d      	bne.n	8009152 <__sflush_r+0xe6>
 8009116:	602f      	str	r7, [r5, #0]
 8009118:	2000      	movs	r0, #0
 800911a:	e021      	b.n	8009160 <__sflush_r+0xf4>
 800911c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009120:	b21b      	sxth	r3, r3
 8009122:	e01a      	b.n	800915a <__sflush_r+0xee>
 8009124:	690f      	ldr	r7, [r1, #16]
 8009126:	2f00      	cmp	r7, #0
 8009128:	d0f6      	beq.n	8009118 <__sflush_r+0xac>
 800912a:	0793      	lsls	r3, r2, #30
 800912c:	bf18      	it	ne
 800912e:	2300      	movne	r3, #0
 8009130:	680e      	ldr	r6, [r1, #0]
 8009132:	bf08      	it	eq
 8009134:	694b      	ldreq	r3, [r1, #20]
 8009136:	1bf6      	subs	r6, r6, r7
 8009138:	600f      	str	r7, [r1, #0]
 800913a:	608b      	str	r3, [r1, #8]
 800913c:	2e00      	cmp	r6, #0
 800913e:	ddeb      	ble.n	8009118 <__sflush_r+0xac>
 8009140:	4633      	mov	r3, r6
 8009142:	463a      	mov	r2, r7
 8009144:	4628      	mov	r0, r5
 8009146:	6a21      	ldr	r1, [r4, #32]
 8009148:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800914c:	47e0      	blx	ip
 800914e:	2800      	cmp	r0, #0
 8009150:	dc07      	bgt.n	8009162 <__sflush_r+0xf6>
 8009152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009162:	4407      	add	r7, r0
 8009164:	1a36      	subs	r6, r6, r0
 8009166:	e7e9      	b.n	800913c <__sflush_r+0xd0>
 8009168:	dfbffffe 	.word	0xdfbffffe

0800916c <_fflush_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	690b      	ldr	r3, [r1, #16]
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	b913      	cbnz	r3, 800917c <_fflush_r+0x10>
 8009176:	2500      	movs	r5, #0
 8009178:	4628      	mov	r0, r5
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	b118      	cbz	r0, 8009186 <_fflush_r+0x1a>
 800917e:	6a03      	ldr	r3, [r0, #32]
 8009180:	b90b      	cbnz	r3, 8009186 <_fflush_r+0x1a>
 8009182:	f7ff faa3 	bl	80086cc <__sinit>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f3      	beq.n	8009176 <_fflush_r+0xa>
 800918e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009190:	07d0      	lsls	r0, r2, #31
 8009192:	d404      	bmi.n	800919e <_fflush_r+0x32>
 8009194:	0599      	lsls	r1, r3, #22
 8009196:	d402      	bmi.n	800919e <_fflush_r+0x32>
 8009198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800919a:	f7ff fb9c 	bl	80088d6 <__retarget_lock_acquire_recursive>
 800919e:	4628      	mov	r0, r5
 80091a0:	4621      	mov	r1, r4
 80091a2:	f7ff ff63 	bl	800906c <__sflush_r>
 80091a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091a8:	4605      	mov	r5, r0
 80091aa:	07da      	lsls	r2, r3, #31
 80091ac:	d4e4      	bmi.n	8009178 <_fflush_r+0xc>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	059b      	lsls	r3, r3, #22
 80091b2:	d4e1      	bmi.n	8009178 <_fflush_r+0xc>
 80091b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091b6:	f7ff fb8f 	bl	80088d8 <__retarget_lock_release_recursive>
 80091ba:	e7dd      	b.n	8009178 <_fflush_r+0xc>

080091bc <__swbuf_r>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	460e      	mov	r6, r1
 80091c0:	4614      	mov	r4, r2
 80091c2:	4605      	mov	r5, r0
 80091c4:	b118      	cbz	r0, 80091ce <__swbuf_r+0x12>
 80091c6:	6a03      	ldr	r3, [r0, #32]
 80091c8:	b90b      	cbnz	r3, 80091ce <__swbuf_r+0x12>
 80091ca:	f7ff fa7f 	bl	80086cc <__sinit>
 80091ce:	69a3      	ldr	r3, [r4, #24]
 80091d0:	60a3      	str	r3, [r4, #8]
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	071a      	lsls	r2, r3, #28
 80091d6:	d501      	bpl.n	80091dc <__swbuf_r+0x20>
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	b943      	cbnz	r3, 80091ee <__swbuf_r+0x32>
 80091dc:	4621      	mov	r1, r4
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 f82a 	bl	8009238 <__swsetup_r>
 80091e4:	b118      	cbz	r0, 80091ee <__swbuf_r+0x32>
 80091e6:	f04f 37ff 	mov.w	r7, #4294967295
 80091ea:	4638      	mov	r0, r7
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	6922      	ldr	r2, [r4, #16]
 80091f2:	b2f6      	uxtb	r6, r6
 80091f4:	1a98      	subs	r0, r3, r2
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	4637      	mov	r7, r6
 80091fa:	4283      	cmp	r3, r0
 80091fc:	dc05      	bgt.n	800920a <__swbuf_r+0x4e>
 80091fe:	4621      	mov	r1, r4
 8009200:	4628      	mov	r0, r5
 8009202:	f7ff ffb3 	bl	800916c <_fflush_r>
 8009206:	2800      	cmp	r0, #0
 8009208:	d1ed      	bne.n	80091e6 <__swbuf_r+0x2a>
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	3b01      	subs	r3, #1
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	701e      	strb	r6, [r3, #0]
 8009218:	6962      	ldr	r2, [r4, #20]
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	429a      	cmp	r2, r3
 800921e:	d004      	beq.n	800922a <__swbuf_r+0x6e>
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	07db      	lsls	r3, r3, #31
 8009224:	d5e1      	bpl.n	80091ea <__swbuf_r+0x2e>
 8009226:	2e0a      	cmp	r6, #10
 8009228:	d1df      	bne.n	80091ea <__swbuf_r+0x2e>
 800922a:	4621      	mov	r1, r4
 800922c:	4628      	mov	r0, r5
 800922e:	f7ff ff9d 	bl	800916c <_fflush_r>
 8009232:	2800      	cmp	r0, #0
 8009234:	d0d9      	beq.n	80091ea <__swbuf_r+0x2e>
 8009236:	e7d6      	b.n	80091e6 <__swbuf_r+0x2a>

08009238 <__swsetup_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4b29      	ldr	r3, [pc, #164]	@ (80092e0 <__swsetup_r+0xa8>)
 800923c:	4605      	mov	r5, r0
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	460c      	mov	r4, r1
 8009242:	b118      	cbz	r0, 800924c <__swsetup_r+0x14>
 8009244:	6a03      	ldr	r3, [r0, #32]
 8009246:	b90b      	cbnz	r3, 800924c <__swsetup_r+0x14>
 8009248:	f7ff fa40 	bl	80086cc <__sinit>
 800924c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009250:	0719      	lsls	r1, r3, #28
 8009252:	d422      	bmi.n	800929a <__swsetup_r+0x62>
 8009254:	06da      	lsls	r2, r3, #27
 8009256:	d407      	bmi.n	8009268 <__swsetup_r+0x30>
 8009258:	2209      	movs	r2, #9
 800925a:	602a      	str	r2, [r5, #0]
 800925c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	e033      	b.n	80092d0 <__swsetup_r+0x98>
 8009268:	0758      	lsls	r0, r3, #29
 800926a:	d512      	bpl.n	8009292 <__swsetup_r+0x5a>
 800926c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800926e:	b141      	cbz	r1, 8009282 <__swsetup_r+0x4a>
 8009270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <__swsetup_r+0x46>
 8009278:	4628      	mov	r0, r5
 800927a:	f7ff fb2f 	bl	80088dc <_free_r>
 800927e:	2300      	movs	r3, #0
 8009280:	6363      	str	r3, [r4, #52]	@ 0x34
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	2300      	movs	r3, #0
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f043 0308 	orr.w	r3, r3, #8
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	b94b      	cbnz	r3, 80092b2 <__swsetup_r+0x7a>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a8:	d003      	beq.n	80092b2 <__swsetup_r+0x7a>
 80092aa:	4621      	mov	r1, r4
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 f85c 	bl	800936a <__smakebuf_r>
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	f013 0201 	ands.w	r2, r3, #1
 80092ba:	d00a      	beq.n	80092d2 <__swsetup_r+0x9a>
 80092bc:	2200      	movs	r2, #0
 80092be:	60a2      	str	r2, [r4, #8]
 80092c0:	6962      	ldr	r2, [r4, #20]
 80092c2:	4252      	negs	r2, r2
 80092c4:	61a2      	str	r2, [r4, #24]
 80092c6:	6922      	ldr	r2, [r4, #16]
 80092c8:	b942      	cbnz	r2, 80092dc <__swsetup_r+0xa4>
 80092ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ce:	d1c5      	bne.n	800925c <__swsetup_r+0x24>
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	0799      	lsls	r1, r3, #30
 80092d4:	bf58      	it	pl
 80092d6:	6962      	ldrpl	r2, [r4, #20]
 80092d8:	60a2      	str	r2, [r4, #8]
 80092da:	e7f4      	b.n	80092c6 <__swsetup_r+0x8e>
 80092dc:	2000      	movs	r0, #0
 80092de:	e7f7      	b.n	80092d0 <__swsetup_r+0x98>
 80092e0:	20000020 	.word	0x20000020

080092e4 <_sbrk_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	2300      	movs	r3, #0
 80092e8:	4d05      	ldr	r5, [pc, #20]	@ (8009300 <_sbrk_r+0x1c>)
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f7 f8ea 	bl	80004c8 <_sbrk>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_sbrk_r+0x1a>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_sbrk_r+0x1a>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000678 	.word	0x20000678

08009304 <memchr>:
 8009304:	4603      	mov	r3, r0
 8009306:	b510      	push	{r4, lr}
 8009308:	b2c9      	uxtb	r1, r1
 800930a:	4402      	add	r2, r0
 800930c:	4293      	cmp	r3, r2
 800930e:	4618      	mov	r0, r3
 8009310:	d101      	bne.n	8009316 <memchr+0x12>
 8009312:	2000      	movs	r0, #0
 8009314:	e003      	b.n	800931e <memchr+0x1a>
 8009316:	7804      	ldrb	r4, [r0, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	428c      	cmp	r4, r1
 800931c:	d1f6      	bne.n	800930c <memchr+0x8>
 800931e:	bd10      	pop	{r4, pc}

08009320 <__swhatbuf_r>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	460c      	mov	r4, r1
 8009324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009328:	4615      	mov	r5, r2
 800932a:	2900      	cmp	r1, #0
 800932c:	461e      	mov	r6, r3
 800932e:	b096      	sub	sp, #88	@ 0x58
 8009330:	da0c      	bge.n	800934c <__swhatbuf_r+0x2c>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	2100      	movs	r1, #0
 8009336:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800933a:	bf14      	ite	ne
 800933c:	2340      	movne	r3, #64	@ 0x40
 800933e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009342:	2000      	movs	r0, #0
 8009344:	6031      	str	r1, [r6, #0]
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	b016      	add	sp, #88	@ 0x58
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	466a      	mov	r2, sp
 800934e:	f000 f849 	bl	80093e4 <_fstat_r>
 8009352:	2800      	cmp	r0, #0
 8009354:	dbed      	blt.n	8009332 <__swhatbuf_r+0x12>
 8009356:	9901      	ldr	r1, [sp, #4]
 8009358:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800935c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009360:	4259      	negs	r1, r3
 8009362:	4159      	adcs	r1, r3
 8009364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009368:	e7eb      	b.n	8009342 <__swhatbuf_r+0x22>

0800936a <__smakebuf_r>:
 800936a:	898b      	ldrh	r3, [r1, #12]
 800936c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800936e:	079d      	lsls	r5, r3, #30
 8009370:	4606      	mov	r6, r0
 8009372:	460c      	mov	r4, r1
 8009374:	d507      	bpl.n	8009386 <__smakebuf_r+0x1c>
 8009376:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	2301      	movs	r3, #1
 8009380:	6163      	str	r3, [r4, #20]
 8009382:	b003      	add	sp, #12
 8009384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009386:	466a      	mov	r2, sp
 8009388:	ab01      	add	r3, sp, #4
 800938a:	f7ff ffc9 	bl	8009320 <__swhatbuf_r>
 800938e:	9f00      	ldr	r7, [sp, #0]
 8009390:	4605      	mov	r5, r0
 8009392:	4639      	mov	r1, r7
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff fb0b 	bl	80089b0 <_malloc_r>
 800939a:	b948      	cbnz	r0, 80093b0 <__smakebuf_r+0x46>
 800939c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a0:	059a      	lsls	r2, r3, #22
 80093a2:	d4ee      	bmi.n	8009382 <__smakebuf_r+0x18>
 80093a4:	f023 0303 	bic.w	r3, r3, #3
 80093a8:	f043 0302 	orr.w	r3, r3, #2
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	e7e2      	b.n	8009376 <__smakebuf_r+0xc>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	b15b      	cbz	r3, 80093da <__smakebuf_r+0x70>
 80093c2:	4630      	mov	r0, r6
 80093c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093c8:	f000 f81e 	bl	8009408 <_isatty_r>
 80093cc:	b128      	cbz	r0, 80093da <__smakebuf_r+0x70>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f023 0303 	bic.w	r3, r3, #3
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	431d      	orrs	r5, r3
 80093de:	81a5      	strh	r5, [r4, #12]
 80093e0:	e7cf      	b.n	8009382 <__smakebuf_r+0x18>
	...

080093e4 <_fstat_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	2300      	movs	r3, #0
 80093e8:	4d06      	ldr	r5, [pc, #24]	@ (8009404 <_fstat_r+0x20>)
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	4611      	mov	r1, r2
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	f7f7 f843 	bl	800047c <_fstat>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d102      	bne.n	8009400 <_fstat_r+0x1c>
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	b103      	cbz	r3, 8009400 <_fstat_r+0x1c>
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20000678 	.word	0x20000678

08009408 <_isatty_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	2300      	movs	r3, #0
 800940c:	4d05      	ldr	r5, [pc, #20]	@ (8009424 <_isatty_r+0x1c>)
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f7 f841 	bl	800049a <_isatty>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_isatty_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_isatty_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000678 	.word	0x20000678

08009428 <_init>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr

08009434 <_fini>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	bf00      	nop
 8009438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943a:	bc08      	pop	{r3}
 800943c:	469e      	mov	lr, r3
 800943e:	4770      	bx	lr
