
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  0800510c  0800510c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d410  0800d410  00009410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d450  0800d450  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d450  0800d450  0000a01c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d450  0800d450  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d450  0800d450  00009450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d454  0800d454  00009454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800d458  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  2000001c  0800d474  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800d474  0000a8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d8c  00000000  00000000  0000a045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037aa  00000000  00000000  0001add1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bce  00000000  00000000  0001f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1a5  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191c1  00000000  00000000  0003b2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008959c  00000000  00000000  00054494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dda30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000dda74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e17ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	@ (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	2000001c 	.word	0x2000001c
 8005128:	00000000 	.word	0x00000000
 800512c:	0800d3f8 	.word	0x0800d3f8

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	@ (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000020 	.word	0x20000020
 8005148:	0800d3f8 	.word	0x0800d3f8

0800514c <apInit>:




void apInit(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8005150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005154:	2000      	movs	r0, #0
 8005156:	f000 fb93 	bl	8005880 <uartOpen>
  uartOpen(_DEF_UART2, 57600);
 800515a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800515e:	2001      	movs	r0, #1
 8005160:	f000 fb8e 	bl	8005880 <uartOpen>
}
 8005164:	bf00      	nop
 8005166:	bd80      	pop	{r7, pc}

08005168 <apMain>:

// gcc 계열에서 printf 함수를 사용하려면 syscallback 추가하면 된다.

void apMain(void) //main.c를 최소화하고 ap에서 모든 상위 작업을 진행한다.
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint16_t target = 500;
 800516e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005172:	807b      	strh	r3, [r7, #2]
  pre_time = millis();
 8005174:	f000 f855 	bl	8005222 <millis>
 8005178:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis() - pre_time >= target)
 800517a:	f000 f852 	bl	8005222 <millis>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	429a      	cmp	r2, r3
 8005188:	d305      	bcc.n	8005196 <apMain+0x2e>
    {
      pre_time = millis();
 800518a:	f000 f84a 	bl	8005222 <millis>
 800518e:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8005190:	2000      	movs	r0, #0
 8005192:	f000 fa9f 	bl	80056d4 <ledToggle>
    }
    if (buttonGetPressed(_DEF_BUTTON1) == true)
 8005196:	2000      	movs	r0, #0
 8005198:	f000 f9f2 	bl	8005580 <buttonGetPressed>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0eb      	beq.n	800517a <apMain+0x12>
    {
      target = 200;
 80051a2:	23c8      	movs	r3, #200	@ 0xc8
 80051a4:	807b      	strh	r3, [r7, #2]
    if (millis() - pre_time >= target)
 80051a6:	e7e8      	b.n	800517a <apMain+0x12>

080051a8 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
  HAL_Init();
 80051ae:	f000 fcdd 	bl	8005b6c <HAL_Init>
  SystemClock_Config();
 80051b2:	f000 f83d 	bl	8005230 <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE(); // gpio 수정시 복사
 80051b6:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <bspInit+0x60>)
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <bspInit+0x60>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6193      	str	r3, [r2, #24]
 80051c2:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <bspInit+0x60>)
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <bspInit+0x60>)
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <bspInit+0x60>)
 80051d4:	f043 0320 	orr.w	r3, r3, #32
 80051d8:	6193      	str	r3, [r2, #24]
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <bspInit+0x60>)
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE(); // gpio 수정시 복사
 80051e6:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <bspInit+0x60>)
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	4a07      	ldr	r2, [pc, #28]	@ (8005208 <bspInit+0x60>)
 80051ec:	f043 0310 	orr.w	r3, r3, #16
 80051f0:	6193      	str	r3, [r2, #24]
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <bspInit+0x60>)
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]

  //MX_USB_DEVICE_Init();

}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000

0800520c <delay>:

void delay(uint32_t ms)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd0b 	bl	8005c30 <HAL_Delay>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <millis>:

uint32_t millis(void)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	af00      	add	r7, sp, #0
  return HAL_GetTick(); //sysTick에서 증가하는 uwTick 값을 가져옴
 8005226:	f000 fcf9 	bl	8005c1c <HAL_GetTick>
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}

08005230 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b094      	sub	sp, #80	@ 0x50
 8005234:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800523a:	2228      	movs	r2, #40	@ 0x28
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f008 f8ad 	bl	800d39e <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	60da      	str	r2, [r3, #12]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005260:	2305      	movs	r3, #5
 8005262:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800526a:	2300      	movs	r3, #0
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800526e:	2301      	movs	r3, #1
 8005270:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005272:	2301      	movs	r3, #1
 8005274:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005276:	2302      	movs	r3, #2
 8005278:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800527a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005280:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005284:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005286:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800528a:	4618      	mov	r0, r3
 800528c:	f002 ff6a 	bl	8008164 <HAL_RCC_OscConfig>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <SystemClock_Config+0x6a>
{
  Error_Handler();
 8005296:	f000 f82a 	bl	80052ee <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800529a:	230f      	movs	r3, #15
 800529c:	617b      	str	r3, [r7, #20]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800529e:	2302      	movs	r3, #2
 80052a0:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80052a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052aa:	623b      	str	r3, [r7, #32]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052ac:	2300      	movs	r3, #0
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80052b0:	f107 0314 	add.w	r3, r7, #20
 80052b4:	2102      	movs	r1, #2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f003 f9d6 	bl	8008668 <HAL_RCC_ClockConfig>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <SystemClock_Config+0x96>
{
  Error_Handler();
 80052c2:	f000 f814 	bl	80052ee <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80052c6:	2311      	movs	r3, #17
 80052c8:	607b      	str	r3, [r7, #4]
PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80052ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052ce:	60bb      	str	r3, [r7, #8]
PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 fb54 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <SystemClock_Config+0xb6>
{
  Error_Handler();
 80052e2:	f000 f804 	bl	80052ee <Error_Handler>
}
}
 80052e6:	bf00      	nop
 80052e8:	3750      	adds	r7, #80	@ 0x50
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052f2:	b672      	cpsid	i
}
 80052f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <Error_Handler+0x8>
	...

080052fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_MspInit+0x5c>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	4a14      	ldr	r2, [pc, #80]	@ (8005358 <HAL_MspInit+0x5c>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6193      	str	r3, [r2, #24]
 800530e:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_MspInit+0x5c>)
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <HAL_MspInit+0x5c>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4a0e      	ldr	r2, [pc, #56]	@ (8005358 <HAL_MspInit+0x5c>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005324:	61d3      	str	r3, [r2, #28]
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <HAL_MspInit+0x5c>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <HAL_MspInit+0x60>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_MspInit+0x60>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	40021000 	.word	0x40021000
 800535c:	40010000 	.word	0x40010000

08005360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <NMI_Handler+0x4>

08005368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <HardFault_Handler+0x4>

08005370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <MemManage_Handler+0x4>

08005378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <BusFault_Handler+0x4>

08005380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <UsageFault_Handler+0x4>

08005388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005398:	bf00      	nop
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053b0:	f000 fc22 	bl	8005bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <DMA1_Channel5_IRQHandler+0x10>)
 80053be:	f000 ff65 	bl	800628c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200005c0 	.word	0x200005c0

080053cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80053d0:	4802      	ldr	r0, [pc, #8]	@ (80053dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80053d2:	f001 fb17 	bl	8006a04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2000060c 	.word	0x2000060c

080053e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053e4:	4802      	ldr	r0, [pc, #8]	@ (80053f0 <USART1_IRQHandler+0x10>)
 80053e6:	f003 fe45 	bl	8009074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000578 	.word	0x20000578

080053f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80053f8:	4b03      	ldr	r3, [pc, #12]	@ (8005408 <SystemInit+0x14>)
 80053fa:	4a04      	ldr	r2, [pc, #16]	@ (800540c <SystemInit+0x18>)
 80053fc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	e000ed00 	.word	0xe000ed00
 800540c:	08005000 	.word	0x08005000

08005410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005410:	f7ff fff0 	bl	80053f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005414:	480b      	ldr	r0, [pc, #44]	@ (8005444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005416:	490c      	ldr	r1, [pc, #48]	@ (8005448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005418:	4a0c      	ldr	r2, [pc, #48]	@ (800544c <LoopFillZerobss+0x16>)
  movs r3, #0
 800541a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800541c:	e002      	b.n	8005424 <LoopCopyDataInit>

0800541e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800541e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005422:	3304      	adds	r3, #4

08005424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005428:	d3f9      	bcc.n	800541e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800542a:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800542c:	4c09      	ldr	r4, [pc, #36]	@ (8005454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800542e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005430:	e001      	b.n	8005436 <LoopFillZerobss>

08005432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005434:	3204      	adds	r2, #4

08005436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005438:	d3fb      	bcc.n	8005432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800543a:	f007 ffb9 	bl	800d3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800543e:	f007 ffa3 	bl	800d388 <main>
  bx lr
 8005442:	4770      	bx	lr
  ldr r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005448:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800544c:	0800d458 	.word	0x0800d458
  ldr r2, =_sbss
 8005450:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8005454:	200008e4 	.word	0x200008e4

08005458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005458:	e7fe      	b.n	8005458 <ADC1_2_IRQHandler>

0800545a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]


  p_node->in = 0;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf; // buff가 null인 경우 index만 관리한다. 실제 data를 관리하는게 아니라.
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	60da      	str	r2, [r3, #12]

  return ret;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800548e:	b480      	push	{r7}
 8005490:	b089      	sub	sp, #36	@ 0x24
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;

  for(int i=0; i<length; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e027      	b.n	80054f4 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len; // 다음 in index를 구해서 buf가 비어있는지 확인
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	6892      	ldr	r2, [r2, #8]
 80054ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80054b2:	fb01 f202 	mul.w	r2, r1, r2
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

    if(next_in != p_node->out)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d011      	beq.n	80054e8 <qbufferWrite+0x5a>
    {
      if(p_node->p_buf != NULL) // buf가 NULL이 아니면 write 한다.
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	440b      	add	r3, r1
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in; // NULL인 경우에는 index만 관리한다.
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e002      	b.n	80054ee <qbufferWrite+0x60>
    }
    else // buffer가 꽉차있으면 break
    {
      ret = false;
 80054e8:	2300      	movs	r3, #0
 80054ea:	77fb      	strb	r3, [r7, #31]
      break;
 80054ec:	e006      	b.n	80054fc <qbufferWrite+0x6e>
  for(int i=0; i<length; i++)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	3301      	adds	r3, #1
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d8d3      	bhi.n	80054a4 <qbufferWrite+0x16>
    }
  }


  return ret;
 80054fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	@ 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <buttonInit>:
    {
        {GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET}
    };

void buttonInit(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550e:	1d3b      	adds	r3, r7, #4
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800551a:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <buttonInit+0x70>)
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <buttonInit+0x70>)
 8005520:	f043 0310 	orr.w	r3, r3, #16
 8005524:	6193      	str	r3, [r2, #24]
 8005526:	4b14      	ldr	r3, [pc, #80]	@ (8005578 <buttonInit+0x70>)
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // led 공통 설정 요소
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553a:	2302      	movs	r3, #2
 800553c:	613b      	str	r3, [r7, #16]

  for (int i =0; i<BUTTON_MAX_CH; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e011      	b.n	8005568 <buttonInit+0x60>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8005544:	4a0d      	ldr	r2, [pc, #52]	@ (800557c <buttonInit+0x74>)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	889b      	ldrh	r3, [r3, #4]
 800554e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <buttonInit+0x74>)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005558:	1d3a      	adds	r2, r7, #4
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 ffc9 	bl	80064f4 <HAL_GPIO_Init>
  for (int i =0; i<BUTTON_MAX_CH; i++)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3301      	adds	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	ddea      	ble.n	8005544 <buttonInit+0x3c>
  }

}
 800556e:	bf00      	nop
 8005570:	bf00      	nop
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000
 800557c:	20000004 	.word	0x20000004

08005580 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  if(HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == GPIO_PIN_RESET)
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <buttonGetPressed+0x3c>)
 8005592:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4908      	ldr	r1, [pc, #32]	@ (80055bc <buttonGetPressed+0x3c>)
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	889b      	ldrh	r3, [r3, #4]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f001 f9e6 	bl	8006974 <HAL_GPIO_ReadPin>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <buttonGetPressed+0x32>
  {
    ret = true;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000004 	.word	0x20000004

080055c0 <flashInit>:
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);



bool flashInit(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	e012      	b.n	80055f2 <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x8000000 + i*1024;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	4619      	mov	r1, r3
 80055d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005604 <flashInit+0x44>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = 1024;
 80055de:	4a09      	ldr	r2, [pc, #36]	@ (8005604 <flashInit+0x44>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ea:	809a      	strh	r2, [r3, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3301      	adds	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055f6:	dde9      	ble.n	80055cc <flashInit+0xc>
  }

  return true;
 80055f8:	2301      	movs	r3, #1
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	20000038 	.word	0x20000038

08005608 <ledInit>:
    };



bool ledInit(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
  bool ret = true;
 800560e:	2301      	movs	r3, #1
 8005610:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <ledInit+0x84>)
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	4a19      	ldr	r2, [pc, #100]	@ (800568c <ledInit+0x84>)
 8005626:	f043 0304 	orr.w	r3, r3, #4
 800562a:	6193      	str	r3, [r2, #24]
 800562c:	4b17      	ldr	r3, [pc, #92]	@ (800568c <ledInit+0x84>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // led 공통 설정 요소
 8005638:	2301      	movs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005640:	2302      	movs	r3, #2
 8005642:	617b      	str	r3, [r7, #20]

  for (int i =0; i<LED_MAX_CH; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e017      	b.n	800567a <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800564a:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <ledInit+0x88>)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	889b      	ldrh	r3, [r3, #4]
 8005654:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8005656:	4a0e      	ldr	r2, [pc, #56]	@ (8005690 <ledInit+0x88>)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800565e:	f107 0208 	add.w	r2, r7, #8
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 ff45 	bl	80064f4 <HAL_GPIO_Init>

    ledOff(i);
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f810 	bl	8005694 <ledOff>
  for (int i =0; i<LED_MAX_CH; i++)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dde4      	ble.n	800564a <ledInit+0x42>
  }

  return ret;
 8005680:	7efb      	ldrb	r3, [r7, #27]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000
 8005690:	2000000c 	.word	0x2000000c

08005694 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d111      	bne.n	80056c8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <ledOff+0x3c>)
 80056a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	4a08      	ldr	r2, [pc, #32]	@ (80056d0 <ledOff+0x3c>)
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	8899      	ldrh	r1, [r3, #4]
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	4a05      	ldr	r2, [pc, #20]	@ (80056d0 <ledOff+0x3c>)
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	79db      	ldrb	r3, [r3, #7]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f001 f96e 	bl	80069a2 <HAL_GPIO_WritePin>
 80056c6:	e000      	b.n	80056ca <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80056c8:	bf00      	nop
}
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <ledToggle+0x34>)
 80056e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	4906      	ldr	r1, [pc, #24]	@ (8005708 <ledToggle+0x34>)
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	889b      	ldrh	r3, [r3, #4]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f001 f96a 	bl	80069d2 <HAL_GPIO_TogglePin>
 80056fe:	e000      	b.n	8005702 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8005700:	bf00      	nop
}
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000000c 	.word	0x2000000c

0800570c <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
  bool ret = true;
 8005712:	2301      	movs	r3, #1
 8005714:	71fb      	strb	r3, [r7, #7]


  // reset 핀이 눌렸다면
  if(RCC->CSR & (1<<26))
 8005716:	4b11      	ldr	r3, [pc, #68]	@ (800575c <resetInit+0x50>)
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1); // 자기 자신을 1 증가한다.
 8005722:	2001      	movs	r0, #1
 8005724:	f000 f84e 	bl	80057c4 <rtcBackupRegRead>
 8005728:	4603      	mov	r3, r0
 800572a:	3301      	adds	r3, #1
 800572c:	4619      	mov	r1, r3
 800572e:	2001      	movs	r0, #1
 8005730:	f000 f858 	bl	80057e4 <rtcBackupRegWrite>
    delay(500); // 500ms 안에 누르면 rtcBackupReg가 증가한다.
 8005734:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005738:	f7ff fd68 	bl	800520c <delay>
    reset_count = rtcBackupRegRead(1);
 800573c:	2001      	movs	r0, #1
 800573e:	f000 f841 	bl	80057c4 <rtcBackupRegRead>
 8005742:	4603      	mov	r3, r0
 8005744:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <resetInit+0x54>)
 8005746:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0); // 다음에도 0부터 시작을 위해 초기화, backupreg는 1부터 시작
 8005748:	2100      	movs	r1, #0
 800574a:	2001      	movs	r0, #1
 800574c:	f000 f84a 	bl	80057e4 <rtcBackupRegWrite>

  return ret;
 8005750:	79fb      	ldrb	r3, [r7, #7]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	20000438 	.word	0x20000438

08005764 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
  bool ret = true;
 800576a:	2301      	movs	r3, #1
 800576c:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <rtcInit+0x54>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <rtcInit+0x54>)
 8005774:	f043 0310 	orr.w	r3, r3, #16
 8005778:	6193      	str	r3, [r2, #24]
 800577a:	4b0f      	ldr	r3, [pc, #60]	@ (80057b8 <rtcInit+0x54>)
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance           = RTC;
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <rtcInit+0x58>)
 8005788:	4a0d      	ldr	r2, [pc, #52]	@ (80057c0 <rtcInit+0x5c>)
 800578a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <rtcInit+0x58>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8005794:	4b09      	ldr	r3, [pc, #36]	@ (80057bc <rtcInit+0x58>)
 8005796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800579a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800579c:	4807      	ldr	r0, [pc, #28]	@ (80057bc <rtcInit+0x58>)
 800579e:	f003 fa5d 	bl	8008c5c <HAL_RTC_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <rtcInit+0x48>
  {
    Error_Handler();
 80057a8:	f7ff fda1 	bl	80052ee <Error_Handler>
  }


  return ret;
 80057ac:	79fb      	ldrb	r3, [r7, #7]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000
 80057bc:	2000043c 	.word	0x2000043c
 80057c0:	40002800 	.word	0x40002800

080057c4 <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4804      	ldr	r0, [pc, #16]	@ (80057e0 <rtcBackupRegRead+0x1c>)
 80057d0:	f003 fb68 	bl	8008ea4 <HAL_RTCEx_BKUPRead>
 80057d4:	4603      	mov	r3, r0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2000043c 	.word	0x2000043c

080057e4 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data) // 16 bit reserved 16 bit data
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4803      	ldr	r0, [pc, #12]	@ (8005800 <rtcBackupRegWrite+0x1c>)
 80057f4:	f003 fb3c 	bl	8008e70 <HAL_RTCEx_BKUPWrite>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	2000043c 	.word	0x2000043c

08005804 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0b      	ldr	r2, [pc, #44]	@ (8005840 <HAL_RTC_MspInit+0x3c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d110      	bne.n	8005838 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005816:	f002 fc99 	bl	800814c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800581a:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <HAL_RTC_MspInit+0x40>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	4a09      	ldr	r2, [pc, #36]	@ (8005844 <HAL_RTC_MspInit+0x40>)
 8005820:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005824:	61d3      	str	r3, [r2, #28]
 8005826:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <HAL_RTC_MspInit+0x40>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005832:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RTC_MspInit+0x44>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40002800 	.word	0x40002800
 8005844:	40021000 	.word	0x40021000
 8005848:	4242043c 	.word	0x4242043c

0800584c <uartInit>:




bool uartInit(void)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	e007      	b.n	8005868 <uartInit+0x1c>
  {
    is_open[i] = false;
 8005858:	4a08      	ldr	r2, [pc, #32]	@ (800587c <uartInit+0x30>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3301      	adds	r3, #1
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	ddf4      	ble.n	8005858 <uartInit+0xc>
  }

  return true;
 800586e:	2301      	movs	r3, #1
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000450 	.word	0x20000450

08005880 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <uartOpen+0x1c>
 8005896:	2b01      	cmp	r3, #1
 8005898:	d007      	beq.n	80058aa <uartOpen+0x2a>
 800589a:	e074      	b.n	8005986 <uartOpen+0x106>
  {
    case _DEF_UART1: // usb cdc
      is_open[ch] = true;
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a3c      	ldr	r2, [pc, #240]	@ (8005990 <uartOpen+0x110>)
 80058a0:	2101      	movs	r1, #1
 80058a2:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
      break;
 80058a8:	e06d      	b.n	8005986 <uartOpen+0x106>

    case _DEF_UART2:
          huart1.Instance         = USART1;
 80058aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005994 <uartOpen+0x114>)
 80058ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005998 <uartOpen+0x118>)
 80058ae:	601a      	str	r2, [r3, #0]
          huart1.Init.BaudRate    = baud;
 80058b0:	4a38      	ldr	r2, [pc, #224]	@ (8005994 <uartOpen+0x114>)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6053      	str	r3, [r2, #4]
          huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80058b6:	4b37      	ldr	r3, [pc, #220]	@ (8005994 <uartOpen+0x114>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
          huart1.Init.StopBits    = UART_STOPBITS_1;
 80058bc:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <uartOpen+0x114>)
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
          huart1.Init.Parity      = UART_PARITY_NONE;
 80058c2:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <uartOpen+0x114>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]
          huart1.Init.Mode        = UART_MODE_TX_RX;
 80058c8:	4b32      	ldr	r3, [pc, #200]	@ (8005994 <uartOpen+0x114>)
 80058ca:	220c      	movs	r2, #12
 80058cc:	615a      	str	r2, [r3, #20]
          huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80058ce:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <uartOpen+0x114>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
          huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 80058d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005994 <uartOpen+0x114>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	61da      	str	r2, [r3, #28]


          HAL_UART_DeInit(&huart1);// usb 터미널 쪽에서 baud를 바꾸는 경우 다시 uart를 재 오픈해야한다,
 80058da:	482e      	ldr	r0, [pc, #184]	@ (8005994 <uartOpen+0x114>)
 80058dc:	f003 fb4e 	bl	8008f7c <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buff[0], 256);
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	4a2d      	ldr	r2, [pc, #180]	@ (800599c <uartOpen+0x11c>)
 80058e6:	4413      	add	r3, r2
 80058e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058ec:	492c      	ldr	r1, [pc, #176]	@ (80059a0 <uartOpen+0x120>)
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fdb3 	bl	800545a <qbufferCreate>

          /* DMA controller clock enable */
          __HAL_RCC_DMA1_CLK_ENABLE();
 80058f4:	4b2b      	ldr	r3, [pc, #172]	@ (80059a4 <uartOpen+0x124>)
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	@ (80059a4 <uartOpen+0x124>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6153      	str	r3, [r2, #20]
 8005900:	4b28      	ldr	r3, [pc, #160]	@ (80059a4 <uartOpen+0x124>)
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	68bb      	ldr	r3, [r7, #8]

          /* DMA interrupt init */
          /* DMA1_Channel5_IRQn interrupt configuration */
          HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	200f      	movs	r0, #15
 8005912:	f000 faac 	bl	8005e6e <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005916:	200f      	movs	r0, #15
 8005918:	f000 fac5 	bl	8005ea6 <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart1) != HAL_OK)
 800591c:	481d      	ldr	r0, [pc, #116]	@ (8005994 <uartOpen+0x114>)
 800591e:	f003 fadd 	bl	8008edc <HAL_UART_Init>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <uartOpen+0xae>
          {
            ret = false;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
             * if (HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK) // rx_data[_DEF_UART2]에 1byte를 받고 callback 함수 실행
              {
                ret = false;
              }*/
          }
          break;
 800592c:	e02a      	b.n	8005984 <uartOpen+0x104>
            ret = true;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <uartOpen+0x110>)
 8005936:	2101      	movs	r1, #1
 8005938:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buff[0], 256) != HAL_OK) // circular 방식이라 자동으로 다시 순환
 800593a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800593e:	4918      	ldr	r1, [pc, #96]	@ (80059a0 <uartOpen+0x120>)
 8005940:	4814      	ldr	r0, [pc, #80]	@ (8005994 <uartOpen+0x114>)
 8005942:	f003 fb72 	bl	800902a <HAL_UART_Receive_DMA>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <uartOpen+0xd0>
              ret = false;
 800594c:	2300      	movs	r3, #0
 800594e:	73fb      	strb	r3, [r7, #15]
            qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	4a12      	ldr	r2, [pc, #72]	@ (800599c <uartOpen+0x11c>)
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	4413      	add	r3, r2
 8005958:	3308      	adds	r3, #8
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	4b12      	ldr	r3, [pc, #72]	@ (80059a8 <uartOpen+0x128>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	1a8a      	subs	r2, r1, r2
 8005966:	490d      	ldr	r1, [pc, #52]	@ (800599c <uartOpen+0x11c>)
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	440b      	add	r3, r1
 800596c:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 800596e:	79fa      	ldrb	r2, [r7, #7]
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	490a      	ldr	r1, [pc, #40]	@ (800599c <uartOpen+0x11c>)
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	440a      	add	r2, r1
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	4908      	ldr	r1, [pc, #32]	@ (800599c <uartOpen+0x11c>)
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	440b      	add	r3, r1
 8005980:	3304      	adds	r3, #4
 8005982:	601a      	str	r2, [r3, #0]
          break;
 8005984:	bf00      	nop
  }

  return ret;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000450 	.word	0x20000450
 8005994:	20000578 	.word	0x20000578
 8005998:	40013800 	.word	0x40013800
 800599c:	20000454 	.word	0x20000454
 80059a0:	20000474 	.word	0x20000474
 80059a4:	40021000 	.word	0x40021000
 80059a8:	200005c0 	.word	0x200005c0

080059ac <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_UART_RxCpltCallback>:

/*interrupt 방식은 interrupt가 너무 많이 걸려서 고속의 통신에서는 buffer가 덮어 씌여져 DMA 방식이 좋다.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // weak 함수를 같은 파일을 다른 곳에서 정의하면 그 함수가 호출된다.
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <HAL_UART_RxCpltCallback+0x30>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d109      	bne.n	80059e6 <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1); // 수신된 1byte를 buffer에 write한다.
 80059d2:	2201      	movs	r2, #1
 80059d4:	4907      	ldr	r1, [pc, #28]	@ (80059f4 <HAL_UART_RxCpltCallback+0x34>)
 80059d6:	4808      	ldr	r0, [pc, #32]	@ (80059f8 <HAL_UART_RxCpltCallback+0x38>)
 80059d8:	f7ff fd59 	bl	800548e <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1); // 호출되고 interrupt를 다 꺼버려서 다시 호출해 1byte를 받는다.
 80059dc:	2201      	movs	r2, #1
 80059de:	4905      	ldr	r1, [pc, #20]	@ (80059f4 <HAL_UART_RxCpltCallback+0x34>)
 80059e0:	4806      	ldr	r0, [pc, #24]	@ (80059fc <HAL_UART_RxCpltCallback+0x3c>)
 80059e2:	f003 fafd 	bl	8008fe0 <HAL_UART_Receive_IT>

  }
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40013800 	.word	0x40013800
 80059f4:	20000575 	.word	0x20000575
 80059f8:	20000464 	.word	0x20000464
 80059fc:	20000578 	.word	0x20000578

08005a00 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <HAL_UART_MspInit+0xe8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d15f      	bne.n	8005ae0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a20:	4b32      	ldr	r3, [pc, #200]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	4a31      	ldr	r2, [pc, #196]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a2a:	6193      	str	r3, [r2, #24]
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a38:	4b2c      	ldr	r3, [pc, #176]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	6193      	str	r3, [r2, #24]
 8005a44:	4b29      	ldr	r3, [pc, #164]	@ (8005aec <HAL_UART_MspInit+0xec>)
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a5e:	f107 0310 	add.w	r3, r7, #16
 8005a62:	4619      	mov	r1, r3
 8005a64:	4822      	ldr	r0, [pc, #136]	@ (8005af0 <HAL_UART_MspInit+0xf0>)
 8005a66:	f000 fd45 	bl	80064f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a70:	2302      	movs	r3, #2
 8005a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a74:	2303      	movs	r3, #3
 8005a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	481c      	ldr	r0, [pc, #112]	@ (8005af0 <HAL_UART_MspInit+0xf0>)
 8005a80:	f000 fd38 	bl	80064f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005a84:	4b1b      	ldr	r3, [pc, #108]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005a86:	4a1c      	ldr	r2, [pc, #112]	@ (8005af8 <HAL_UART_MspInit+0xf8>)
 8005a88:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a90:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a96:	4b17      	ldr	r3, [pc, #92]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005a98:	2280      	movs	r2, #128	@ 0x80
 8005a9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a9c:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005aa8:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005aaa:	2220      	movs	r2, #32
 8005aac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005aae:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005ab4:	480f      	ldr	r0, [pc, #60]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005ab6:	f000 fa1f 	bl	8005ef8 <HAL_DMA_Init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005ac0:	f7ff fc15 	bl	80052ee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005aca:	4a0a      	ldr	r2, [pc, #40]	@ (8005af4 <HAL_UART_MspInit+0xf4>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2025      	movs	r0, #37	@ 0x25
 8005ad6:	f000 f9ca 	bl	8005e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ada:	2025      	movs	r0, #37	@ 0x25
 8005adc:	f000 f9e3 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40010800 	.word	0x40010800
 8005af4:	200005c0 	.word	0x200005c0
 8005af8:	40020058 	.word	0x40020058

08005afc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0c      	ldr	r2, [pc, #48]	@ (8005b3c <HAL_UART_MspDeInit+0x40>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d112      	bne.n	8005b34 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <HAL_UART_MspDeInit+0x44>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	4a0b      	ldr	r2, [pc, #44]	@ (8005b40 <HAL_UART_MspDeInit+0x44>)
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b18:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 8005b1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b1e:	4809      	ldr	r0, [pc, #36]	@ (8005b44 <HAL_UART_MspDeInit+0x48>)
 8005b20:	f000 fe6c 	bl	80067fc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fa3f 	bl	8005fac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005b2e:	2025      	movs	r0, #37	@ 0x25
 8005b30:	f000 f9c7 	bl	8005ec2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40013800 	.word	0x40013800
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40010800 	.word	0x40010800

08005b48 <hwInit>:




void hwInit(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  bspInit();
 8005b4c:	f7ff fb2c 	bl	80051a8 <bspInit>
  rtcInit();
 8005b50:	f7ff fe08 	bl	8005764 <rtcInit>

  resetInit();
 8005b54:	f7ff fdda 	bl	800570c <resetInit>
  ledInit();
 8005b58:	f7ff fd56 	bl	8005608 <ledInit>
  uartInit();
 8005b5c:	f7ff fe76 	bl	800584c <uartInit>
  flashInit();
 8005b60:	f7ff fd2e 	bl	80055c0 <flashInit>
  buttonInit();
 8005b64:	f7ff fcd0 	bl	8005508 <buttonInit>
}
 8005b68:	bf00      	nop
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <HAL_Init+0x28>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a07      	ldr	r2, [pc, #28]	@ (8005b94 <HAL_Init+0x28>)
 8005b76:	f043 0310 	orr.w	r3, r3, #16
 8005b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	f000 f96b 	bl	8005e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b82:	200f      	movs	r0, #15
 8005b84:	f000 f808 	bl	8005b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b88:	f7ff fbb8 	bl	80052fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40022000 	.word	0x40022000

08005b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ba0:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <HAL_InitTick+0x54>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <HAL_InitTick+0x58>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f991 	bl	8005ede <HAL_SYSTICK_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e00e      	b.n	8005be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0f      	cmp	r3, #15
 8005bca:	d80a      	bhi.n	8005be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bcc:	2200      	movs	r2, #0
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	f000 f94b 	bl	8005e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bd8:	4a06      	ldr	r2, [pc, #24]	@ (8005bf4 <HAL_InitTick+0x5c>)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	20000018 	.word	0x20000018
 8005bf4:	20000014 	.word	0x20000014

08005bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <HAL_IncTick+0x1c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <HAL_IncTick+0x20>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4413      	add	r3, r2
 8005c08:	4a03      	ldr	r2, [pc, #12]	@ (8005c18 <HAL_IncTick+0x20>)
 8005c0a:	6013      	str	r3, [r2, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	20000018 	.word	0x20000018
 8005c18:	20000604 	.word	0x20000604

08005c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c20:	4b02      	ldr	r3, [pc, #8]	@ (8005c2c <HAL_GetTick+0x10>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	20000604 	.word	0x20000604

08005c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7ff fff0 	bl	8005c1c <HAL_GetTick>
 8005c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d005      	beq.n	8005c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <HAL_Delay+0x44>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c56:	bf00      	nop
 8005c58:	f7ff ffe0 	bl	8005c1c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d8f7      	bhi.n	8005c58 <HAL_Delay+0x28>
  {
  }
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000018 	.word	0x20000018

08005c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c94:	4013      	ands	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005caa:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	60d3      	str	r3, [r2, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 0307 	and.w	r3, r3, #7
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db0b      	blt.n	8005d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	f003 021f 	and.w	r2, r3, #31
 8005cf4:	4906      	ldr	r1, [pc, #24]	@ (8005d10 <__NVIC_EnableIRQ+0x34>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8005d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	e000e100 	.word	0xe000e100

08005d14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db12      	blt.n	8005d4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	490a      	ldr	r1, [pc, #40]	@ (8005d58 <__NVIC_DisableIRQ+0x44>)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2001      	movs	r0, #1
 8005d36:	fa00 f202 	lsl.w	r2, r0, r2
 8005d3a:	3320      	adds	r3, #32
 8005d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d40:	f3bf 8f4f 	dsb	sy
}
 8005d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d46:	f3bf 8f6f 	isb	sy
}
 8005d4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000e100 	.word	0xe000e100

08005d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	db0a      	blt.n	8005d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	490c      	ldr	r1, [pc, #48]	@ (8005da8 <__NVIC_SetPriority+0x4c>)
 8005d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7a:	0112      	lsls	r2, r2, #4
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	440b      	add	r3, r1
 8005d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d84:	e00a      	b.n	8005d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4908      	ldr	r1, [pc, #32]	@ (8005dac <__NVIC_SetPriority+0x50>)
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	3b04      	subs	r3, #4
 8005d94:	0112      	lsls	r2, r2, #4
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	440b      	add	r3, r1
 8005d9a:	761a      	strb	r2, [r3, #24]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	e000e100 	.word	0xe000e100
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	@ 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f1c3 0307 	rsb	r3, r3, #7
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	bf28      	it	cs
 8005dce:	2304      	movcs	r3, #4
 8005dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d902      	bls.n	8005de0 <NVIC_EncodePriority+0x30>
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3b03      	subs	r3, #3
 8005dde:	e000      	b.n	8005de2 <NVIC_EncodePriority+0x32>
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43da      	mvns	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	401a      	ands	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005df8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	43d9      	mvns	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e08:	4313      	orrs	r3, r2
         );
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3724      	adds	r7, #36	@ 0x24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr

08005e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e24:	d301      	bcc.n	8005e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00f      	b.n	8005e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e54 <SysTick_Config+0x40>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e32:	210f      	movs	r1, #15
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	f7ff ff90 	bl	8005d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <SysTick_Config+0x40>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e42:	4b04      	ldr	r3, [pc, #16]	@ (8005e54 <SysTick_Config+0x40>)
 8005e44:	2207      	movs	r2, #7
 8005e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000e010 	.word	0xe000e010

08005e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff09 	bl	8005c78 <__NVIC_SetPriorityGrouping>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4603      	mov	r3, r0
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e80:	f7ff ff1e 	bl	8005cc0 <__NVIC_GetPriorityGrouping>
 8005e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff ff90 	bl	8005db0 <NVIC_EncodePriority>
 8005e90:	4602      	mov	r2, r0
 8005e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff5f 	bl	8005d5c <__NVIC_SetPriority>
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	4603      	mov	r3, r0
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff11 	bl	8005cdc <__NVIC_EnableIRQ>
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff1f 	bl	8005d14 <__NVIC_DisableIRQ>
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff94 	bl	8005e14 <SysTick_Config>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e043      	b.n	8005f96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b22      	ldr	r3, [pc, #136]	@ (8005fa0 <HAL_DMA_Init+0xa8>)
 8005f16:	4413      	add	r3, r2
 8005f18:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <HAL_DMA_Init+0xac>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <HAL_DMA_Init+0xb0>)
 8005f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	bffdfff8 	.word	0xbffdfff8
 8005fa4:	cccccccd 	.word	0xcccccccd
 8005fa8:	40020000 	.word	0x40020000

08005fac <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e046      	b.n	800604c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4b18      	ldr	r3, [pc, #96]	@ (8006058 <HAL_DMA_DeInit+0xac>)
 8005ff6:	4413      	add	r3, r2
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <HAL_DMA_DeInit+0xb0>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	009a      	lsls	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <HAL_DMA_DeInit+0xb4>)
 800600a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006014:	2101      	movs	r1, #1
 8006016:	fa01 f202 	lsl.w	r2, r1, r2
 800601a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	bffdfff8 	.word	0xbffdfff8
 800605c:	cccccccd 	.word	0xcccccccd
 8006060:	40020000 	.word	0x40020000

08006064 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_DMA_Start_IT+0x20>
 8006080:	2302      	movs	r3, #2
 8006082:	e04b      	b.n	800611c <HAL_DMA_Start_IT+0xb8>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d13a      	bne.n	800610e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f9eb 	bl	8006498 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 020e 	orr.w	r2, r2, #14
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e00f      	b.n	80060fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 020a 	orr.w	r2, r2, #10
 80060fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e005      	b.n	800611a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006116:	2302      	movs	r3, #2
 8006118:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d008      	beq.n	800614e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2204      	movs	r2, #4
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e020      	b.n	8006190 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 020e 	bic.w	r2, r2, #14
 800615c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f202 	lsl.w	r2, r1, r2
 800617c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
	...

0800619c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d005      	beq.n	80061c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2204      	movs	r2, #4
 80061b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
 80061be:	e051      	b.n	8006264 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 020e 	bic.w	r2, r2, #14
 80061ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <HAL_DMA_Abort_IT+0xd4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d029      	beq.n	800623e <HAL_DMA_Abort_IT+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <HAL_DMA_Abort_IT+0xd8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d022      	beq.n	800623a <HAL_DMA_Abort_IT+0x9e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_DMA_Abort_IT+0xdc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01a      	beq.n	8006234 <HAL_DMA_Abort_IT+0x98>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	@ (800627c <HAL_DMA_Abort_IT+0xe0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d012      	beq.n	800622e <HAL_DMA_Abort_IT+0x92>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_DMA_Abort_IT+0xe4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00a      	beq.n	8006228 <HAL_DMA_Abort_IT+0x8c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_DMA_Abort_IT+0xe8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <HAL_DMA_Abort_IT+0x86>
 800621c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006220:	e00e      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 8006222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006226:	e00b      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 8006228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800622c:	e008      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 800622e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006232:	e005      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 8006234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006238:	e002      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 800623a:	2310      	movs	r3, #16
 800623c:	e000      	b.n	8006240 <HAL_DMA_Abort_IT+0xa4>
 800623e:	2301      	movs	r3, #1
 8006240:	4a11      	ldr	r2, [pc, #68]	@ (8006288 <HAL_DMA_Abort_IT+0xec>)
 8006242:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
    } 
  }
  return status;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40020008 	.word	0x40020008
 8006274:	4002001c 	.word	0x4002001c
 8006278:	40020030 	.word	0x40020030
 800627c:	40020044 	.word	0x40020044
 8006280:	40020058 	.word	0x40020058
 8006284:	4002006c 	.word	0x4002006c
 8006288:	40020000 	.word	0x40020000

0800628c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a8:	2204      	movs	r2, #4
 80062aa:	409a      	lsls	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d04f      	beq.n	8006354 <HAL_DMA_IRQHandler+0xc8>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04a      	beq.n	8006354 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a66      	ldr	r2, [pc, #408]	@ (800647c <HAL_DMA_IRQHandler+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d029      	beq.n	800633a <HAL_DMA_IRQHandler+0xae>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a65      	ldr	r2, [pc, #404]	@ (8006480 <HAL_DMA_IRQHandler+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_DMA_IRQHandler+0xaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a63      	ldr	r2, [pc, #396]	@ (8006484 <HAL_DMA_IRQHandler+0x1f8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01a      	beq.n	8006330 <HAL_DMA_IRQHandler+0xa4>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a62      	ldr	r2, [pc, #392]	@ (8006488 <HAL_DMA_IRQHandler+0x1fc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d012      	beq.n	800632a <HAL_DMA_IRQHandler+0x9e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a60      	ldr	r2, [pc, #384]	@ (800648c <HAL_DMA_IRQHandler+0x200>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00a      	beq.n	8006324 <HAL_DMA_IRQHandler+0x98>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a5f      	ldr	r2, [pc, #380]	@ (8006490 <HAL_DMA_IRQHandler+0x204>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d102      	bne.n	800631e <HAL_DMA_IRQHandler+0x92>
 8006318:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800631c:	e00e      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800631e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006322:	e00b      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006324:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006328:	e008      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800632a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800632e:	e005      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006334:	e002      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 8006336:	2340      	movs	r3, #64	@ 0x40
 8006338:	e000      	b.n	800633c <HAL_DMA_IRQHandler+0xb0>
 800633a:	2304      	movs	r3, #4
 800633c:	4a55      	ldr	r2, [pc, #340]	@ (8006494 <HAL_DMA_IRQHandler+0x208>)
 800633e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8094 	beq.w	8006472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006352:	e08e      	b.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	2202      	movs	r2, #2
 800635a:	409a      	lsls	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d056      	beq.n	8006412 <HAL_DMA_IRQHandler+0x186>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d051      	beq.n	8006412 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 020a 	bic.w	r2, r2, #10
 800638a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a38      	ldr	r2, [pc, #224]	@ (800647c <HAL_DMA_IRQHandler+0x1f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d029      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x166>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a37      	ldr	r2, [pc, #220]	@ (8006480 <HAL_DMA_IRQHandler+0x1f4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_DMA_IRQHandler+0x162>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a35      	ldr	r2, [pc, #212]	@ (8006484 <HAL_DMA_IRQHandler+0x1f8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01a      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x15c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <HAL_DMA_IRQHandler+0x1fc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d012      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x156>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a32      	ldr	r2, [pc, #200]	@ (800648c <HAL_DMA_IRQHandler+0x200>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00a      	beq.n	80063dc <HAL_DMA_IRQHandler+0x150>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a31      	ldr	r2, [pc, #196]	@ (8006490 <HAL_DMA_IRQHandler+0x204>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d102      	bne.n	80063d6 <HAL_DMA_IRQHandler+0x14a>
 80063d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80063d4:	e00e      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063da:	e00b      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063e0:	e008      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063e6:	e005      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063ec:	e002      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063ee:	2320      	movs	r3, #32
 80063f0:	e000      	b.n	80063f4 <HAL_DMA_IRQHandler+0x168>
 80063f2:	2302      	movs	r3, #2
 80063f4:	4a27      	ldr	r2, [pc, #156]	@ (8006494 <HAL_DMA_IRQHandler+0x208>)
 80063f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d034      	beq.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006410:	e02f      	b.n	8006472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	2208      	movs	r2, #8
 8006418:	409a      	lsls	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d028      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d023      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 020e 	bic.w	r2, r2, #14
 800643a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f202 	lsl.w	r2, r1, r2
 800644a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
    }
  }
  return;
 8006472:	bf00      	nop
 8006474:	bf00      	nop
}
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40020008 	.word	0x40020008
 8006480:	4002001c 	.word	0x4002001c
 8006484:	40020030 	.word	0x40020030
 8006488:	40020044 	.word	0x40020044
 800648c:	40020058 	.word	0x40020058
 8006490:	4002006c 	.word	0x4002006c
 8006494:	40020000 	.word	0x40020000

08006498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f202 	lsl.w	r2, r1, r2
 80064b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d108      	bne.n	80064d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064d6:	e007      	b.n	80064e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b08b      	sub	sp, #44	@ 0x2c
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006506:	e169      	b.n	80067dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006508:	2201      	movs	r2, #1
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	429a      	cmp	r2, r3
 8006522:	f040 8158 	bne.w	80067d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4a9a      	ldr	r2, [pc, #616]	@ (8006794 <HAL_GPIO_Init+0x2a0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d05e      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006530:	4a98      	ldr	r2, [pc, #608]	@ (8006794 <HAL_GPIO_Init+0x2a0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d875      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006536:	4a98      	ldr	r2, [pc, #608]	@ (8006798 <HAL_GPIO_Init+0x2a4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d058      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 800653c:	4a96      	ldr	r2, [pc, #600]	@ (8006798 <HAL_GPIO_Init+0x2a4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d86f      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006542:	4a96      	ldr	r2, [pc, #600]	@ (800679c <HAL_GPIO_Init+0x2a8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d052      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006548:	4a94      	ldr	r2, [pc, #592]	@ (800679c <HAL_GPIO_Init+0x2a8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d869      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800654e:	4a94      	ldr	r2, [pc, #592]	@ (80067a0 <HAL_GPIO_Init+0x2ac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d04c      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006554:	4a92      	ldr	r2, [pc, #584]	@ (80067a0 <HAL_GPIO_Init+0x2ac>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d863      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800655a:	4a92      	ldr	r2, [pc, #584]	@ (80067a4 <HAL_GPIO_Init+0x2b0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d046      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
 8006560:	4a90      	ldr	r2, [pc, #576]	@ (80067a4 <HAL_GPIO_Init+0x2b0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d85d      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 8006566:	2b12      	cmp	r3, #18
 8006568:	d82a      	bhi.n	80065c0 <HAL_GPIO_Init+0xcc>
 800656a:	2b12      	cmp	r3, #18
 800656c:	d859      	bhi.n	8006622 <HAL_GPIO_Init+0x12e>
 800656e:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <HAL_GPIO_Init+0x80>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065ef 	.word	0x080065ef
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065db 	.word	0x080065db
 8006580:	0800661d 	.word	0x0800661d
 8006584:	08006623 	.word	0x08006623
 8006588:	08006623 	.word	0x08006623
 800658c:	08006623 	.word	0x08006623
 8006590:	08006623 	.word	0x08006623
 8006594:	08006623 	.word	0x08006623
 8006598:	08006623 	.word	0x08006623
 800659c:	08006623 	.word	0x08006623
 80065a0:	08006623 	.word	0x08006623
 80065a4:	08006623 	.word	0x08006623
 80065a8:	08006623 	.word	0x08006623
 80065ac:	08006623 	.word	0x08006623
 80065b0:	08006623 	.word	0x08006623
 80065b4:	08006623 	.word	0x08006623
 80065b8:	080065d1 	.word	0x080065d1
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	4a79      	ldr	r2, [pc, #484]	@ (80067a8 <HAL_GPIO_Init+0x2b4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065c6:	e02c      	b.n	8006622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	623b      	str	r3, [r7, #32]
          break;
 80065ce:	e029      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	623b      	str	r3, [r7, #32]
          break;
 80065d8:	e024      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	3308      	adds	r3, #8
 80065e0:	623b      	str	r3, [r7, #32]
          break;
 80065e2:	e01f      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	330c      	adds	r3, #12
 80065ea:	623b      	str	r3, [r7, #32]
          break;
 80065ec:	e01a      	b.n	8006624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065f6:	2304      	movs	r3, #4
 80065f8:	623b      	str	r3, [r7, #32]
          break;
 80065fa:	e013      	b.n	8006624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d105      	bne.n	8006610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006604:	2308      	movs	r3, #8
 8006606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	611a      	str	r2, [r3, #16]
          break;
 800660e:	e009      	b.n	8006624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006610:	2308      	movs	r3, #8
 8006612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	615a      	str	r2, [r3, #20]
          break;
 800661a:	e003      	b.n	8006624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800661c:	2300      	movs	r3, #0
 800661e:	623b      	str	r3, [r7, #32]
          break;
 8006620:	e000      	b.n	8006624 <HAL_GPIO_Init+0x130>
          break;
 8006622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2bff      	cmp	r3, #255	@ 0xff
 8006628:	d801      	bhi.n	800662e <HAL_GPIO_Init+0x13a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	e001      	b.n	8006632 <HAL_GPIO_Init+0x13e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3304      	adds	r3, #4
 8006632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2bff      	cmp	r3, #255	@ 0xff
 8006638:	d802      	bhi.n	8006640 <HAL_GPIO_Init+0x14c>
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	e002      	b.n	8006646 <HAL_GPIO_Init+0x152>
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	3b08      	subs	r3, #8
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	210f      	movs	r1, #15
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80b1 	beq.w	80067d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006674:	4b4d      	ldr	r3, [pc, #308]	@ (80067ac <HAL_GPIO_Init+0x2b8>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	4a4c      	ldr	r2, [pc, #304]	@ (80067ac <HAL_GPIO_Init+0x2b8>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	6193      	str	r3, [r2, #24]
 8006680:	4b4a      	ldr	r3, [pc, #296]	@ (80067ac <HAL_GPIO_Init+0x2b8>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800668c:	4a48      	ldr	r2, [pc, #288]	@ (80067b0 <HAL_GPIO_Init+0x2bc>)
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	220f      	movs	r2, #15
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	43db      	mvns	r3, r3
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a40      	ldr	r2, [pc, #256]	@ (80067b4 <HAL_GPIO_Init+0x2c0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_GPIO_Init+0x1ec>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a3f      	ldr	r2, [pc, #252]	@ (80067b8 <HAL_GPIO_Init+0x2c4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00d      	beq.n	80066dc <HAL_GPIO_Init+0x1e8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a3e      	ldr	r2, [pc, #248]	@ (80067bc <HAL_GPIO_Init+0x2c8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <HAL_GPIO_Init+0x1e4>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3d      	ldr	r2, [pc, #244]	@ (80067c0 <HAL_GPIO_Init+0x2cc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <HAL_GPIO_Init+0x1e0>
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066d4:	2304      	movs	r3, #4
 80066d6:	e004      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066d8:	2302      	movs	r3, #2
 80066da:	e002      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_GPIO_Init+0x1ee>
 80066e0:	2300      	movs	r3, #0
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	f002 0203 	and.w	r2, r2, #3
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	4093      	lsls	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066f2:	492f      	ldr	r1, [pc, #188]	@ (80067b0 <HAL_GPIO_Init+0x2bc>)
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	3302      	adds	r3, #2
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800670c:	4b2d      	ldr	r3, [pc, #180]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	492c      	ldr	r1, [pc, #176]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4313      	orrs	r3, r2
 8006716:	608b      	str	r3, [r1, #8]
 8006718:	e006      	b.n	8006728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800671a:	4b2a      	ldr	r3, [pc, #168]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	43db      	mvns	r3, r3
 8006722:	4928      	ldr	r1, [pc, #160]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006724:	4013      	ands	r3, r2
 8006726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006734:	4b23      	ldr	r3, [pc, #140]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	4922      	ldr	r1, [pc, #136]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4313      	orrs	r3, r2
 800673e:	60cb      	str	r3, [r1, #12]
 8006740:	e006      	b.n	8006750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006742:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	43db      	mvns	r3, r3
 800674a:	491e      	ldr	r1, [pc, #120]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800674c:	4013      	ands	r3, r2
 800674e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800675c:	4b19      	ldr	r3, [pc, #100]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	4918      	ldr	r1, [pc, #96]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	e006      	b.n	8006778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800676a:	4b16      	ldr	r3, [pc, #88]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	43db      	mvns	r3, r3
 8006772:	4914      	ldr	r1, [pc, #80]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006774:	4013      	ands	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d021      	beq.n	80067c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006784:	4b0f      	ldr	r3, [pc, #60]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	490e      	ldr	r1, [pc, #56]	@ (80067c4 <HAL_GPIO_Init+0x2d0>)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	600b      	str	r3, [r1, #0]
 8006790:	e021      	b.n	80067d6 <HAL_GPIO_Init+0x2e2>
 8006792:	bf00      	nop
 8006794:	10320000 	.word	0x10320000
 8006798:	10310000 	.word	0x10310000
 800679c:	10220000 	.word	0x10220000
 80067a0:	10210000 	.word	0x10210000
 80067a4:	10120000 	.word	0x10120000
 80067a8:	10110000 	.word	0x10110000
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010800 	.word	0x40010800
 80067b8:	40010c00 	.word	0x40010c00
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40011400 	.word	0x40011400
 80067c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80067c8:	4b0b      	ldr	r3, [pc, #44]	@ (80067f8 <HAL_GPIO_Init+0x304>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	4909      	ldr	r1, [pc, #36]	@ (80067f8 <HAL_GPIO_Init+0x304>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	3301      	adds	r3, #1
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f47f ae8e 	bne.w	8006508 <HAL_GPIO_Init+0x14>
  }
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	372c      	adds	r7, #44	@ 0x2c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b089      	sub	sp, #36	@ 0x24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800680a:	e09a      	b.n	8006942 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800680c:	2201      	movs	r2, #1
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 808d 	beq.w	800693c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006822:	4a4e      	ldr	r2, [pc, #312]	@ (800695c <HAL_GPIO_DeInit+0x160>)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	089b      	lsrs	r3, r3, #2
 8006828:	3302      	adds	r3, #2
 800682a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	220f      	movs	r2, #15
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4013      	ands	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a46      	ldr	r2, [pc, #280]	@ (8006960 <HAL_GPIO_DeInit+0x164>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_GPIO_DeInit+0x78>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a45      	ldr	r2, [pc, #276]	@ (8006964 <HAL_GPIO_DeInit+0x168>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00d      	beq.n	8006870 <HAL_GPIO_DeInit+0x74>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a44      	ldr	r2, [pc, #272]	@ (8006968 <HAL_GPIO_DeInit+0x16c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <HAL_GPIO_DeInit+0x70>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a43      	ldr	r2, [pc, #268]	@ (800696c <HAL_GPIO_DeInit+0x170>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <HAL_GPIO_DeInit+0x6c>
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <HAL_GPIO_DeInit+0x7a>
 8006868:	2304      	movs	r3, #4
 800686a:	e004      	b.n	8006876 <HAL_GPIO_DeInit+0x7a>
 800686c:	2302      	movs	r3, #2
 800686e:	e002      	b.n	8006876 <HAL_GPIO_DeInit+0x7a>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_GPIO_DeInit+0x7a>
 8006874:	2300      	movs	r3, #0
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	f002 0203 	and.w	r2, r2, #3
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	4093      	lsls	r3, r2
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	429a      	cmp	r2, r3
 8006884:	d132      	bne.n	80068ec <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006886:	4b3a      	ldr	r3, [pc, #232]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	43db      	mvns	r3, r3
 800688e:	4938      	ldr	r1, [pc, #224]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 8006890:	4013      	ands	r3, r2
 8006892:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006894:	4b36      	ldr	r3, [pc, #216]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	43db      	mvns	r3, r3
 800689c:	4934      	ldr	r1, [pc, #208]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 800689e:	4013      	ands	r3, r2
 80068a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80068a2:	4b33      	ldr	r3, [pc, #204]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	43db      	mvns	r3, r3
 80068aa:	4931      	ldr	r1, [pc, #196]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80068b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	492d      	ldr	r1, [pc, #180]	@ (8006970 <HAL_GPIO_DeInit+0x174>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	220f      	movs	r2, #15
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80068ce:	4a23      	ldr	r2, [pc, #140]	@ (800695c <HAL_GPIO_DeInit+0x160>)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	3302      	adds	r3, #2
 80068d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43da      	mvns	r2, r3
 80068de:	481f      	ldr	r0, [pc, #124]	@ (800695c <HAL_GPIO_DeInit+0x160>)
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	089b      	lsrs	r3, r3, #2
 80068e4:	400a      	ands	r2, r1
 80068e6:	3302      	adds	r3, #2
 80068e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2bff      	cmp	r3, #255	@ 0xff
 80068f0:	d801      	bhi.n	80068f6 <HAL_GPIO_DeInit+0xfa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	e001      	b.n	80068fa <HAL_GPIO_DeInit+0xfe>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3304      	adds	r3, #4
 80068fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2bff      	cmp	r3, #255	@ 0xff
 8006900:	d802      	bhi.n	8006908 <HAL_GPIO_DeInit+0x10c>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	e002      	b.n	800690e <HAL_GPIO_DeInit+0x112>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3b08      	subs	r3, #8
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	210f      	movs	r1, #15
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	401a      	ands	r2, r3
 8006920:	2104      	movs	r1, #4
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	431a      	orrs	r2, r3
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	43db      	mvns	r3, r3
 8006936:	401a      	ands	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	3301      	adds	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	fa22 f303 	lsr.w	r3, r2, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af5e 	bne.w	800680c <HAL_GPIO_DeInit+0x10>
  }
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3724      	adds	r7, #36	@ 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	40010000 	.word	0x40010000
 8006960:	40010800 	.word	0x40010800
 8006964:	40010c00 	.word	0x40010c00
 8006968:	40011000 	.word	0x40011000
 800696c:	40011400 	.word	0x40011400
 8006970:	40010400 	.word	0x40010400

08006974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	887b      	ldrh	r3, [r7, #2]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
 8006990:	e001      	b.n	8006996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	807b      	strh	r3, [r7, #2]
 80069ae:	4613      	mov	r3, r2
 80069b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069b2:	787b      	ldrb	r3, [r7, #1]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069b8:	887a      	ldrh	r2, [r7, #2]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80069be:	e003      	b.n	80069c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	041a      	lsls	r2, r3, #16
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	611a      	str	r2, [r3, #16]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069e4:	887a      	ldrh	r2, [r7, #2]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	041a      	lsls	r2, r3, #16
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	43d9      	mvns	r1, r3
 80069f0:	887b      	ldrh	r3, [r7, #2]
 80069f2:	400b      	ands	r3, r1
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	611a      	str	r2, [r3, #16]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f005 fa80 	bl	800bf16 <USB_ReadInterrupts>
 8006a16:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fabb 	bl	8006f9e <PCD_EP_ISR_Handler>

    return;
 8006a28:	e119      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d013      	beq.n	8006a5c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a46:	b292      	uxth	r2, r2
 8006a48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f006 fb35 	bl	800d0bc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006a52:	2100      	movs	r1, #0
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f905 	bl	8006c64 <HAL_PCD_SetAddress>

    return;
 8006a5a:	e100      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006a7e:	e0ee      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a9c:	b292      	uxth	r2, r2
 8006a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006aa2:	e0dc      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d027      	beq.n	8006afe <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0204 	bic.w	r2, r2, #4
 8006ac0:	b292      	uxth	r2, r2
 8006ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0208 	bic.w	r2, r2, #8
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f006 fb24 	bl	800d12c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006af6:	b292      	uxth	r2, r2
 8006af8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006afc:	e0af      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8083 	beq.w	8006c10 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e010      	b.n	8006b32 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	7ffb      	ldrb	r3, [r7, #31]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	7ffb      	ldrb	r3, [r7, #31]
 8006b1e:	8812      	ldrh	r2, [r2, #0]
 8006b20:	b292      	uxth	r2, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	3320      	adds	r3, #32
 8006b26:	443b      	add	r3, r7
 8006b28:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8006b2c:	7ffb      	ldrb	r3, [r7, #31]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	7ffb      	ldrb	r3, [r7, #31]
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	d9eb      	bls.n	8006b10 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	b292      	uxth	r2, r2
 8006b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	b292      	uxth	r2, r2
 8006b64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006b68:	bf00      	nop
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f6      	beq.n	8006b6a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e00f      	b.n	8006bba <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	7ffa      	ldrb	r2, [r7, #31]
 8006ba4:	0092      	lsls	r2, r2, #2
 8006ba6:	440a      	add	r2, r1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	3320      	adds	r3, #32
 8006bac:	443b      	add	r3, r7
 8006bae:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006bb2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8006bb4:	7ffb      	ldrb	r3, [r7, #31]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	7ffb      	ldrb	r3, [r7, #31]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	d9ec      	bls.n	8006b9a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	b292      	uxth	r2, r2
 8006bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bea:	b292      	uxth	r2, r2
 8006bec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0204 	orr.w	r2, r2, #4
 8006c02:	b292      	uxth	r2, r2
 8006c04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f006 fa75 	bl	800d0f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006c0e:	e026      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00f      	beq.n	8006c3a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f006 fa34 	bl	800d0a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006c38:	e011      	b.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c56:	b292      	uxth	r2, r2
 8006c58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006c5c:	bf00      	nop
  }
}
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_PCD_SetAddress+0x1a>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e012      	b.n	8006ca4 <HAL_PCD_SetAddress+0x40>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f005 f92b 	bl	800bef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	70fb      	strb	r3, [r7, #3]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	803b      	strh	r3, [r7, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da0e      	bge.n	8006cf0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 0207 	and.w	r2, r3, #7
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	705a      	strb	r2, [r3, #1]
 8006cee:	e00e      	b.n	8006d0e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	f003 0207 	and.w	r2, r3, #7
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d1a:	883a      	ldrh	r2, [r7, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	78ba      	ldrb	r2, [r7, #2]
 8006d24:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d26:	78bb      	ldrb	r3, [r7, #2]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d102      	bne.n	8006d32 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_PCD_EP_Open+0x94>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e00e      	b.n	8006d5e <HAL_PCD_EP_Open+0xb2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68f9      	ldr	r1, [r7, #12]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f003 f860 	bl	8009e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	460b      	mov	r3, r1
 8006d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	f003 0207 	and.w	r2, r3, #7
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da6:	7afb      	ldrb	r3, [r7, #11]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6979      	ldr	r1, [r7, #20]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f003 fbeb 	bl	800a594 <USB_EPStartXfer>

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607a      	str	r2, [r7, #4]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dd8:	7afb      	ldrb	r3, [r7, #11]
 8006dda:	f003 0207 	and.w	r2, r3, #7
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	3310      	adds	r3, #16
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2201      	movs	r2, #1
 8006e12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f003 fbb4 	bl	800a594 <USB_EPStartXfer>

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7912      	ldrb	r2, [r2, #4]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d901      	bls.n	8006e54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04c      	b.n	8006eee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da0e      	bge.n	8006e7a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	f003 0207 	and.w	r2, r3, #7
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	3310      	adds	r3, #16
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	705a      	strb	r2, [r3, #1]
 8006e78:	e00c      	b.n	8006e94 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_PCD_EP_SetStall+0x7e>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e01c      	b.n	8006eee <HAL_PCD_EP_SetStall+0xb8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f004 ff17 	bl	800bcf6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d108      	bne.n	8006ee4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f005 f828 	bl	800bf34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7912      	ldrb	r2, [r2, #4]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e040      	b.n	8006f96 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	da0e      	bge.n	8006f3a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	f003 0207 	and.w	r2, r3, #7
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	3310      	adds	r3, #16
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4413      	add	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	705a      	strb	r2, [r3, #1]
 8006f38:	e00e      	b.n	8006f58 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 0207 	and.w	r2, r3, #7
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4413      	add	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f5e:	78fb      	ldrb	r3, [r7, #3]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_PCD_EP_ClrStall+0x82>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e00e      	b.n	8006f96 <HAL_PCD_EP_ClrStall+0xa0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68f9      	ldr	r1, [r7, #12]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f004 ff05 	bl	800bd96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b096      	sub	sp, #88	@ 0x58
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006fa6:	e3bb      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006fc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 8175 	bne.w	80072b6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d14e      	bne.n	8007076 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe8:	81fb      	strh	r3, [r7, #14]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3310      	adds	r3, #16
 8007000:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800700a:	b29b      	uxth	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4413      	add	r3, r2
 8007016:	3302      	adds	r3, #2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800702a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800702c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800702e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	441a      	add	r2, r3
 8007038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f006 f814 	bl	800d06c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7b5b      	ldrb	r3, [r3, #13]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8368 	beq.w	8007720 <PCD_EP_ISR_Handler+0x782>
 8007050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 8363 	bne.w	8007720 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	7b5b      	ldrb	r3, [r3, #13]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007064:	b2da      	uxtb	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	735a      	strb	r2, [r3, #13]
 8007074:	e354      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800707c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007088:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800708c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007090:	2b00      	cmp	r3, #0
 8007092:	d034      	beq.n	80070fe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709c:	b29b      	uxth	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	4413      	add	r3, r2
 80070a8:	3306      	adds	r3, #6
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80070bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80070ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80070ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f004 ff7e 	bl	800bfd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80070e4:	4013      	ands	r3, r2
 80070e6:	823b      	strh	r3, [r7, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	8a3a      	ldrh	r2, [r7, #16]
 80070ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070f2:	b292      	uxth	r2, r2
 80070f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f005 ff8b 	bl	800d012 <HAL_PCD_SetupStageCallback>
 80070fc:	e310      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80070fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8007102:	2b00      	cmp	r3, #0
 8007104:	f280 830c 	bge.w	8007720 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29a      	uxth	r2, r3
 8007110:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007114:	4013      	ands	r3, r2
 8007116:	83fb      	strh	r3, [r7, #30]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	8bfa      	ldrh	r2, [r7, #30]
 800711e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007122:	b292      	uxth	r2, r2
 8007124:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	3306      	adds	r3, #6
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800714e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007150:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d019      	beq.n	800718e <PCD_EP_ISR_Handler+0x1f0>
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d015      	beq.n	800718e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007168:	6959      	ldr	r1, [r3, #20]
 800716a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800716e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007170:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007172:	b29b      	uxth	r3, r3
 8007174:	f004 ff2e 	bl	800bfd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	441a      	add	r2, r3
 8007182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007184:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007186:	2100      	movs	r1, #0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f005 ff54 	bl	800d036 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007198:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800719c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 82bd 	bne.w	8007720 <PCD_EP_ISR_Handler+0x782>
 80071a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80071aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b2:	f000 82b5 	beq.w	8007720 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	4413      	add	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ec:	d91d      	bls.n	800722a <PCD_EP_ISR_Handler+0x28c>
 80071ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <PCD_EP_ISR_Handler+0x26a>
 8007202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007204:	3b01      	subs	r3, #1
 8007206:	647b      	str	r3, [r7, #68]	@ 0x44
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007210:	b29b      	uxth	r3, r3
 8007212:	029b      	lsls	r3, r3, #10
 8007214:	b29b      	uxth	r3, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	b29a      	uxth	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e026      	b.n	8007278 <PCD_EP_ISR_Handler+0x2da>
 800722a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <PCD_EP_ISR_Handler+0x2aa>
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e017      	b.n	8007278 <PCD_EP_ISR_Handler+0x2da>
 8007248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <PCD_EP_ISR_Handler+0x2c4>
 800725c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725e:	3301      	adds	r3, #1
 8007260:	647b      	str	r3, [r7, #68]	@ 0x44
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29a      	uxth	r2, r3
 8007268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726a:	b29b      	uxth	r3, r3
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	b29b      	uxth	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b29a      	uxth	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007288:	827b      	strh	r3, [r7, #18]
 800728a:	8a7b      	ldrh	r3, [r7, #18]
 800728c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007290:	827b      	strh	r3, [r7, #18]
 8007292:	8a7b      	ldrh	r3, [r7, #18]
 8007294:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007298:	827b      	strh	r3, [r7, #18]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	8a7b      	ldrh	r3, [r7, #18]
 80072a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]
 80072b4:	e234      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80072ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f280 80fc 	bge.w	80074cc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80072ea:	4013      	ands	r3, r2
 80072ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007306:	b292      	uxth	r2, r2
 8007308:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800730a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007322:	7b1b      	ldrb	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d125      	bne.n	8007374 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007330:	b29b      	uxth	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4413      	add	r3, r2
 800733c:	3306      	adds	r3, #6
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007350:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007354:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8092 	beq.w	8007482 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007364:	6959      	ldr	r1, [r3, #20]
 8007366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007368:	88da      	ldrh	r2, [r3, #6]
 800736a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800736e:	f004 fe31 	bl	800bfd4 <USB_ReadPMA>
 8007372:	e086      	b.n	8007482 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007376:	78db      	ldrb	r3, [r3, #3]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d10a      	bne.n	8007392 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800737c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007380:	461a      	mov	r2, r3
 8007382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9d9 	bl	800773c <HAL_PCD_EP_DB_Receive>
 800738a:	4603      	mov	r3, r0
 800738c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007390:	e077      	b.n	8007482 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ac:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	441a      	add	r2, r3
 80073be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80073c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d024      	beq.n	800743a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	3302      	adds	r3, #2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007418:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800741c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02e      	beq.n	8007482 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742a:	6959      	ldr	r1, [r3, #20]
 800742c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742e:	891a      	ldrh	r2, [r3, #8]
 8007430:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007434:	f004 fdce 	bl	800bfd4 <USB_ReadPMA>
 8007438:	e023      	b.n	8007482 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007442:	b29b      	uxth	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	4413      	add	r3, r2
 800744e:	3306      	adds	r3, #6
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007462:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007474:	6959      	ldr	r1, [r3, #20]
 8007476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007478:	895a      	ldrh	r2, [r3, #10]
 800747a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800747e:	f004 fda9 	bl	800bfd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800748a:	441a      	add	r2, r3
 800748c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007498:	441a      	add	r2, r3
 800749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800749e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <PCD_EP_ISR_Handler+0x514>
 80074a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80074aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d206      	bcs.n	80074c0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80074b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f005 fdbc 	bl	800d036 <HAL_PCD_DataOutStageCallback>
 80074be:	e005      	b.n	80074cc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074c6:	4618      	mov	r0, r3
 80074c8:	f003 f864 	bl	800a594 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80074cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80074d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8123 	beq.w	8007720 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80074da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	3310      	adds	r3, #16
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007508:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	441a      	add	r2, r3
 800751a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29b      	uxth	r3, r3
 8007528:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800752a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	2b01      	cmp	r3, #1
 8007530:	f040 80a2 	bne.w	8007678 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8007534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800753a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800753c:	7b1b      	ldrb	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8093 	beq.w	800766a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007544:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d046      	beq.n	80075de <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d126      	bne.n	80075a6 <PCD_EP_ISR_Handler+0x608>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	4413      	add	r3, r2
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	011a      	lsls	r2, r3, #4
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	4413      	add	r3, r2
 800757a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800758a:	b29a      	uxth	r2, r3
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e061      	b.n	800766a <PCD_EP_ISR_Handler+0x6cc>
 80075a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d15d      	bne.n	800766a <PCD_EP_ISR_Handler+0x6cc>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075bc:	b29b      	uxth	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	4413      	add	r3, r2
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	2200      	movs	r2, #0
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e045      	b.n	800766a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d126      	bne.n	800763a <PCD_EP_ISR_Handler+0x69c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	4413      	add	r3, r2
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
 8007604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	011a      	lsls	r2, r3, #4
 800760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760c:	4413      	add	r3, r2
 800760e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800761e:	b29a      	uxth	r2, r3
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	801a      	strh	r2, [r3, #0]
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007632:	b29a      	uxth	r2, r3
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e017      	b.n	800766a <PCD_EP_ISR_Handler+0x6cc>
 800763a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d113      	bne.n	800766a <PCD_EP_ISR_Handler+0x6cc>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007650:	4413      	add	r3, r2
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	011a      	lsls	r2, r3, #4
 800765a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800765c:	4413      	add	r3, r2
 800765e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	2200      	movs	r2, #0
 8007668:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800766a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f005 fcfb 	bl	800d06c <HAL_PCD_DataInStageCallback>
 8007676:	e053      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d146      	bne.n	8007712 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768c:	b29b      	uxth	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	4413      	add	r3, r2
 8007698:	3302      	adds	r3, #2
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80076b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d907      	bls.n	80076cc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80076bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80076c4:	1ad2      	subs	r2, r2, r3
 80076c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c8:	619a      	str	r2, [r3, #24]
 80076ca:	e002      	b.n	80076d2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80076cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ce:	2200      	movs	r2, #0
 80076d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80076d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f005 fcc3 	bl	800d06c <HAL_PCD_DataInStageCallback>
 80076e6:	e01b      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80076e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80076f0:	441a      	add	r2, r3
 80076f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80076f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80076fe:	441a      	add	r2, r3
 8007700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007702:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800770a:	4618      	mov	r0, r3
 800770c:	f002 ff42 	bl	800a594 <USB_EPStartXfer>
 8007710:	e006      	b.n	8007720 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007712:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007716:	461a      	mov	r2, r3
 8007718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f91b 	bl	8007956 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007728:	b29b      	uxth	r3, r3
 800772a:	b21b      	sxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	f6ff ac3b 	blt.w	8006fa8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3758      	adds	r7, #88	@ 0x58
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d07e      	beq.n	8007852 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800775c:	b29b      	uxth	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	3302      	adds	r3, #2
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	8b7b      	ldrh	r3, [r7, #26]
 8007784:	429a      	cmp	r2, r3
 8007786:	d306      	bcc.n	8007796 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	8b7b      	ldrh	r3, [r7, #26]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	619a      	str	r2, [r3, #24]
 8007794:	e002      	b.n	800779c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d123      	bne.n	80077ec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077be:	833b      	strh	r3, [r7, #24]
 80077c0:	8b3b      	ldrh	r3, [r7, #24]
 80077c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077c6:	833b      	strh	r3, [r7, #24]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	441a      	add	r2, r3
 80077d6:	8b3b      	ldrh	r3, [r7, #24]
 80077d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01f      	beq.n	8007836 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007810:	82fb      	strh	r3, [r7, #22]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	8afb      	ldrh	r3, [r7, #22]
 8007822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800782a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800782e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007832:	b29b      	uxth	r3, r3
 8007834:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007836:	8b7b      	ldrh	r3, [r7, #26]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8087 	beq.w	800794c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6959      	ldr	r1, [r3, #20]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	891a      	ldrh	r2, [r3, #8]
 800784a:	8b7b      	ldrh	r3, [r7, #26]
 800784c:	f004 fbc2 	bl	800bfd4 <USB_ReadPMA>
 8007850:	e07c      	b.n	800794c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800785a:	b29b      	uxth	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	3306      	adds	r3, #6
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	8b7b      	ldrh	r3, [r7, #26]
 8007882:	429a      	cmp	r2, r3
 8007884:	d306      	bcc.n	8007894 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	8b7b      	ldrh	r3, [r7, #26]
 800788c:	1ad2      	subs	r2, r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	619a      	str	r2, [r3, #24]
 8007892:	e002      	b.n	800789a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d123      	bne.n	80078ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078bc:	83fb      	strh	r3, [r7, #30]
 80078be:	8bfb      	ldrh	r3, [r7, #30]
 80078c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078c4:	83fb      	strh	r3, [r7, #30]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	8bfb      	ldrh	r3, [r7, #30]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11f      	bne.n	8007934 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800790e:	83bb      	strh	r3, [r7, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	441a      	add	r2, r3
 800791e:	8bbb      	ldrh	r3, [r7, #28]
 8007920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800792c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007930:	b29b      	uxth	r3, r3
 8007932:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007934:	8b7b      	ldrh	r3, [r7, #26]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	895a      	ldrh	r2, [r3, #10]
 8007946:	8b7b      	ldrh	r3, [r7, #26]
 8007948:	f004 fb44 	bl	800bfd4 <USB_ReadPMA>
    }
  }

  return count;
 800794c:	8b7b      	ldrh	r3, [r7, #26]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b0a4      	sub	sp, #144	@ 0x90
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 81dd 	beq.w	8007d2a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007978:	b29b      	uxth	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	3302      	adds	r3, #2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	6812      	ldr	r2, [r2, #0]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007998:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d907      	bls.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	619a      	str	r2, [r3, #24]
 80079b6:	e002      	b.n	80079be <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f040 80b9 	bne.w	8007b3a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d126      	bne.n	8007a1e <HAL_PCD_EP_DB_Transmit+0xc8>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	4413      	add	r3, r2
 80079e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	011a      	lsls	r2, r3, #4
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e01a      	b.n	8007a54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d116      	bne.n	8007a54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	4413      	add	r3, r2
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	011a      	lsls	r2, r3, #4
 8007a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	2200      	movs	r2, #0
 8007a52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d126      	bne.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	011a      	lsls	r2, r3, #4
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e017      	b.n	8007ae0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d113      	bne.n	8007ae0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	4413      	add	r3, r2
 8007ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	011a      	lsls	r2, r3, #4
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	2200      	movs	r2, #0
 8007ade:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f005 fac0 	bl	800d06c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 82fc 	beq.w	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b12:	82fb      	strh	r3, [r7, #22]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	8afb      	ldrh	r3, [r7, #22]
 8007b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	8013      	strh	r3, [r2, #0]
 8007b38:	e2da      	b.n	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d021      	beq.n	8007b88 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	441a      	add	r2, r3
 8007b70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	f040 82ae 	bne.w	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	695a      	ldr	r2, [r3, #20]
 8007b98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007b9c:	441a      	add	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	69da      	ldr	r2, [r3, #28]
 8007ba6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007baa:	441a      	add	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6a1a      	ldr	r2, [r3, #32]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d30b      	bcc.n	8007bd4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	6a1a      	ldr	r2, [r3, #32]
 8007bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bcc:	1ad2      	subs	r2, r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	621a      	str	r2, [r3, #32]
 8007bd2:	e017      	b.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d108      	bne.n	8007bee <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8007bdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007bec:	e00a      	b.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d165      	bne.n	8007cd8 <HAL_PCD_EP_DB_Transmit+0x382>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c20:	4413      	add	r3, r2
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c4a:	d91d      	bls.n	8007c88 <HAL_PCD_EP_DB_Transmit+0x332>
 8007c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <HAL_PCD_EP_DB_Transmit+0x310>
 8007c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c62:	3b01      	subs	r3, #1
 8007c64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	029b      	lsls	r3, r3, #10
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	4313      	orrs	r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	801a      	strh	r2, [r3, #0]
 8007c86:	e044      	b.n	8007d12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_PCD_EP_DB_Transmit+0x350>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	e035      	b.n	8007d12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8007cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	e01c      	b.n	8007d12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d118      	bne.n	8007d12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cf4:	4413      	add	r3, r2
 8007cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	011a      	lsls	r2, r3, #4
 8007cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d10:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6959      	ldr	r1, [r3, #20]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	891a      	ldrh	r2, [r3, #8]
 8007d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f004 f911 	bl	800bf4a <USB_WritePMA>
 8007d28:	e1e2      	b.n	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3306      	adds	r3, #6
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d52:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d307      	bcc.n	8007d72 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007d6a:	1ad2      	subs	r2, r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	619a      	str	r2, [r3, #24]
 8007d70:	e002      	b.n	8007d78 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2200      	movs	r2, #0
 8007d76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 80c0 	bne.w	8007f02 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d126      	bne.n	8007dd8 <HAL_PCD_EP_DB_Transmit+0x482>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d9e:	4413      	add	r3, r2
 8007da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	011a      	lsls	r2, r3, #4
 8007da8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007daa:	4413      	add	r3, r2
 8007dac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007db0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	e01a      	b.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d116      	bne.n	8007e0e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007df4:	4413      	add	r3, r2
 8007df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	011a      	lsls	r2, r3, #4
 8007dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d12b      	bne.n	8007e74 <HAL_PCD_EP_DB_Transmit+0x51e>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e30:	4413      	add	r3, r2
 8007e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	011a      	lsls	r2, r3, #4
 8007e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	e017      	b.n	8007ea4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d113      	bne.n	8007ea4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	461a      	mov	r2, r3
 8007e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e8a:	4413      	add	r3, r2
 8007e8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	011a      	lsls	r2, r3, #4
 8007e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e96:	4413      	add	r3, r2
 8007e98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f005 f8de 	bl	800d06c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f040 811a 	bne.w	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]
 8007f00:	e0f6      	b.n	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d121      	bne.n	8007f50 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	f040 80ca 	bne.w	80080f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007f64:	441a      	add	r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	69da      	ldr	r2, [r3, #28]
 8007f6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007f72:	441a      	add	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d30b      	bcc.n	8007f9c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6a1a      	ldr	r2, [r3, #32]
 8007f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f94:	1ad2      	subs	r2, r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	621a      	str	r2, [r3, #32]
 8007f9a:	e017      	b.n	8007fcc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d108      	bne.n	8007fb6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007fa4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007fb4:	e00a      	b.n	8007fcc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d165      	bne.n	80080a6 <HAL_PCD_EP_DB_Transmit+0x750>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fee:	4413      	add	r3, r2
 8007ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	011a      	lsls	r2, r3, #4
 8007ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800800c:	b29a      	uxth	r2, r3
 800800e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008016:	2b3e      	cmp	r3, #62	@ 0x3e
 8008018:	d91d      	bls.n	8008056 <HAL_PCD_EP_DB_Transmit+0x700>
 800801a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <HAL_PCD_EP_DB_Transmit+0x6de>
 800802e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008030:	3b01      	subs	r3, #1
 8008032:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29a      	uxth	r2, r3
 800803a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29b      	uxth	r3, r3
 8008046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804e:	b29a      	uxth	r2, r3
 8008050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	e041      	b.n	80080da <HAL_PCD_EP_DB_Transmit+0x784>
 8008056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10a      	bne.n	8008074 <HAL_PCD_EP_DB_Transmit+0x71e>
 800805e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800806c:	b29a      	uxth	r2, r3
 800806e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	e032      	b.n	80080da <HAL_PCD_EP_DB_Transmit+0x784>
 8008074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800807c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_PCD_EP_DB_Transmit+0x738>
 8008088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800808a:	3301      	adds	r3, #1
 800808c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800808e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e019      	b.n	80080da <HAL_PCD_EP_DB_Transmit+0x784>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d115      	bne.n	80080da <HAL_PCD_EP_DB_Transmit+0x784>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080bc:	4413      	add	r3, r2
 80080be:	657b      	str	r3, [r7, #84]	@ 0x54
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	011a      	lsls	r2, r3, #4
 80080c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c8:	4413      	add	r3, r2
 80080ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80080d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	895a      	ldrh	r2, [r3, #10]
 80080e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f003 ff2d 	bl	800bf4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810a:	82bb      	strh	r3, [r7, #20]
 800810c:	8abb      	ldrh	r3, [r7, #20]
 800810e:	f083 0310 	eor.w	r3, r3, #16
 8008112:	82bb      	strh	r3, [r7, #20]
 8008114:	8abb      	ldrh	r3, [r7, #20]
 8008116:	f083 0320 	eor.w	r3, r3, #32
 800811a:	82bb      	strh	r3, [r7, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8abb      	ldrh	r3, [r7, #20]
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3790      	adds	r7, #144	@ 0x90
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008150:	4b03      	ldr	r3, [pc, #12]	@ (8008160 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008152:	2201      	movs	r2, #1
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	bf00      	nop
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	420e0020 	.word	0x420e0020

08008164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e272      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8087 	beq.w	8008292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008184:	4b92      	ldr	r3, [pc, #584]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 030c 	and.w	r3, r3, #12
 800818c:	2b04      	cmp	r3, #4
 800818e:	d00c      	beq.n	80081aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008190:	4b8f      	ldr	r3, [pc, #572]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 030c 	and.w	r3, r3, #12
 8008198:	2b08      	cmp	r3, #8
 800819a:	d112      	bne.n	80081c2 <HAL_RCC_OscConfig+0x5e>
 800819c:	4b8c      	ldr	r3, [pc, #560]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a8:	d10b      	bne.n	80081c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081aa:	4b89      	ldr	r3, [pc, #548]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d06c      	beq.n	8008290 <HAL_RCC_OscConfig+0x12c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d168      	bne.n	8008290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e24c      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ca:	d106      	bne.n	80081da <HAL_RCC_OscConfig+0x76>
 80081cc:	4b80      	ldr	r3, [pc, #512]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a7f      	ldr	r2, [pc, #508]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e02e      	b.n	8008238 <HAL_RCC_OscConfig+0xd4>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10c      	bne.n	80081fc <HAL_RCC_OscConfig+0x98>
 80081e2:	4b7b      	ldr	r3, [pc, #492]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a7a      	ldr	r2, [pc, #488]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4b78      	ldr	r3, [pc, #480]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a77      	ldr	r2, [pc, #476]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80081f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	e01d      	b.n	8008238 <HAL_RCC_OscConfig+0xd4>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008204:	d10c      	bne.n	8008220 <HAL_RCC_OscConfig+0xbc>
 8008206:	4b72      	ldr	r3, [pc, #456]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a71      	ldr	r2, [pc, #452]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800820c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	4b6f      	ldr	r3, [pc, #444]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a6e      	ldr	r2, [pc, #440]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	e00b      	b.n	8008238 <HAL_RCC_OscConfig+0xd4>
 8008220:	4b6b      	ldr	r3, [pc, #428]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a6a      	ldr	r2, [pc, #424]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	4b68      	ldr	r3, [pc, #416]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a67      	ldr	r2, [pc, #412]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d013      	beq.n	8008268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008240:	f7fd fcec 	bl	8005c1c <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008248:	f7fd fce8 	bl	8005c1c <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b64      	cmp	r3, #100	@ 0x64
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e200      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800825a:	4b5d      	ldr	r3, [pc, #372]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0xe4>
 8008266:	e014      	b.n	8008292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008268:	f7fd fcd8 	bl	8005c1c <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008270:	f7fd fcd4 	bl	8005c1c <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b64      	cmp	r3, #100	@ 0x64
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e1ec      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008282:	4b53      	ldr	r3, [pc, #332]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x10c>
 800828e:	e000      	b.n	8008292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d063      	beq.n	8008366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800829e:	4b4c      	ldr	r3, [pc, #304]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 030c 	and.w	r3, r3, #12
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80082aa:	4b49      	ldr	r3, [pc, #292]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 030c 	and.w	r3, r3, #12
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d11c      	bne.n	80082f0 <HAL_RCC_OscConfig+0x18c>
 80082b6:	4b46      	ldr	r3, [pc, #280]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d116      	bne.n	80082f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082c2:	4b43      	ldr	r3, [pc, #268]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_RCC_OscConfig+0x176>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d001      	beq.n	80082da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e1c0      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082da:	4b3d      	ldr	r3, [pc, #244]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4939      	ldr	r1, [pc, #228]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082ee:	e03a      	b.n	8008366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d020      	beq.n	800833a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082f8:	4b36      	ldr	r3, [pc, #216]	@ (80083d4 <HAL_RCC_OscConfig+0x270>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082fe:	f7fd fc8d 	bl	8005c1c <HAL_GetTick>
 8008302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008306:	f7fd fc89 	bl	8005c1c <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e1a1      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008318:	4b2d      	ldr	r3, [pc, #180]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008324:	4b2a      	ldr	r3, [pc, #168]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	4927      	ldr	r1, [pc, #156]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	600b      	str	r3, [r1, #0]
 8008338:	e015      	b.n	8008366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800833a:	4b26      	ldr	r3, [pc, #152]	@ (80083d4 <HAL_RCC_OscConfig+0x270>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008340:	f7fd fc6c 	bl	8005c1c <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008348:	f7fd fc68 	bl	8005c1c <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e180      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800835a:	4b1d      	ldr	r3, [pc, #116]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d03a      	beq.n	80083e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d019      	beq.n	80083ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800837a:	4b17      	ldr	r3, [pc, #92]	@ (80083d8 <HAL_RCC_OscConfig+0x274>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008380:	f7fd fc4c 	bl	8005c1c <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008388:	f7fd fc48 	bl	8005c1c <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e160      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <HAL_RCC_OscConfig+0x26c>)
 800839c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80083a6:	2001      	movs	r0, #1
 80083a8:	f000 face 	bl	8008948 <RCC_Delay>
 80083ac:	e01c      	b.n	80083e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083ae:	4b0a      	ldr	r3, [pc, #40]	@ (80083d8 <HAL_RCC_OscConfig+0x274>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083b4:	f7fd fc32 	bl	8005c1c <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ba:	e00f      	b.n	80083dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083bc:	f7fd fc2e 	bl	8005c1c <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d908      	bls.n	80083dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e146      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
 80083ce:	bf00      	nop
 80083d0:	40021000 	.word	0x40021000
 80083d4:	42420000 	.word	0x42420000
 80083d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083dc:	4b92      	ldr	r3, [pc, #584]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e9      	bne.n	80083bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80a6 	beq.w	8008542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083f6:	2300      	movs	r3, #0
 80083f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083fa:	4b8b      	ldr	r3, [pc, #556]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008406:	4b88      	ldr	r3, [pc, #544]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	4a87      	ldr	r2, [pc, #540]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800840c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008410:	61d3      	str	r3, [r2, #28]
 8008412:	4b85      	ldr	r3, [pc, #532]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800841a:	60bb      	str	r3, [r7, #8]
 800841c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008422:	4b82      	ldr	r3, [pc, #520]	@ (800862c <HAL_RCC_OscConfig+0x4c8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d118      	bne.n	8008460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800842e:	4b7f      	ldr	r3, [pc, #508]	@ (800862c <HAL_RCC_OscConfig+0x4c8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a7e      	ldr	r2, [pc, #504]	@ (800862c <HAL_RCC_OscConfig+0x4c8>)
 8008434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800843a:	f7fd fbef 	bl	8005c1c <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008442:	f7fd fbeb 	bl	8005c1c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b64      	cmp	r3, #100	@ 0x64
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e103      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008454:	4b75      	ldr	r3, [pc, #468]	@ (800862c <HAL_RCC_OscConfig+0x4c8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d106      	bne.n	8008476 <HAL_RCC_OscConfig+0x312>
 8008468:	4b6f      	ldr	r3, [pc, #444]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	4a6e      	ldr	r2, [pc, #440]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	6213      	str	r3, [r2, #32]
 8008474:	e02d      	b.n	80084d2 <HAL_RCC_OscConfig+0x36e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10c      	bne.n	8008498 <HAL_RCC_OscConfig+0x334>
 800847e:	4b6a      	ldr	r3, [pc, #424]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	4a69      	ldr	r2, [pc, #420]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	6213      	str	r3, [r2, #32]
 800848a:	4b67      	ldr	r3, [pc, #412]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	4a66      	ldr	r2, [pc, #408]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	6213      	str	r3, [r2, #32]
 8008496:	e01c      	b.n	80084d2 <HAL_RCC_OscConfig+0x36e>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b05      	cmp	r3, #5
 800849e:	d10c      	bne.n	80084ba <HAL_RCC_OscConfig+0x356>
 80084a0:	4b61      	ldr	r3, [pc, #388]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	4a60      	ldr	r2, [pc, #384]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084a6:	f043 0304 	orr.w	r3, r3, #4
 80084aa:	6213      	str	r3, [r2, #32]
 80084ac:	4b5e      	ldr	r3, [pc, #376]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	4a5d      	ldr	r2, [pc, #372]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	6213      	str	r3, [r2, #32]
 80084b8:	e00b      	b.n	80084d2 <HAL_RCC_OscConfig+0x36e>
 80084ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4a5a      	ldr	r2, [pc, #360]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	6213      	str	r3, [r2, #32]
 80084c6:	4b58      	ldr	r3, [pc, #352]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	4a57      	ldr	r2, [pc, #348]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084cc:	f023 0304 	bic.w	r3, r3, #4
 80084d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d015      	beq.n	8008506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084da:	f7fd fb9f 	bl	8005c1c <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e0:	e00a      	b.n	80084f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e2:	f7fd fb9b 	bl	8005c1c <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e0b1      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ee      	beq.n	80084e2 <HAL_RCC_OscConfig+0x37e>
 8008504:	e014      	b.n	8008530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008506:	f7fd fb89 	bl	8005c1c <HAL_GetTick>
 800850a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800850c:	e00a      	b.n	8008524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800850e:	f7fd fb85 	bl	8005c1c <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e09b      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008524:	4b40      	ldr	r3, [pc, #256]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1ee      	bne.n	800850e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d105      	bne.n	8008542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008536:	4b3c      	ldr	r3, [pc, #240]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	4a3b      	ldr	r2, [pc, #236]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800853c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8087 	beq.w	800865a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800854c:	4b36      	ldr	r3, [pc, #216]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 030c 	and.w	r3, r3, #12
 8008554:	2b08      	cmp	r3, #8
 8008556:	d061      	beq.n	800861c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d146      	bne.n	80085ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008560:	4b33      	ldr	r3, [pc, #204]	@ (8008630 <HAL_RCC_OscConfig+0x4cc>)
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008566:	f7fd fb59 	bl	8005c1c <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800856e:	f7fd fb55 	bl	8005c1c <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e06d      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008580:	4b29      	ldr	r3, [pc, #164]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f0      	bne.n	800856e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008594:	d108      	bne.n	80085a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008596:	4b24      	ldr	r3, [pc, #144]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4921      	ldr	r1, [pc, #132]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a19      	ldr	r1, [r3, #32]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	430b      	orrs	r3, r1
 80085ba:	491b      	ldr	r1, [pc, #108]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008630 <HAL_RCC_OscConfig+0x4cc>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c6:	f7fd fb29 	bl	8005c1c <HAL_GetTick>
 80085ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ce:	f7fd fb25 	bl	8005c1c <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e03d      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085e0:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f0      	beq.n	80085ce <HAL_RCC_OscConfig+0x46a>
 80085ec:	e035      	b.n	800865a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ee:	4b10      	ldr	r3, [pc, #64]	@ (8008630 <HAL_RCC_OscConfig+0x4cc>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f4:	f7fd fb12 	bl	8005c1c <HAL_GetTick>
 80085f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085fc:	f7fd fb0e 	bl	8005c1c <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e026      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800860e:	4b06      	ldr	r3, [pc, #24]	@ (8008628 <HAL_RCC_OscConfig+0x4c4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1f0      	bne.n	80085fc <HAL_RCC_OscConfig+0x498>
 800861a:	e01e      	b.n	800865a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d107      	bne.n	8008634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e019      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
 8008628:	40021000 	.word	0x40021000
 800862c:	40007000 	.word	0x40007000
 8008630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008634:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <HAL_RCC_OscConfig+0x500>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	429a      	cmp	r2, r3
 8008646:	d106      	bne.n	8008656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008652:	429a      	cmp	r2, r3
 8008654:	d001      	beq.n	800865a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40021000 	.word	0x40021000

08008668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0d0      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800867c:	4b6a      	ldr	r3, [pc, #424]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d910      	bls.n	80086ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800868a:	4b67      	ldr	r3, [pc, #412]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f023 0207 	bic.w	r2, r3, #7
 8008692:	4965      	ldr	r1, [pc, #404]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	4313      	orrs	r3, r2
 8008698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800869a:	4b63      	ldr	r3, [pc, #396]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d001      	beq.n	80086ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0b8      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d020      	beq.n	80086fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086c4:	4b59      	ldr	r3, [pc, #356]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a58      	ldr	r2, [pc, #352]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80086ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086dc:	4b53      	ldr	r3, [pc, #332]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4a52      	ldr	r2, [pc, #328]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80086e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086e8:	4b50      	ldr	r3, [pc, #320]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	494d      	ldr	r1, [pc, #308]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d040      	beq.n	8008788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d107      	bne.n	800871e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800870e:	4b47      	ldr	r3, [pc, #284]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d115      	bne.n	8008746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e07f      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d107      	bne.n	8008736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008726:	4b41      	ldr	r3, [pc, #260]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e073      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008736:	4b3d      	ldr	r3, [pc, #244]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e06b      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008746:	4b39      	ldr	r3, [pc, #228]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f023 0203 	bic.w	r2, r3, #3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4936      	ldr	r1, [pc, #216]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008754:	4313      	orrs	r3, r2
 8008756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008758:	f7fd fa60 	bl	8005c1c <HAL_GetTick>
 800875c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800875e:	e00a      	b.n	8008776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008760:	f7fd fa5c 	bl	8005c1c <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800876e:	4293      	cmp	r3, r2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e053      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008776:	4b2d      	ldr	r3, [pc, #180]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f003 020c 	and.w	r2, r3, #12
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	429a      	cmp	r2, r3
 8008786:	d1eb      	bne.n	8008760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008788:	4b27      	ldr	r3, [pc, #156]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d210      	bcs.n	80087b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008796:	4b24      	ldr	r3, [pc, #144]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f023 0207 	bic.w	r2, r3, #7
 800879e:	4922      	ldr	r1, [pc, #136]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a6:	4b20      	ldr	r3, [pc, #128]	@ (8008828 <HAL_RCC_ClockConfig+0x1c0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d001      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e032      	b.n	800881e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c4:	4b19      	ldr	r3, [pc, #100]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4916      	ldr	r1, [pc, #88]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	490e      	ldr	r1, [pc, #56]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80087f6:	f000 f821 	bl	800883c <HAL_RCC_GetSysClockFreq>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <HAL_RCC_ClockConfig+0x1c4>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	490a      	ldr	r1, [pc, #40]	@ (8008830 <HAL_RCC_ClockConfig+0x1c8>)
 8008808:	5ccb      	ldrb	r3, [r1, r3]
 800880a:	fa22 f303 	lsr.w	r3, r2, r3
 800880e:	4a09      	ldr	r2, [pc, #36]	@ (8008834 <HAL_RCC_ClockConfig+0x1cc>)
 8008810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <HAL_RCC_ClockConfig+0x1d0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7fd f9be 	bl	8005b98 <HAL_InitTick>

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40022000 	.word	0x40022000
 800882c:	40021000 	.word	0x40021000
 8008830:	0800d410 	.word	0x0800d410
 8008834:	20000000 	.word	0x20000000
 8008838:	20000014 	.word	0x20000014

0800883c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	2300      	movs	r3, #0
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008856:	4b1e      	ldr	r3, [pc, #120]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f003 030c 	and.w	r3, r3, #12
 8008862:	2b04      	cmp	r3, #4
 8008864:	d002      	beq.n	800886c <HAL_RCC_GetSysClockFreq+0x30>
 8008866:	2b08      	cmp	r3, #8
 8008868:	d003      	beq.n	8008872 <HAL_RCC_GetSysClockFreq+0x36>
 800886a:	e027      	b.n	80088bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800886c:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800886e:	613b      	str	r3, [r7, #16]
      break;
 8008870:	e027      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	0c9b      	lsrs	r3, r3, #18
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800887c:	5cd3      	ldrb	r3, [r2, r3]
 800887e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d010      	beq.n	80088ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800888a:	4b11      	ldr	r3, [pc, #68]	@ (80088d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	0c5b      	lsrs	r3, r3, #17
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	4a11      	ldr	r2, [pc, #68]	@ (80088dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8008896:	5cd3      	ldrb	r3, [r2, r3]
 8008898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a0d      	ldr	r2, [pc, #52]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800889e:	fb03 f202 	mul.w	r2, r3, r2
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	e004      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a0c      	ldr	r2, [pc, #48]	@ (80088e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80088b0:	fb02 f303 	mul.w	r3, r2, r3
 80088b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	613b      	str	r3, [r7, #16]
      break;
 80088ba:	e002      	b.n	80088c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80088be:	613b      	str	r3, [r7, #16]
      break;
 80088c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088c2:	693b      	ldr	r3, [r7, #16]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40021000 	.word	0x40021000
 80088d4:	007a1200 	.word	0x007a1200
 80088d8:	0800d428 	.word	0x0800d428
 80088dc:	0800d438 	.word	0x0800d438
 80088e0:	003d0900 	.word	0x003d0900

080088e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088e8:	4b02      	ldr	r3, [pc, #8]	@ (80088f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80088ea:	681b      	ldr	r3, [r3, #0]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr
 80088f4:	20000000 	.word	0x20000000

080088f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088fc:	f7ff fff2 	bl	80088e4 <HAL_RCC_GetHCLKFreq>
 8008900:	4602      	mov	r2, r0
 8008902:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	4903      	ldr	r1, [pc, #12]	@ (800891c <HAL_RCC_GetPCLK1Freq+0x24>)
 800890e:	5ccb      	ldrb	r3, [r1, r3]
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008914:	4618      	mov	r0, r3
 8008916:	bd80      	pop	{r7, pc}
 8008918:	40021000 	.word	0x40021000
 800891c:	0800d420 	.word	0x0800d420

08008920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008924:	f7ff ffde 	bl	80088e4 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	0adb      	lsrs	r3, r3, #11
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4903      	ldr	r1, [pc, #12]	@ (8008944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40021000 	.word	0x40021000
 8008944:	0800d420 	.word	0x0800d420

08008948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008950:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <RCC_Delay+0x34>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a0a      	ldr	r2, [pc, #40]	@ (8008980 <RCC_Delay+0x38>)
 8008956:	fba2 2303 	umull	r2, r3, r2, r3
 800895a:	0a5b      	lsrs	r3, r3, #9
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008964:	bf00      	nop
  }
  while (Delay --);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	60fa      	str	r2, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1f9      	bne.n	8008964 <RCC_Delay+0x1c>
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr
 800897c:	20000000 	.word	0x20000000
 8008980:	10624dd3 	.word	0x10624dd3

08008984 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d07d      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80089a0:	2300      	movs	r3, #0
 80089a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a4:	4b4f      	ldr	r3, [pc, #316]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10d      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089b0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	4a4b      	ldr	r2, [pc, #300]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	61d3      	str	r3, [r2, #28]
 80089bc:	4b49      	ldr	r3, [pc, #292]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089c8:	2301      	movs	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089cc:	4b46      	ldr	r3, [pc, #280]	@ (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d118      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089d8:	4b43      	ldr	r3, [pc, #268]	@ (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a42      	ldr	r2, [pc, #264]	@ (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089e4:	f7fd f91a 	bl	8005c1c <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ea:	e008      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ec:	f7fd f916 	bl	8005c1c <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b64      	cmp	r3, #100	@ 0x64
 80089f8:	d901      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e06d      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089fe:	4b3a      	ldr	r3, [pc, #232]	@ (8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a0a:	4b36      	ldr	r3, [pc, #216]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02e      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d027      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a28:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a32:	4b2e      	ldr	r3, [pc, #184]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a38:	4b2c      	ldr	r3, [pc, #176]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008a3e:	4a29      	ldr	r2, [pc, #164]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d014      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a4e:	f7fd f8e5 	bl	8005c1c <HAL_GetTick>
 8008a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a54:	e00a      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a56:	f7fd f8e1 	bl	8005c1c <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e036      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0ee      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a78:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	4917      	ldr	r1, [pc, #92]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d105      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a90:	4b14      	ldr	r3, [pc, #80]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	4a13      	ldr	r2, [pc, #76]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	490b      	ldr	r1, [pc, #44]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0310 	and.w	r3, r3, #16
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ac6:	4b07      	ldr	r3, [pc, #28]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	40007000 	.word	0x40007000
 8008aec:	42420440 	.word	0x42420440

08008af0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	2300      	movs	r3, #0
 8008afe:	61fb      	str	r3, [r7, #28]
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d00a      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	f200 808a 	bhi.w	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d045      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d075      	beq.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008b26:	e082      	b.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008b28:	4b46      	ldr	r3, [pc, #280]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008b2e:	4b45      	ldr	r3, [pc, #276]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d07b      	beq.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	0c9b      	lsrs	r3, r3, #18
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	4a41      	ldr	r2, [pc, #260]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d015      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b52:	4b3c      	ldr	r3, [pc, #240]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	0c5b      	lsrs	r3, r3, #17
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008b5e:	5cd3      	ldrb	r3, [r2, r3]
 8008b60:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00d      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008b6c:	4a38      	ldr	r2, [pc, #224]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
 8008b7a:	61fb      	str	r3, [r7, #28]
 8008b7c:	e004      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4a34      	ldr	r2, [pc, #208]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
 8008b86:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008b88:	4b2e      	ldr	r3, [pc, #184]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b94:	d102      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	61bb      	str	r3, [r7, #24]
      break;
 8008b9a:	e04a      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	61bb      	str	r3, [r7, #24]
      break;
 8008baa:	e042      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008bac:	4b25      	ldr	r3, [pc, #148]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bbc:	d108      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	e01f      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bda:	d109      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008bdc:	4b19      	ldr	r3, [pc, #100]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008be8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	e00f      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bfa:	d11c      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008bfc:	4b11      	ldr	r3, [pc, #68]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d016      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008c08:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008c0c:	61bb      	str	r3, [r7, #24]
      break;
 8008c0e:	e012      	b.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008c10:	e011      	b.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008c12:	f7ff fe85 	bl	8008920 <HAL_RCC_GetPCLK2Freq>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4b0a      	ldr	r3, [pc, #40]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	0b9b      	lsrs	r3, r3, #14
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	3301      	adds	r3, #1
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2a:	61bb      	str	r3, [r7, #24]
      break;
 8008c2c:	e004      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008c36:	bf00      	nop
    }
  }
  return (frequency);
 8008c38:	69bb      	ldr	r3, [r7, #24]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40021000 	.word	0x40021000
 8008c48:	0800d43c 	.word	0x0800d43c
 8008c4c:	0800d44c 	.word	0x0800d44c
 8008c50:	007a1200 	.word	0x007a1200
 8008c54:	003d0900 	.word	0x003d0900
 8008c58:	aaaaaaab 	.word	0xaaaaaaab

08008c5c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e07a      	b.n	8008d68 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7c5b      	ldrb	r3, [r3, #17]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fc fdbe 	bl	8005804 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f870 	bl	8008d74 <HAL_RTC_WaitForSynchro>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e061      	b.n	8008d68 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f892 	bl	8008dce <RTC_EnterInitMode>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e056      	b.n	8008d68 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0207 	bic.w	r2, r2, #7
 8008cc8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008cd2:	4b27      	ldr	r3, [pc, #156]	@ (8008d70 <HAL_RTC_Init+0x114>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	4a26      	ldr	r2, [pc, #152]	@ (8008d70 <HAL_RTC_Init+0x114>)
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008cde:	4b24      	ldr	r3, [pc, #144]	@ (8008d70 <HAL_RTC_Init+0x114>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4921      	ldr	r1, [pc, #132]	@ (8008d70 <HAL_RTC_Init+0x114>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d003      	beq.n	8008d02 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e00e      	b.n	8008d20 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008d02:	2001      	movs	r0, #1
 8008d04:	f7ff fef4 	bl	8008af0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d08:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2204      	movs	r2, #4
 8008d14:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e026      	b.n	8008d68 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	0c1a      	lsrs	r2, r3, #16
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f002 020f 	and.w	r2, r2, #15
 8008d2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	b292      	uxth	r2, r2
 8008d36:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f870 	bl	8008e1e <RTC_ExitInitMode>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2204      	movs	r2, #4
 8008d48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e00c      	b.n	8008d68 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008d66:	2300      	movs	r3, #0
  }
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40006c00 	.word	0x40006c00

08008d74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e01d      	b.n	8008dc6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0208 	bic.w	r2, r2, #8
 8008d98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008d9a:	f7fc ff3f 	bl	8005c1c <HAL_GetTick>
 8008d9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008da0:	e009      	b.n	8008db6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008da2:	f7fc ff3b 	bl	8005c1c <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008db0:	d901      	bls.n	8008db6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e007      	b.n	8008dc6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0ee      	beq.n	8008da2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008dda:	f7fc ff1f 	bl	8005c1c <HAL_GetTick>
 8008dde:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008de0:	e009      	b.n	8008df6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008de2:	f7fc ff1b 	bl	8005c1c <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df0:	d901      	bls.n	8008df6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e00f      	b.n	8008e16 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ee      	beq.n	8008de2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0210 	orr.w	r2, r2, #16
 8008e12:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0210 	bic.w	r2, r2, #16
 8008e38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008e3a:	f7fc feef 	bl	8005c1c <HAL_GetTick>
 8008e3e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008e40:	e009      	b.n	8008e56 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008e42:	f7fc feeb 	bl	8005c1c <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e50:	d901      	bls.n	8008e56 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e007      	b.n	8008e66 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d0ee      	beq.n	8008e42 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8008e80:	4b07      	ldr	r3, [pc, #28]	@ (8008ea0 <HAL_RTCEx_BKUPWrite+0x30>)
 8008e82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	b292      	uxth	r2, r2
 8008e94:	601a      	str	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr
 8008ea0:	40006c00 	.word	0x40006c00

08008ea4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8008eb6:	4b08      	ldr	r3, [pc, #32]	@ (8008ed8 <HAL_RTCEx_BKUPRead+0x34>)
 8008eb8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr
 8008ed8:	40006c00 	.word	0x40006c00

08008edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e042      	b.n	8008f74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fc fd7c 	bl	8005a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2224      	movs	r2, #36	@ 0x24
 8008f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fee9 	bl	8009cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e024      	b.n	8008fd8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2224      	movs	r2, #36	@ 0x24
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fa4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fc fda8 	bl	8005afc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d112      	bne.n	8009020 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <HAL_UART_Receive_IT+0x26>
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e00b      	b.n	8009022 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009010:	88fb      	ldrh	r3, [r7, #6]
 8009012:	461a      	mov	r2, r3
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fbd9 	bl	80097ce <UART_Start_Receive_IT>
 800901c:	4603      	mov	r3, r0
 800901e:	e000      	b.n	8009022 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009020:	2302      	movs	r3, #2
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b20      	cmp	r3, #32
 8009042:	d112      	bne.n	800906a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_UART_Receive_DMA+0x26>
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e00b      	b.n	800906c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	461a      	mov	r2, r3
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fbed 	bl	8009840 <UART_Start_Receive_DMA>
 8009066:	4603      	mov	r3, r0
 8009068:	e000      	b.n	800906c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800906a:	2302      	movs	r3, #2
  }
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b0ba      	sub	sp, #232	@ 0xe8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80090b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10f      	bne.n	80090da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <HAL_UART_IRQHandler+0x66>
 80090c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fd52 	bl	8009b7c <UART_Receive_IT>
      return;
 80090d8:	e25b      	b.n	8009592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 80de 	beq.w	80092a0 <HAL_UART_IRQHandler+0x22c>
 80090e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80d1 	beq.w	80092a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <HAL_UART_IRQHandler+0xae>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911a:	f043 0201 	orr.w	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <HAL_UART_IRQHandler+0xd2>
 800912e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913e:	f043 0202 	orr.w	r2, r3, #2
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <HAL_UART_IRQHandler+0xf6>
 8009152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009162:	f043 0204 	orr.w	r2, r3, #4
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800916a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d011      	beq.n	800919a <HAL_UART_IRQHandler+0x126>
 8009176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f043 0208 	orr.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 81f2 	beq.w	8009588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <HAL_UART_IRQHandler+0x14e>
 80091b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fcdd 	bl	8009b7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d103      	bne.n	80091ee <HAL_UART_IRQHandler+0x17a>
 80091e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d04f      	beq.n	800928e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbe7 	bl	80099c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d041      	beq.n	8009286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3314      	adds	r3, #20
 8009208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800921c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3314      	adds	r3, #20
 800922a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800922e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800923a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1d9      	bne.n	8009202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d013      	beq.n	800927e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925a:	4a7e      	ldr	r2, [pc, #504]	@ (8009454 <HAL_UART_IRQHandler+0x3e0>)
 800925c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009262:	4618      	mov	r0, r3
 8009264:	f7fc ff9a 	bl	800619c <HAL_DMA_Abort_IT>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d016      	beq.n	800929c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927c:	e00e      	b.n	800929c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fc fb94 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009284:	e00a      	b.n	800929c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fc fb90 	bl	80059ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928c:	e006      	b.n	800929c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fc fb8c 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800929a:	e175      	b.n	8009588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	bf00      	nop
    return;
 800929e:	e173      	b.n	8009588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	f040 814f 	bne.w	8009548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ae:	f003 0310 	and.w	r3, r3, #16
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 8148 	beq.w	8009548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 8141 	beq.w	8009548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092c6:	2300      	movs	r3, #0
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	60bb      	str	r3, [r7, #8]
 80092da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 80b6 	beq.w	8009458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8145 	beq.w	800958c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800930a:	429a      	cmp	r2, r3
 800930c:	f080 813e 	bcs.w	800958c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009316:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	2b20      	cmp	r3, #32
 8009320:	f000 8088 	beq.w	8009434 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800933a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800933e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009342:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	330c      	adds	r3, #12
 800934c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009350:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800935c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1d9      	bne.n	8009324 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009382:	f023 0301 	bic.w	r3, r3, #1
 8009386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3314      	adds	r3, #20
 8009390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009394:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009398:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800939c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e1      	bne.n	8009370 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3314      	adds	r3, #20
 80093b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3314      	adds	r3, #20
 80093cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e3      	bne.n	80093ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009404:	f023 0310 	bic.w	r3, r3, #16
 8009408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	330c      	adds	r3, #12
 8009412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009416:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009418:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800941c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942e:	4618      	mov	r0, r3
 8009430:	f7fc fe78 	bl	8006124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009442:	b29b      	uxth	r3, r3
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	b29b      	uxth	r3, r3
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f8b6 	bl	80095bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009450:	e09c      	b.n	800958c <HAL_UART_IRQHandler+0x518>
 8009452:	bf00      	nop
 8009454:	08009a87 	.word	0x08009a87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009460:	b29b      	uxth	r3, r3
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 808e 	beq.w	8009590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 8089 	beq.w	8009590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800948e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80094a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3314      	adds	r3, #20
 80094d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094da:	633a      	str	r2, [r7, #48]	@ 0x30
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e3      	bne.n	80094b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	60fb      	str	r3, [r7, #12]
   return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0310 	bic.w	r3, r3, #16
 8009512:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	330c      	adds	r3, #12
 800951c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009520:	61fa      	str	r2, [r7, #28]
 8009522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	69b9      	ldr	r1, [r7, #24]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	617b      	str	r3, [r7, #20]
   return(result);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e3      	bne.n	80094fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800953a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f83b 	bl	80095bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009546:	e023      	b.n	8009590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <HAL_UART_IRQHandler+0x4f4>
 8009554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 faa4 	bl	8009aae <UART_Transmit_IT>
    return;
 8009566:	e014      	b.n	8009592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00e      	beq.n	8009592 <HAL_UART_IRQHandler+0x51e>
 8009574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d008      	beq.n	8009592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fae3 	bl	8009b4c <UART_EndTransmit_IT>
    return;
 8009586:	e004      	b.n	8009592 <HAL_UART_IRQHandler+0x51e>
    return;
 8009588:	bf00      	nop
 800958a:	e002      	b.n	8009592 <HAL_UART_IRQHandler+0x51e>
      return;
 800958c:	bf00      	nop
 800958e:	e000      	b.n	8009592 <HAL_UART_IRQHandler+0x51e>
      return;
 8009590:	bf00      	nop
  }
}
 8009592:	37e8      	adds	r7, #232	@ 0xe8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr

080095aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bc80      	pop	{r7}
 80095d0:	4770      	bx	lr

080095d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b09c      	sub	sp, #112	@ 0x70
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d172      	bne.n	80096d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80095ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f0:	2200      	movs	r2, #0
 80095f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	330c      	adds	r3, #12
 80095fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009606:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800960a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800960c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	330c      	adds	r3, #12
 8009612:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009614:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009616:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800961a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e5      	bne.n	80095f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3314      	adds	r3, #20
 8009646:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009648:	647a      	str	r2, [r7, #68]	@ 0x44
 800964a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800964e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e5      	bne.n	8009628 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800965c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3314      	adds	r3, #20
 8009662:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	623b      	str	r3, [r7, #32]
   return(result);
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009672:	663b      	str	r3, [r7, #96]	@ 0x60
 8009674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3314      	adds	r3, #20
 800967a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800967c:	633a      	str	r2, [r7, #48]	@ 0x30
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800968a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e5      	bne.n	800965c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009692:	2220      	movs	r2, #32
 8009694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	2b01      	cmp	r3, #1
 800969e:	d119      	bne.n	80096d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	330c      	adds	r3, #12
 80096a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0310 	bic.w	r3, r3, #16
 80096b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80096c0:	61fa      	str	r2, [r7, #28]
 80096c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69b9      	ldr	r1, [r7, #24]
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	617b      	str	r3, [r7, #20]
   return(result);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d6:	2200      	movs	r2, #0
 80096d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d106      	bne.n	80096f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096e6:	4619      	mov	r1, r3
 80096e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096ea:	f7ff ff67 	bl	80095bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096ee:	e002      	b.n	80096f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80096f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096f2:	f7fc f965 	bl	80059c0 <HAL_UART_RxCpltCallback>
}
 80096f6:	bf00      	nop
 80096f8:	3770      	adds	r7, #112	@ 0x70
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2201      	movs	r2, #1
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009716:	2b01      	cmp	r3, #1
 8009718:	d108      	bne.n	800972c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800971e:	085b      	lsrs	r3, r3, #1
 8009720:	b29b      	uxth	r3, r3
 8009722:	4619      	mov	r1, r3
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7ff ff49 	bl	80095bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800972a:	e002      	b.n	8009732 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7ff ff3c 	bl	80095aa <HAL_UART_RxHalfCpltCallback>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009756:	2b00      	cmp	r3, #0
 8009758:	bf14      	ite	ne
 800975a:	2301      	movne	r3, #1
 800975c:	2300      	moveq	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b21      	cmp	r3, #33	@ 0x21
 800976c:	d108      	bne.n	8009780 <UART_DMAError+0x46>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800977a:	68b8      	ldr	r0, [r7, #8]
 800977c:	f000 f8fa 	bl	8009974 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	bf14      	ite	ne
 800978e:	2301      	movne	r3, #1
 8009790:	2300      	moveq	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b22      	cmp	r3, #34	@ 0x22
 80097a0:	d108      	bne.n	80097b4 <UART_DMAError+0x7a>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80097ae:	68b8      	ldr	r0, [r7, #8]
 80097b0:	f000 f907 	bl	80099c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b8:	f043 0210 	orr.w	r2, r3, #16
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f7fc f8f3 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	4613      	mov	r3, r2
 80097da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	88fa      	ldrh	r2, [r7, #6]
 80097ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2222      	movs	r2, #34	@ 0x22
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009812:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0220 	orr.w	r2, r2, #32
 8009832:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr

08009840 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b098      	sub	sp, #96	@ 0x60
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	88fa      	ldrh	r2, [r7, #6]
 8009858:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2222      	movs	r2, #34	@ 0x22
 8009864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800986c:	4a3e      	ldr	r2, [pc, #248]	@ (8009968 <UART_Start_Receive_DMA+0x128>)
 800986e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009874:	4a3d      	ldr	r2, [pc, #244]	@ (800996c <UART_Start_Receive_DMA+0x12c>)
 8009876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987c:	4a3c      	ldr	r2, [pc, #240]	@ (8009970 <UART_Start_Receive_DMA+0x130>)
 800987e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009884:	2200      	movs	r2, #0
 8009886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3304      	adds	r3, #4
 8009898:	4619      	mov	r1, r3
 800989a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	88fb      	ldrh	r3, [r7, #6]
 80098a0:	f7fc fbe0 	bl	8006064 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	613b      	str	r3, [r7, #16]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	613b      	str	r3, [r7, #16]
 80098b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d019      	beq.n	80098f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	330c      	adds	r3, #12
 80098c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	330c      	adds	r3, #12
 80098e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80098e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80098e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e5      	bne.n	80098c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3314      	adds	r3, #20
 80098fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	f043 0301 	orr.w	r3, r3, #1
 800990c:	657b      	str	r3, [r7, #84]	@ 0x54
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3314      	adds	r3, #20
 8009914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009916:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800991c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e5      	bne.n	80098f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3314      	adds	r3, #20
 8009930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	617b      	str	r3, [r7, #20]
   return(result);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009940:	653b      	str	r3, [r7, #80]	@ 0x50
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3314      	adds	r3, #20
 8009948:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800994a:	627a      	str	r2, [r7, #36]	@ 0x24
 800994c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6a39      	ldr	r1, [r7, #32]
 8009950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	61fb      	str	r3, [r7, #28]
   return(result);
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e5      	bne.n	800992a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3760      	adds	r7, #96	@ 0x60
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	080095d3 	.word	0x080095d3
 800996c:	080096ff 	.word	0x080096ff
 8009970:	0800973b 	.word	0x0800973b

08009974 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b089      	sub	sp, #36	@ 0x24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	330c      	adds	r3, #12
 8009982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60bb      	str	r3, [r7, #8]
   return(result);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	330c      	adds	r3, #12
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	61ba      	str	r2, [r7, #24]
 800999e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	613b      	str	r3, [r7, #16]
   return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e5      	bne.n	800997c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80099b8:	bf00      	nop
 80099ba:	3724      	adds	r7, #36	@ 0x24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b095      	sub	sp, #84	@ 0x54
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	330c      	adds	r3, #12
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80099ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e5      	bne.n	80099ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3314      	adds	r3, #20
 8009a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3314      	adds	r3, #20
 8009a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e5      	bne.n	80099fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d119      	bne.n	8009a6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	330c      	adds	r3, #12
 8009a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f023 0310 	bic.w	r3, r3, #16
 8009a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	330c      	adds	r3, #12
 8009a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a5a:	61ba      	str	r2, [r7, #24]
 8009a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6979      	ldr	r1, [r7, #20]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	613b      	str	r3, [r7, #16]
   return(result);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e5      	bne.n	8009a3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a7c:	bf00      	nop
 8009a7e:	3754      	adds	r7, #84	@ 0x54
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr

08009a86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7fb ff83 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b21      	cmp	r3, #33	@ 0x21
 8009ac0:	d13e      	bne.n	8009b40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aca:	d114      	bne.n	8009af6 <UART_Transmit_IT+0x48>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d110      	bne.n	8009af6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ae8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	1c9a      	adds	r2, r3, #2
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	621a      	str	r2, [r3, #32]
 8009af4:	e008      	b.n	8009b08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6211      	str	r1, [r2, #32]
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4619      	mov	r1, r3
 8009b16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10f      	bne.n	8009b3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e000      	b.n	8009b42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b40:	2302      	movs	r3, #2
  }
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bc80      	pop	{r7}
 8009b4a:	4770      	bx	lr

08009b4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff fd13 	bl	8009598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08c      	sub	sp, #48	@ 0x30
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b22      	cmp	r3, #34	@ 0x22
 8009b8e:	f040 80ae 	bne.w	8009cee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9a:	d117      	bne.n	8009bcc <UART_Receive_IT+0x50>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d113      	bne.n	8009bcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	1c9a      	adds	r2, r3, #2
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bca:	e026      	b.n	8009c1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bde:	d007      	beq.n	8009bf0 <UART_Receive_IT+0x74>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <UART_Receive_IT+0x82>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d106      	bne.n	8009bfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	e008      	b.n	8009c10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	3b01      	subs	r3, #1
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4619      	mov	r1, r3
 8009c28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d15d      	bne.n	8009cea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0220 	bic.w	r2, r2, #32
 8009c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695a      	ldr	r2, [r3, #20]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2220      	movs	r2, #32
 8009c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d135      	bne.n	8009ce0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	330c      	adds	r3, #12
 8009c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	613b      	str	r3, [r7, #16]
   return(result);
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f023 0310 	bic.w	r3, r3, #16
 8009c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	330c      	adds	r3, #12
 8009c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c9a:	623a      	str	r2, [r7, #32]
 8009c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	69f9      	ldr	r1, [r7, #28]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e5      	bne.n	8009c7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b10      	cmp	r3, #16
 8009cba:	d10a      	bne.n	8009cd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fc6f 	bl	80095bc <HAL_UARTEx_RxEventCallback>
 8009cde:	e002      	b.n	8009ce6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7fb fe6d 	bl	80059c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e002      	b.n	8009cf0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e000      	b.n	8009cf0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009cee:	2302      	movs	r3, #2
  }
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3730      	adds	r7, #48	@ 0x30
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009d32:	f023 030c 	bic.w	r3, r3, #12
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6812      	ldr	r2, [r2, #0]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8009e0c <UART_SetConfig+0x114>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d103      	bne.n	8009d68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009d60:	f7fe fdde 	bl	8008920 <HAL_RCC_GetPCLK2Freq>
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	e002      	b.n	8009d6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009d68:	f7fe fdc6 	bl	80088f8 <HAL_RCC_GetPCLK1Freq>
 8009d6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009a      	lsls	r2, r3, #2
 8009d78:	441a      	add	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d84:	4a22      	ldr	r2, [pc, #136]	@ (8009e10 <UART_SetConfig+0x118>)
 8009d86:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	0119      	lsls	r1, r3, #4
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009a      	lsls	r2, r3, #2
 8009d98:	441a      	add	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009da4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e10 <UART_SetConfig+0x118>)
 8009da6:	fba3 0302 	umull	r0, r3, r3, r2
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	2064      	movs	r0, #100	@ 0x64
 8009dae:	fb00 f303 	mul.w	r3, r0, r3
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	3332      	adds	r3, #50	@ 0x32
 8009db8:	4a15      	ldr	r2, [pc, #84]	@ (8009e10 <UART_SetConfig+0x118>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dc4:	4419      	add	r1, r3
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	009a      	lsls	r2, r3, #2
 8009dd0:	441a      	add	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8009e10 <UART_SetConfig+0x118>)
 8009dde:	fba3 0302 	umull	r0, r3, r3, r2
 8009de2:	095b      	lsrs	r3, r3, #5
 8009de4:	2064      	movs	r0, #100	@ 0x64
 8009de6:	fb00 f303 	mul.w	r3, r0, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	3332      	adds	r3, #50	@ 0x32
 8009df0:	4a07      	ldr	r2, [pc, #28]	@ (8009e10 <UART_SetConfig+0x118>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	f003 020f 	and.w	r2, r3, #15
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	440a      	add	r2, r1
 8009e02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	40013800 	.word	0x40013800
 8009e10:	51eb851f 	.word	0x51eb851f

08009e14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b09d      	sub	sp, #116	@ 0x74
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d81f      	bhi.n	8009e86 <USB_ActivateEndpoint+0x72>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <USB_ActivateEndpoint+0x38>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e8f 	.word	0x08009e8f
 8009e58:	08009e6b 	.word	0x08009e6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009e5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e68:	e012      	b.n	8009e90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009e6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e6e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009e72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e76:	e00b      	b.n	8009e90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009e78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009e84:	e004      	b.n	8009e90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009e8c:	e000      	b.n	8009e90 <USB_ActivateEndpoint+0x7c>
      break;
 8009e8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	441a      	add	r2, r3
 8009e9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	7812      	ldrb	r2, [r2, #0]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	441a      	add	r2, r3
 8009ede:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	7b1b      	ldrb	r3, [r3, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 8178 	bne.w	800a1f0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8084 	beq.w	800a012 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	011a      	lsls	r2, r3, #4
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f2c:	617b      	str	r3, [r7, #20]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	085b      	lsrs	r3, r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	827b      	strh	r3, [r7, #18]
 8009f4c:	8a7b      	ldrh	r3, [r7, #18]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01b      	beq.n	8009f8e <USB_ActivateEndpoint+0x17a>
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f6c:	823b      	strh	r3, [r7, #16]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	441a      	add	r2, r3
 8009f78:	8a3b      	ldrh	r3, [r7, #16]
 8009f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	78db      	ldrb	r3, [r3, #3]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d020      	beq.n	8009fd8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fac:	81bb      	strh	r3, [r7, #12]
 8009fae:	89bb      	ldrh	r3, [r7, #12]
 8009fb0:	f083 0320 	eor.w	r3, r3, #32
 8009fb4:	81bb      	strh	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	441a      	add	r2, r3
 8009fc0:	89bb      	ldrh	r3, [r7, #12]
 8009fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	8013      	strh	r3, [r2, #0]
 8009fd6:	e2d5      	b.n	800a584 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fee:	81fb      	strh	r3, [r7, #14]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	441a      	add	r2, r3
 8009ffa:	89fb      	ldrh	r3, [r7, #14]
 8009ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	8013      	strh	r3, [r2, #0]
 800a010:	e2b8      	b.n	800a584 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	633b      	str	r3, [r7, #48]	@ 0x30
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a022:	4413      	add	r3, r2
 800a024:	633b      	str	r3, [r7, #48]	@ 0x30
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	011a      	lsls	r2, r3, #4
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	085b      	lsrs	r3, r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a044:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a050:	b29b      	uxth	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	4413      	add	r3, r2
 800a058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	011a      	lsls	r2, r3, #4
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	4413      	add	r3, r2
 800a064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a074:	b29a      	uxth	r2, r3
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a080:	d91d      	bls.n	800a0be <USB_ActivateEndpoint+0x2aa>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	095b      	lsrs	r3, r3, #5
 800a088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 031f 	and.w	r3, r3, #31
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <USB_ActivateEndpoint+0x288>
 800a096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a098:	3b01      	subs	r3, #1
 800a09a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	029b      	lsls	r3, r3, #10
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e026      	b.n	800a10c <USB_ActivateEndpoint+0x2f8>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <USB_ActivateEndpoint+0x2c8>
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	801a      	strh	r2, [r3, #0]
 800a0da:	e017      	b.n	800a10c <USB_ActivateEndpoint+0x2f8>
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	085b      	lsrs	r3, r3, #1
 800a0e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <USB_ActivateEndpoint+0x2e2>
 800a0f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	029b      	lsls	r3, r3, #10
 800a102:	b29b      	uxth	r3, r3
 800a104:	4313      	orrs	r3, r2
 800a106:	b29a      	uxth	r2, r3
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a11a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a11c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d01b      	beq.n	800a15c <USB_ActivateEndpoint+0x348>
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a13a:	843b      	strh	r3, [r7, #32]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	441a      	add	r2, r3
 800a146:	8c3b      	ldrh	r3, [r7, #32]
 800a148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a14c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a158:	b29b      	uxth	r3, r3
 800a15a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d124      	bne.n	800a1ae <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17a:	83bb      	strh	r3, [r7, #28]
 800a17c:	8bbb      	ldrh	r3, [r7, #28]
 800a17e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a182:	83bb      	strh	r3, [r7, #28]
 800a184:	8bbb      	ldrh	r3, [r7, #28]
 800a186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a18a:	83bb      	strh	r3, [r7, #28]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	441a      	add	r2, r3
 800a196:	8bbb      	ldrh	r3, [r7, #28]
 800a198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a19c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	8013      	strh	r3, [r2, #0]
 800a1ac:	e1ea      	b.n	800a584 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1c4:	83fb      	strh	r3, [r7, #30]
 800a1c6:	8bfb      	ldrh	r3, [r7, #30]
 800a1c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1cc:	83fb      	strh	r3, [r7, #30]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	441a      	add	r2, r3
 800a1d8:	8bfb      	ldrh	r3, [r7, #30]
 800a1da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	8013      	strh	r3, [r2, #0]
 800a1ee:	e1c9      	b.n	800a584 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	78db      	ldrb	r3, [r3, #3]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d11e      	bne.n	800a236 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a20e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	441a      	add	r2, r3
 800a21c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a228:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a22c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a230:	b29b      	uxth	r3, r3
 800a232:	8013      	strh	r3, [r2, #0]
 800a234:	e01d      	b.n	800a272 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a24c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	441a      	add	r2, r3
 800a25a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a25e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a26e:	b29b      	uxth	r3, r3
 800a270:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a282:	4413      	add	r3, r2
 800a284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	011a      	lsls	r2, r3, #4
 800a28c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a294:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	891b      	ldrh	r3, [r3, #8]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2a4:	801a      	strh	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2b6:	4413      	add	r3, r2
 800a2b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	011a      	lsls	r2, r3, #4
 800a2c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a2c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	895b      	ldrh	r3, [r3, #10]
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2d8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f040 8093 	bne.w	800a40a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a2f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a2f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01b      	beq.n	800a338 <USB_ActivateEndpoint+0x524>
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a316:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	441a      	add	r2, r3
 800a322:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a32c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a334:	b29b      	uxth	r3, r3
 800a336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a346:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01b      	beq.n	800a388 <USB_ActivateEndpoint+0x574>
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a366:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	441a      	add	r2, r3
 800a372:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a380:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a384:	b29b      	uxth	r3, r3
 800a386:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3a6:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	441a      	add	r2, r3
 800a3ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a3bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	441a      	add	r2, r3
 800a3f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a404:	b29b      	uxth	r3, r3
 800a406:	8013      	strh	r3, [r2, #0]
 800a408:	e0bc      	b.n	800a584 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a41a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a41e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01d      	beq.n	800a462 <USB_ActivateEndpoint+0x64e>
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	b29b      	uxth	r3, r3
 800a434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a43c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	441a      	add	r2, r3
 800a44a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a44e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a45e:	b29b      	uxth	r3, r3
 800a460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a472:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01d      	beq.n	800a4ba <USB_ActivateEndpoint+0x6a6>
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a494:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	441a      	add	r2, r3
 800a4a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a4a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	78db      	ldrb	r3, [r3, #3]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d024      	beq.n	800a50c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4e0:	f083 0320 	eor.w	r3, r3, #32
 800a4e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	441a      	add	r2, r3
 800a4f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a4f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a506:	b29b      	uxth	r3, r3
 800a508:	8013      	strh	r3, [r2, #0]
 800a50a:	e01d      	b.n	800a548 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a51e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a522:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	441a      	add	r2, r3
 800a530:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a53c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a544:	b29b      	uxth	r3, r3
 800a546:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b29b      	uxth	r3, r3
 800a556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a55a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a55e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	441a      	add	r2, r3
 800a56c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a57c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a580:	b29b      	uxth	r3, r3
 800a582:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a584:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3774      	adds	r7, #116	@ 0x74
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bc80      	pop	{r7}
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop

0800a594 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b0c2      	sub	sp, #264	@ 0x108
 800a598:	af00      	add	r7, sp, #0
 800a59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a59e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5a2:	6018      	str	r0, [r3, #0]
 800a5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	f040 86b7 	bne.w	800b32e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	699a      	ldr	r2, [r3, #24]
 800a5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d908      	bls.n	800a5ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a5ec:	e007      	b.n	800a5fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	7b1b      	ldrb	r3, [r3, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d13a      	bne.n	800a684 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6959      	ldr	r1, [r3, #20]
 800a61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	88da      	ldrh	r2, [r3, #6]
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a630:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a634:	6800      	ldr	r0, [r0, #0]
 800a636:	f001 fc88 	bl	800bf4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a64a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a654:	b29b      	uxth	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	4413      	add	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
 800a65e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	011a      	lsls	r2, r3, #4
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	801a      	strh	r2, [r3, #0]
 800a680:	f000 be1f 	b.w	800b2c2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	78db      	ldrb	r3, [r3, #3]
 800a690:	2b02      	cmp	r3, #2
 800a692:	f040 8462 	bne.w	800af5a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6a1a      	ldr	r2, [r3, #32]
 800a6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	f240 83df 	bls.w	800ae72 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6da:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a6fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a704:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a720:	1ad2      	subs	r2, r2, r3
 800a722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a72e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a73c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 81c7 	beq.w	800aae4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	633b      	str	r3, [r7, #48]	@ 0x30
 800a762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d177      	bne.n	800a862 <USB_EPStartXfer+0x2ce>
 800a772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	4413      	add	r3, r2
 800a794:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	011a      	lsls	r2, r3, #4
 800a7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7c4:	d921      	bls.n	800a80a <USB_EPStartXfer+0x276>
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ca:	095b      	lsrs	r3, r3, #5
 800a7cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d4:	f003 031f 	and.w	r3, r3, #31
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <USB_EPStartXfer+0x252>
 800a7dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a802:	b29a      	uxth	r2, r3
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	801a      	strh	r2, [r3, #0]
 800a808:	e050      	b.n	800a8ac <USB_EPStartXfer+0x318>
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <USB_EPStartXfer+0x294>
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29b      	uxth	r3, r3
 800a818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a81c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a820:	b29a      	uxth	r2, r3
 800a822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a824:	801a      	strh	r2, [r3, #0]
 800a826:	e041      	b.n	800a8ac <USB_EPStartXfer+0x318>
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a82c:	085b      	lsrs	r3, r3, #1
 800a82e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d004      	beq.n	800a848 <USB_EPStartXfer+0x2b4>
 800a83e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a842:	3301      	adds	r3, #1
 800a844:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a852:	b29b      	uxth	r3, r3
 800a854:	029b      	lsls	r3, r3, #10
 800a856:	b29b      	uxth	r3, r3
 800a858:	4313      	orrs	r3, r2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e024      	b.n	800a8ac <USB_EPStartXfer+0x318>
 800a862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	785b      	ldrb	r3, [r3, #1]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d11c      	bne.n	800a8ac <USB_EPStartXfer+0x318>
 800a872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a880:	b29b      	uxth	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	4413      	add	r3, r2
 800a888:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	011a      	lsls	r2, r3, #4
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	4413      	add	r3, r2
 800a89c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a8ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	895b      	ldrh	r3, [r3, #10]
 800a8b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6959      	ldr	r1, [r3, #20]
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a8d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a8d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	f001 fb35 	bl	800bf4a <USB_WritePMA>
            ep->xfer_buff += len;
 800a8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	695a      	ldr	r2, [r3, #20]
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f0:	441a      	add	r2, r3
 800a8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6a1a      	ldr	r2, [r3, #32]
 800a90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	429a      	cmp	r2, r3
 800a918:	d90f      	bls.n	800a93a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6a1a      	ldr	r2, [r3, #32]
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92a:	1ad2      	subs	r2, r2, r3
 800a92c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	621a      	str	r2, [r3, #32]
 800a938:	e00e      	b.n	800a958 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2200      	movs	r2, #0
 800a956:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d177      	bne.n	800aa58 <USB_EPStartXfer+0x4c4>
 800a968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a982:	b29b      	uxth	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	4413      	add	r3, r2
 800a98a:	61bb      	str	r3, [r7, #24]
 800a98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	011a      	lsls	r2, r3, #4
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9a2:	617b      	str	r3, [r7, #20]
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	801a      	strh	r2, [r3, #0]
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9ba:	d921      	bls.n	800aa00 <USB_EPStartXfer+0x46c>
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d104      	bne.n	800a9dc <USB_EPStartXfer+0x448>
 800a9d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	029b      	lsls	r3, r3, #10
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	e056      	b.n	800aaae <USB_EPStartXfer+0x51a>
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <USB_EPStartXfer+0x48a>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	801a      	strh	r2, [r3, #0]
 800aa1c:	e047      	b.n	800aaae <USB_EPStartXfer+0x51a>
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <USB_EPStartXfer+0x4aa>
 800aa34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	801a      	strh	r2, [r3, #0]
 800aa56:	e02a      	b.n	800aaae <USB_EPStartXfer+0x51a>
 800aa58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d122      	bne.n	800aaae <USB_EPStartXfer+0x51a>
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	623b      	str	r3, [r7, #32]
 800aa74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	4413      	add	r3, r2
 800aa8a:	623b      	str	r3, [r7, #32]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	011a      	lsls	r2, r3, #4
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aaae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	891b      	ldrh	r3, [r3, #8]
 800aaba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6959      	ldr	r1, [r3, #20]
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aad4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aad8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aadc:	6800      	ldr	r0, [r0, #0]
 800aade:	f001 fa34 	bl	800bf4a <USB_WritePMA>
 800aae2:	e3ee      	b.n	800b2c2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d177      	bne.n	800abe4 <USB_EPStartXfer+0x650>
 800aaf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	461a      	mov	r2, r3
 800ab12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab14:	4413      	add	r3, r2
 800ab16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	011a      	lsls	r2, r3, #4
 800ab26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ab2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab3e:	801a      	strh	r2, [r3, #0]
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab44:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab46:	d921      	bls.n	800ab8c <USB_EPStartXfer+0x5f8>
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4c:	095b      	lsrs	r3, r3, #5
 800ab4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ab52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab56:	f003 031f 	and.w	r3, r3, #31
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <USB_EPStartXfer+0x5d4>
 800ab5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ab62:	3b01      	subs	r3, #1
 800ab64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ab68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	029b      	lsls	r3, r3, #10
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab88:	801a      	strh	r2, [r3, #0]
 800ab8a:	e056      	b.n	800ac3a <USB_EPStartXfer+0x6a6>
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <USB_EPStartXfer+0x616>
 800ab94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aba6:	801a      	strh	r2, [r3, #0]
 800aba8:	e047      	b.n	800ac3a <USB_EPStartXfer+0x6a6>
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	085b      	lsrs	r3, r3, #1
 800abb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <USB_EPStartXfer+0x636>
 800abc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abc4:	3301      	adds	r3, #1
 800abc6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29a      	uxth	r2, r3
 800abd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	029b      	lsls	r3, r3, #10
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4313      	orrs	r3, r2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e02a      	b.n	800ac3a <USB_EPStartXfer+0x6a6>
 800abe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d122      	bne.n	800ac3a <USB_EPStartXfer+0x6a6>
 800abf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	461a      	mov	r2, r3
 800ac12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac14:	4413      	add	r3, r2
 800ac16:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	011a      	lsls	r2, r3, #4
 800ac26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac28:	4413      	add	r3, r2
 800ac2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	891b      	ldrh	r3, [r3, #8]
 800ac46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6959      	ldr	r1, [r3, #20]
 800ac56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ac64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ac68:	6800      	ldr	r0, [r0, #0]
 800ac6a:	f001 f96e 	bl	800bf4a <USB_WritePMA>
            ep->xfer_buff += len;
 800ac6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695a      	ldr	r2, [r3, #20]
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7e:	441a      	add	r2, r3
 800ac80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ac8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6a1a      	ldr	r2, [r3, #32]
 800ac98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d90f      	bls.n	800acc8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a1a      	ldr	r2, [r3, #32]
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb8:	1ad2      	subs	r2, r2, r3
 800acba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	621a      	str	r2, [r3, #32]
 800acc6:	e00e      	b.n	800ace6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800acc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800accc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800acd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800acf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	785b      	ldrb	r3, [r3, #1]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d177      	bne.n	800adf2 <USB_EPStartXfer+0x85e>
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad22:	4413      	add	r3, r2
 800ad24:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	011a      	lsls	r2, r3, #4
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	4413      	add	r3, r2
 800ad38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ad3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4c:	801a      	strh	r2, [r3, #0]
 800ad4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad54:	d921      	bls.n	800ad9a <USB_EPStartXfer+0x806>
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <USB_EPStartXfer+0x7e2>
 800ad6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad70:	3b01      	subs	r3, #1
 800ad72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ad76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	029b      	lsls	r3, r3, #10
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e050      	b.n	800ae3c <USB_EPStartXfer+0x8a8>
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <USB_EPStartXfer+0x824>
 800ada2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e041      	b.n	800ae3c <USB_EPStartXfer+0x8a8>
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <USB_EPStartXfer+0x844>
 800adce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800add8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29a      	uxth	r2, r3
 800adde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	029b      	lsls	r3, r3, #10
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e024      	b.n	800ae3c <USB_EPStartXfer+0x8a8>
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d11c      	bne.n	800ae3c <USB_EPStartXfer+0x8a8>
 800ae02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae16:	4413      	add	r3, r2
 800ae18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	011a      	lsls	r2, r3, #4
 800ae28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ae3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	895b      	ldrh	r3, [r3, #10]
 800ae48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6959      	ldr	r1, [r3, #20]
 800ae58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	f001 f86d 	bl	800bf4a <USB_WritePMA>
 800ae70:	e227      	b.n	800b2c2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ae72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ae82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aea8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aeac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	441a      	add	r2, r3
 800aec6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800aeca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aeea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	461a      	mov	r2, r3
 800aefc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aefe:	4413      	add	r3, r2
 800af00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	011a      	lsls	r2, r3, #4
 800af10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af12:	4413      	add	r3, r2
 800af14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800af18:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af1e:	b29a      	uxth	r2, r3
 800af20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	891b      	ldrh	r3, [r3, #8]
 800af30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6959      	ldr	r1, [r3, #20]
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af44:	b29b      	uxth	r3, r3
 800af46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af52:	6800      	ldr	r0, [r0, #0]
 800af54:	f000 fff9 	bl	800bf4a <USB_WritePMA>
 800af58:	e1b3      	b.n	800b2c2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800af5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6a1a      	ldr	r2, [r3, #32]
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 80c6 	beq.w	800b12c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800afac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d177      	bne.n	800b0ac <USB_EPStartXfer+0xb18>
 800afbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	461a      	mov	r2, r3
 800afda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afdc:	4413      	add	r3, r2
 800afde:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	011a      	lsls	r2, r3, #4
 800afee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aff0:	4413      	add	r3, r2
 800aff2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aff6:	667b      	str	r3, [r7, #100]	@ 0x64
 800aff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	b29b      	uxth	r3, r3
 800affe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b002:	b29a      	uxth	r2, r3
 800b004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b006:	801a      	strh	r2, [r3, #0]
 800b008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b00c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b00e:	d921      	bls.n	800b054 <USB_EPStartXfer+0xac0>
 800b010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b014:	095b      	lsrs	r3, r3, #5
 800b016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b01e:	f003 031f 	and.w	r3, r3, #31
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <USB_EPStartXfer+0xa9c>
 800b026:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b02a:	3b01      	subs	r3, #1
 800b02c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	b29a      	uxth	r2, r3
 800b036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	029b      	lsls	r3, r3, #10
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4313      	orrs	r3, r2
 800b042:	b29b      	uxth	r3, r3
 800b044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b050:	801a      	strh	r2, [r3, #0]
 800b052:	e050      	b.n	800b0f6 <USB_EPStartXfer+0xb62>
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <USB_EPStartXfer+0xade>
 800b05c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b05e:	881b      	ldrh	r3, [r3, #0]
 800b060:	b29b      	uxth	r3, r3
 800b062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b06e:	801a      	strh	r2, [r3, #0]
 800b070:	e041      	b.n	800b0f6 <USB_EPStartXfer+0xb62>
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b076:	085b      	lsrs	r3, r3, #1
 800b078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <USB_EPStartXfer+0xafe>
 800b088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b08c:	3301      	adds	r3, #1
 800b08e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29a      	uxth	r2, r3
 800b098:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	029b      	lsls	r3, r3, #10
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0a8:	801a      	strh	r2, [r3, #0]
 800b0aa:	e024      	b.n	800b0f6 <USB_EPStartXfer+0xb62>
 800b0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	785b      	ldrb	r3, [r3, #1]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d11c      	bne.n	800b0f6 <USB_EPStartXfer+0xb62>
 800b0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0d0:	4413      	add	r3, r2
 800b0d2:	673b      	str	r3, [r7, #112]	@ 0x70
 800b0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	011a      	lsls	r2, r3, #4
 800b0e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b0ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	895b      	ldrh	r3, [r3, #10]
 800b102:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6959      	ldr	r1, [r3, #20]
 800b112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b116:	b29b      	uxth	r3, r3
 800b118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b11c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b120:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b124:	6800      	ldr	r0, [r0, #0]
 800b126:	f000 ff10 	bl	800bf4a <USB_WritePMA>
 800b12a:	e0ca      	b.n	800b2c2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d177      	bne.n	800b22c <USB_EPStartXfer+0xc98>
 800b13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b14c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b156:	b29b      	uxth	r3, r3
 800b158:	461a      	mov	r2, r3
 800b15a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b15c:	4413      	add	r3, r2
 800b15e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	011a      	lsls	r2, r3, #4
 800b16e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b170:	4413      	add	r3, r2
 800b172:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b176:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b182:	b29a      	uxth	r2, r3
 800b184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b18c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b18e:	d921      	bls.n	800b1d4 <USB_EPStartXfer+0xc40>
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b194:	095b      	lsrs	r3, r3, #5
 800b196:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b19e:	f003 031f 	and.w	r3, r3, #31
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d104      	bne.n	800b1b0 <USB_EPStartXfer+0xc1c>
 800b1a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b1b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1b2:	881b      	ldrh	r3, [r3, #0]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	029b      	lsls	r3, r3, #10
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	e05c      	b.n	800b28e <USB_EPStartXfer+0xcfa>
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <USB_EPStartXfer+0xc5e>
 800b1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1ee:	801a      	strh	r2, [r3, #0]
 800b1f0:	e04d      	b.n	800b28e <USB_EPStartXfer+0xcfa>
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <USB_EPStartXfer+0xc7e>
 800b208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b20c:	3301      	adds	r3, #1
 800b20e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	b29a      	uxth	r2, r3
 800b218:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	029b      	lsls	r3, r3, #10
 800b220:	b29b      	uxth	r3, r3
 800b222:	4313      	orrs	r3, r2
 800b224:	b29a      	uxth	r2, r3
 800b226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b228:	801a      	strh	r2, [r3, #0]
 800b22a:	e030      	b.n	800b28e <USB_EPStartXfer+0xcfa>
 800b22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	785b      	ldrb	r3, [r3, #1]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d128      	bne.n	800b28e <USB_EPStartXfer+0xcfa>
 800b23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b24a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b258:	b29b      	uxth	r3, r3
 800b25a:	461a      	mov	r2, r3
 800b25c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b260:	4413      	add	r3, r2
 800b262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	011a      	lsls	r2, r3, #4
 800b274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b278:	4413      	add	r3, r2
 800b27a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b27e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b286:	b29a      	uxth	r2, r3
 800b288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b28c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	891b      	ldrh	r3, [r3, #8]
 800b29a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6959      	ldr	r1, [r3, #20]
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b2b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b2b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b2bc:	6800      	ldr	r0, [r0, #0]
 800b2be:	f000 fe44 	bl	800bf4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2e8:	817b      	strh	r3, [r7, #10]
 800b2ea:	897b      	ldrh	r3, [r7, #10]
 800b2ec:	f083 0310 	eor.w	r3, r3, #16
 800b2f0:	817b      	strh	r3, [r7, #10]
 800b2f2:	897b      	ldrh	r3, [r7, #10]
 800b2f4:	f083 0320 	eor.w	r3, r3, #32
 800b2f8:	817b      	strh	r3, [r7, #10]
 800b2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	441a      	add	r2, r3
 800b314:	897b      	ldrh	r3, [r7, #10]
 800b316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b31a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b31e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b326:	b29b      	uxth	r3, r3
 800b328:	8013      	strh	r3, [r2, #0]
 800b32a:	f000 bcde 	b.w	800bcea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	7b1b      	ldrb	r3, [r3, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 80bb 	bne.w	800b4b6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	699a      	ldr	r2, [r3, #24]
 800b34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d917      	bls.n	800b38c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	699a      	ldr	r2, [r3, #24]
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b37c:	1ad2      	subs	r2, r2, r3
 800b37e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	619a      	str	r2, [r3, #24]
 800b38a:	e00e      	b.n	800b3aa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b38c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b39c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b3aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	011a      	lsls	r2, r3, #4
 800b3e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b3ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b402:	801a      	strh	r2, [r3, #0]
 800b404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b408:	2b3e      	cmp	r3, #62	@ 0x3e
 800b40a:	d924      	bls.n	800b456 <USB_EPStartXfer+0xec2>
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b410:	095b      	lsrs	r3, r3, #5
 800b412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b41a:	f003 031f 	and.w	r3, r3, #31
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d104      	bne.n	800b42c <USB_EPStartXfer+0xe98>
 800b422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b426:	3b01      	subs	r3, #1
 800b428:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	b29a      	uxth	r2, r3
 800b434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b438:	b29b      	uxth	r3, r3
 800b43a:	029b      	lsls	r3, r3, #10
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	b29b      	uxth	r3, r3
 800b442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b450:	801a      	strh	r2, [r3, #0]
 800b452:	f000 bc10 	b.w	800bc76 <USB_EPStartXfer+0x16e2>
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10c      	bne.n	800b478 <USB_EPStartXfer+0xee4>
 800b45e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b46a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b46e:	b29a      	uxth	r2, r3
 800b470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b474:	801a      	strh	r2, [r3, #0]
 800b476:	e3fe      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d004      	beq.n	800b498 <USB_EPStartXfer+0xf04>
 800b48e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b492:	3301      	adds	r3, #1
 800b494:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	029b      	lsls	r3, r3, #10
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4b2:	801a      	strh	r2, [r3, #0]
 800b4b4:	e3df      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	78db      	ldrb	r3, [r3, #3]
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	f040 8218 	bne.w	800b8f8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f040 809d 	bne.w	800b614 <USB_EPStartXfer+0x1080>
 800b4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4fe:	4413      	add	r3, r2
 800b500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	011a      	lsls	r2, r3, #4
 800b512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b516:	4413      	add	r3, r2
 800b518:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b51c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	b29b      	uxth	r3, r3
 800b528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b3e      	cmp	r3, #62	@ 0x3e
 800b542:	d92b      	bls.n	800b59c <USB_EPStartXfer+0x1008>
 800b544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	095b      	lsrs	r3, r3, #5
 800b552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 031f 	and.w	r3, r3, #31
 800b566:	2b00      	cmp	r3, #0
 800b568:	d104      	bne.n	800b574 <USB_EPStartXfer+0xfe0>
 800b56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b56e:	3b01      	subs	r3, #1
 800b570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b580:	b29b      	uxth	r3, r3
 800b582:	029b      	lsls	r3, r3, #10
 800b584:	b29b      	uxth	r3, r3
 800b586:	4313      	orrs	r3, r2
 800b588:	b29b      	uxth	r3, r3
 800b58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b592:	b29a      	uxth	r2, r3
 800b594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b598:	801a      	strh	r2, [r3, #0]
 800b59a:	e070      	b.n	800b67e <USB_EPStartXfer+0x10ea>
 800b59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <USB_EPStartXfer+0x1032>
 800b5ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5c2:	801a      	strh	r2, [r3, #0]
 800b5c4:	e05b      	b.n	800b67e <USB_EPStartXfer+0x10ea>
 800b5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	085b      	lsrs	r3, r3, #1
 800b5d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b5d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d004      	beq.n	800b5f6 <USB_EPStartXfer+0x1062>
 800b5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b5f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b602:	b29b      	uxth	r3, r3
 800b604:	029b      	lsls	r3, r3, #10
 800b606:	b29b      	uxth	r3, r3
 800b608:	4313      	orrs	r3, r2
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b610:	801a      	strh	r2, [r3, #0]
 800b612:	e034      	b.n	800b67e <USB_EPStartXfer+0x10ea>
 800b614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	785b      	ldrb	r3, [r3, #1]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d12c      	bne.n	800b67e <USB_EPStartXfer+0x10ea>
 800b624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b640:	b29b      	uxth	r3, r3
 800b642:	461a      	mov	r2, r3
 800b644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b648:	4413      	add	r3, r2
 800b64a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	011a      	lsls	r2, r3, #4
 800b65c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b660:	4413      	add	r3, r2
 800b662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	b29a      	uxth	r2, r3
 800b678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b67c:	801a      	strh	r2, [r3, #0]
 800b67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f040 809d 	bne.w	800b7d8 <USB_EPStartXfer+0x1244>
 800b69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	011a      	lsls	r2, r3, #4
 800b6d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6da:	4413      	add	r3, r2
 800b6dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b6e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6f6:	801a      	strh	r2, [r3, #0]
 800b6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	2b3e      	cmp	r3, #62	@ 0x3e
 800b706:	d92b      	bls.n	800b760 <USB_EPStartXfer+0x11cc>
 800b708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	095b      	lsrs	r3, r3, #5
 800b716:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	f003 031f 	and.w	r3, r3, #31
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d104      	bne.n	800b738 <USB_EPStartXfer+0x11a4>
 800b72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b732:	3b01      	subs	r3, #1
 800b734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b738:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b744:	b29b      	uxth	r3, r3
 800b746:	029b      	lsls	r3, r3, #10
 800b748:	b29b      	uxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b756:	b29a      	uxth	r2, r3
 800b758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b75c:	801a      	strh	r2, [r3, #0]
 800b75e:	e069      	b.n	800b834 <USB_EPStartXfer+0x12a0>
 800b760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10c      	bne.n	800b78a <USB_EPStartXfer+0x11f6>
 800b770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	b29b      	uxth	r3, r3
 800b778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b77c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b780:	b29a      	uxth	r2, r3
 800b782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b786:	801a      	strh	r2, [r3, #0]
 800b788:	e054      	b.n	800b834 <USB_EPStartXfer+0x12a0>
 800b78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	085b      	lsrs	r3, r3, #1
 800b798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <USB_EPStartXfer+0x1226>
 800b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	029b      	lsls	r3, r3, #10
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7d4:	801a      	strh	r2, [r3, #0]
 800b7d6:	e02d      	b.n	800b834 <USB_EPStartXfer+0x12a0>
 800b7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d125      	bne.n	800b834 <USB_EPStartXfer+0x12a0>
 800b7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b7fe:	4413      	add	r3, r2
 800b800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	011a      	lsls	r2, r3, #4
 800b812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b816:	4413      	add	r3, r2
 800b818:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b81c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b832:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	69db      	ldr	r3, [r3, #28]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 8218 	beq.w	800bc76 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b84a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b866:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b86a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <USB_EPStartXfer+0x12ea>
 800b872:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10d      	bne.n	800b89a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b87e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 81f5 	bne.w	800bc76 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b88c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	f040 81ee 	bne.w	800bc76 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b89e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	441a      	add	r2, r3
 800b8de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b8e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	8013      	strh	r3, [r2, #0]
 800b8f6:	e1be      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	78db      	ldrb	r3, [r3, #3]
 800b904:	2b01      	cmp	r3, #1
 800b906:	f040 81b4 	bne.w	800bc72 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699a      	ldr	r2, [r3, #24]
 800b916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	429a      	cmp	r2, r3
 800b924:	d917      	bls.n	800b956 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699a      	ldr	r2, [r3, #24]
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b946:	1ad2      	subs	r2, r2, r3
 800b948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	619a      	str	r2, [r3, #24]
 800b954:	e00e      	b.n	800b974 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2200      	movs	r2, #0
 800b972:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	785b      	ldrb	r3, [r3, #1]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 8085 	bne.w	800ba90 <USB_EPStartXfer+0x14fc>
 800b986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b98a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	011a      	lsls	r2, r3, #4
 800b9be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b9c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b9de:	801a      	strh	r2, [r3, #0]
 800b9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9e6:	d923      	bls.n	800ba30 <USB_EPStartXfer+0x149c>
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ec:	095b      	lsrs	r3, r3, #5
 800b9ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d104      	bne.n	800ba08 <USB_EPStartXfer+0x1474>
 800b9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba02:	3b01      	subs	r3, #1
 800ba04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ba08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	029b      	lsls	r3, r3, #10
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba2c:	801a      	strh	r2, [r3, #0]
 800ba2e:	e060      	b.n	800baf2 <USB_EPStartXfer+0x155e>
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10c      	bne.n	800ba52 <USB_EPStartXfer+0x14be>
 800ba38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba4e:	801a      	strh	r2, [r3, #0]
 800ba50:	e04f      	b.n	800baf2 <USB_EPStartXfer+0x155e>
 800ba52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba56:	085b      	lsrs	r3, r3, #1
 800ba58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <USB_EPStartXfer+0x14de>
 800ba68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ba72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	029b      	lsls	r3, r3, #10
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4313      	orrs	r3, r2
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba8c:	801a      	strh	r2, [r3, #0]
 800ba8e:	e030      	b.n	800baf2 <USB_EPStartXfer+0x155e>
 800ba90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	785b      	ldrb	r3, [r3, #1]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d128      	bne.n	800baf2 <USB_EPStartXfer+0x155e>
 800baa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800baae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800babc:	b29b      	uxth	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bac4:	4413      	add	r3, r2
 800bac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800baca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	011a      	lsls	r2, r3, #4
 800bad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800badc:	4413      	add	r3, r2
 800bade:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bae2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baea:	b29a      	uxth	r2, r3
 800baec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f040 8085 	bne.w	800bc1c <USB_EPStartXfer+0x1688>
 800bb12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	461a      	mov	r2, r3
 800bb32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb36:	4413      	add	r3, r2
 800bb38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bb3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	011a      	lsls	r2, r3, #4
 800bb4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb4e:	4413      	add	r3, r2
 800bb50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bb54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb6a:	801a      	strh	r2, [r3, #0]
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb70:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb72:	d923      	bls.n	800bbbc <USB_EPStartXfer+0x1628>
 800bb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb78:	095b      	lsrs	r3, r3, #5
 800bb7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb82:	f003 031f 	and.w	r3, r3, #31
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d104      	bne.n	800bb94 <USB_EPStartXfer+0x1600>
 800bb8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	029b      	lsls	r3, r3, #10
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4313      	orrs	r3, r2
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbb8:	801a      	strh	r2, [r3, #0]
 800bbba:	e05c      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <USB_EPStartXfer+0x164a>
 800bbc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e04b      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
 800bbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe2:	085b      	lsrs	r3, r3, #1
 800bbe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <USB_EPStartXfer+0x166a>
 800bbf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	029b      	lsls	r3, r3, #10
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	4313      	orrs	r3, r2
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc18:	801a      	strh	r2, [r3, #0]
 800bc1a:	e02c      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
 800bc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	785b      	ldrb	r3, [r3, #1]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d124      	bne.n	800bc76 <USB_EPStartXfer+0x16e2>
 800bc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bc42:	4413      	add	r3, r2
 800bc44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bc48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	011a      	lsls	r2, r3, #4
 800bc56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bc60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bc6e:	801a      	strh	r2, [r3, #0]
 800bc70:	e001      	b.n	800bc76 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e03a      	b.n	800bcec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bca0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bca4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bca8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bcac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bcb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bcb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800bcb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	441a      	add	r2, r3
 800bcd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800bcd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d020      	beq.n	800bd4a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd1e:	81bb      	strh	r3, [r7, #12]
 800bd20:	89bb      	ldrh	r3, [r7, #12]
 800bd22:	f083 0310 	eor.w	r3, r3, #16
 800bd26:	81bb      	strh	r3, [r7, #12]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	441a      	add	r2, r3
 800bd32:	89bb      	ldrh	r3, [r7, #12]
 800bd34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	8013      	strh	r3, [r2, #0]
 800bd48:	e01f      	b.n	800bd8a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd60:	81fb      	strh	r3, [r7, #14]
 800bd62:	89fb      	ldrh	r3, [r7, #14]
 800bd64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bd68:	81fb      	strh	r3, [r7, #14]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	441a      	add	r2, r3
 800bd74:	89fb      	ldrh	r3, [r7, #14]
 800bd76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bc80      	pop	{r7}
 800bd94:	4770      	bx	lr

0800bd96 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b087      	sub	sp, #28
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	7b1b      	ldrb	r3, [r3, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f040 809d 	bne.w	800bee4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d04c      	beq.n	800be4c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	823b      	strh	r3, [r7, #16]
 800bdc0:	8a3b      	ldrh	r3, [r7, #16]
 800bdc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01b      	beq.n	800be02 <USB_EPClearStall+0x6c>
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bde0:	81fb      	strh	r3, [r7, #14]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	441a      	add	r2, r3
 800bdec:	89fb      	ldrh	r3, [r7, #14]
 800bdee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	78db      	ldrb	r3, [r3, #3]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d06c      	beq.n	800bee4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be20:	81bb      	strh	r3, [r7, #12]
 800be22:	89bb      	ldrh	r3, [r7, #12]
 800be24:	f083 0320 	eor.w	r3, r3, #32
 800be28:	81bb      	strh	r3, [r7, #12]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	441a      	add	r2, r3
 800be34:	89bb      	ldrh	r3, [r7, #12]
 800be36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be46:	b29b      	uxth	r3, r3
 800be48:	8013      	strh	r3, [r2, #0]
 800be4a:	e04b      	b.n	800bee4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	82fb      	strh	r3, [r7, #22]
 800be5a:	8afb      	ldrh	r3, [r7, #22]
 800be5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01b      	beq.n	800be9c <USB_EPClearStall+0x106>
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29b      	uxth	r3, r3
 800be72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be7a:	82bb      	strh	r3, [r7, #20]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	441a      	add	r2, r3
 800be86:	8abb      	ldrh	r3, [r7, #20]
 800be88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be98:	b29b      	uxth	r3, r3
 800be9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800beae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb2:	827b      	strh	r3, [r7, #18]
 800beb4:	8a7b      	ldrh	r3, [r7, #18]
 800beb6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800beba:	827b      	strh	r3, [r7, #18]
 800bebc:	8a7b      	ldrh	r3, [r7, #18]
 800bebe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bec2:	827b      	strh	r3, [r7, #18]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	441a      	add	r2, r3
 800bece:	8a7b      	ldrh	r3, [r7, #18]
 800bed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bedc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	371c      	adds	r7, #28
 800beea:	46bd      	mov	sp, r7
 800beec:	bc80      	pop	{r7}
 800beee:	4770      	bx	lr

0800bef0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2280      	movs	r2, #128	@ 0x80
 800bf06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bc80      	pop	{r7}
 800bf14:	4770      	bx	lr

0800bf16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bf16:	b480      	push	{r7}
 800bf18:	b085      	sub	sp, #20
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bf28:	68fb      	ldr	r3, [r7, #12]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr

0800bf4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b08b      	sub	sp, #44	@ 0x2c
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	4611      	mov	r1, r2
 800bf56:	461a      	mov	r2, r3
 800bf58:	460b      	mov	r3, r1
 800bf5a:	80fb      	strh	r3, [r7, #6]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf60:	88bb      	ldrh	r3, [r7, #4]
 800bf62:	3301      	adds	r3, #1
 800bf64:	085b      	lsrs	r3, r3, #1
 800bf66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	005a      	lsls	r2, r3, #1
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf82:	e01e      	b.n	800bfc2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	b21a      	sxth	r2, r3
 800bf94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	b21b      	sxth	r3, r3
 800bf9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	8a7a      	ldrh	r2, [r7, #18]
 800bfa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	3302      	adds	r3, #2
 800bfae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1dd      	bne.n	800bf84 <USB_WritePMA+0x3a>
  }
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	372c      	adds	r7, #44	@ 0x2c
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bc80      	pop	{r7}
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b08b      	sub	sp, #44	@ 0x2c
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4611      	mov	r1, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	80fb      	strh	r3, [r7, #6]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bfea:	88bb      	ldrh	r3, [r7, #4]
 800bfec:	085b      	lsrs	r3, r3, #1
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	005a      	lsls	r2, r3, #1
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c006:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c00c:	e01b      	b.n	800c046 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	b29b      	uxth	r3, r3
 800c014:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	3302      	adds	r3, #2
 800c01a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	3301      	adds	r3, #1
 800c028:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	0a1b      	lsrs	r3, r3, #8
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	3301      	adds	r3, #1
 800c038:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	3302      	adds	r3, #2
 800c03e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	3b01      	subs	r3, #1
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e0      	bne.n	800c00e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c04c:	88bb      	ldrh	r3, [r7, #4]
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	b29b      	uxth	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d007      	beq.n	800c068 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	b2da      	uxtb	r2, r3
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	701a      	strb	r2, [r3, #0]
  }
}
 800c068:	bf00      	nop
 800c06a:	372c      	adds	r7, #44	@ 0x2c
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c092:	2302      	movs	r3, #2
 800c094:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00c      	beq.n	800c0ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	78fa      	ldrb	r2, [r7, #3]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	4798      	blx	r3
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	4611      	mov	r1, r2
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	4798      	blx	r3

  return USBD_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fed8 	bl	800ceb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c110:	461a      	mov	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800c11e:	f003 031f 	and.w	r3, r3, #31
 800c122:	2b02      	cmp	r3, #2
 800c124:	d016      	beq.n	800c154 <USBD_LL_SetupStage+0x6a>
 800c126:	2b02      	cmp	r3, #2
 800c128:	d81c      	bhi.n	800c164 <USBD_LL_SetupStage+0x7a>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <USBD_LL_SetupStage+0x4a>
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d008      	beq.n	800c144 <USBD_LL_SetupStage+0x5a>
 800c132:	e017      	b.n	800c164 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f9cb 	bl	800c4d8 <USBD_StdDevReq>
      break;
 800c142:	e01a      	b.n	800c17a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fa2d 	bl	800c5ac <USBD_StdItfReq>
      break;
 800c152:	e012      	b.n	800c17a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa6d 	bl	800c63c <USBD_StdEPReq>
      break;
 800c162:	e00a      	b.n	800c17a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800c16a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 f80e 	bl	800d194 <USBD_LL_StallEP>
      break;
 800c178:	bf00      	nop
  }

  return USBD_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	460b      	mov	r3, r1
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d14b      	bne.n	800c230 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c19e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d134      	bne.n	800c214 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d919      	bls.n	800c1ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	68da      	ldr	r2, [r3, #12]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d203      	bcs.n	800c1d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	e002      	b.n	800c1de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 fedd 	bl	800cfa2 <USBD_CtlContinueRx>
 800c1e8:	e038      	b.n	800c25c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00a      	beq.n	800c20c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d105      	bne.n	800c20c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 feda 	bl	800cfc6 <USBD_CtlSendStatus>
 800c212:	e023      	b.n	800c25c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c21a:	2b05      	cmp	r3, #5
 800c21c:	d11e      	bne.n	800c25c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c226:	2100      	movs	r1, #0
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 ffb3 	bl	800d194 <USBD_LL_StallEP>
 800c22e:	e015      	b.n	800c25c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00d      	beq.n	800c258 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c242:	2b03      	cmp	r3, #3
 800c244:	d108      	bne.n	800c258 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	7afa      	ldrb	r2, [r7, #11]
 800c250:	4611      	mov	r1, r2
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	4798      	blx	r3
 800c256:	e001      	b.n	800c25c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c258:	2302      	movs	r3, #2
 800c25a:	e000      	b.n	800c25e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b086      	sub	sp, #24
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	60f8      	str	r0, [r7, #12]
 800c26e:	460b      	mov	r3, r1
 800c270:	607a      	str	r2, [r7, #4]
 800c272:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c274:	7afb      	ldrb	r3, [r7, #11]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d17f      	bne.n	800c37a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3314      	adds	r3, #20
 800c27e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c286:	2b02      	cmp	r3, #2
 800c288:	d15c      	bne.n	800c344 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	429a      	cmp	r2, r3
 800c294:	d915      	bls.n	800c2c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fe65 	bl	800cf7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f001 f815 	bl	800d2ea <USBD_LL_PrepareReceive>
 800c2c0:	e04e      	b.n	800c360 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	6912      	ldr	r2, [r2, #16]
 800c2ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2ce:	fb01 f202 	mul.w	r2, r1, r2
 800c2d2:	1a9b      	subs	r3, r3, r2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11c      	bne.n	800c312 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d316      	bcc.n	800c312 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d20f      	bcs.n	800c312 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 fe41 	bl	800cf7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c304:	2300      	movs	r3, #0
 800c306:	2200      	movs	r2, #0
 800c308:	2100      	movs	r1, #0
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 ffed 	bl	800d2ea <USBD_LL_PrepareReceive>
 800c310:	e026      	b.n	800c360 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c324:	2b03      	cmp	r3, #3
 800c326:	d105      	bne.n	800c334 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c334:	2180      	movs	r1, #128	@ 0x80
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 ff2c 	bl	800d194 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 fe55 	bl	800cfec <USBD_CtlReceiveStatus>
 800c342:	e00d      	b.n	800c360 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d004      	beq.n	800c358 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c358:	2180      	movs	r1, #128	@ 0x80
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 ff1a 	bl	800d194 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c366:	2b01      	cmp	r3, #1
 800c368:	d11d      	bne.n	800c3a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff fe81 	bl	800c072 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c378:	e015      	b.n	800c3a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00d      	beq.n	800c3a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d108      	bne.n	800c3a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	7afa      	ldrb	r2, [r7, #11]
 800c39a:	4611      	mov	r1, r2
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	4798      	blx	r3
 800c3a0:	e001      	b.n	800c3a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	e000      	b.n	800c3a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3b8:	2340      	movs	r3, #64	@ 0x40
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2100      	movs	r1, #0
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fec2 	bl	800d148 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2240      	movs	r2, #64	@ 0x40
 800c3d0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3d4:	2340      	movs	r3, #64	@ 0x40
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2180      	movs	r1, #128	@ 0x80
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 feb4 	bl	800d148 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2240      	movs	r2, #64	@ 0x40
 800c3ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c410:	2b00      	cmp	r3, #0
 800c412:	d009      	beq.n	800c428 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6852      	ldr	r2, [r2, #4]
 800c420:	b2d2      	uxtb	r2, r2
 800c422:	4611      	mov	r1, r2
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	4798      	blx	r3
  }

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	460b      	mov	r3, r1
 800c43c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	78fa      	ldrb	r2, [r7, #3]
 800c442:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2204      	movs	r2, #4
 800c468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	bc80      	pop	{r7}
 800c476:	4770      	bx	lr

0800c478 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c486:	2b04      	cmp	r3, #4
 800c488:	d105      	bne.n	800c496 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bc80      	pop	{r7}
 800c4a0:	4770      	bx	lr

0800c4a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d10b      	bne.n	800c4cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d005      	beq.n	800c4cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4ee:	2b40      	cmp	r3, #64	@ 0x40
 800c4f0:	d005      	beq.n	800c4fe <USBD_StdDevReq+0x26>
 800c4f2:	2b40      	cmp	r3, #64	@ 0x40
 800c4f4:	d84f      	bhi.n	800c596 <USBD_StdDevReq+0xbe>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <USBD_StdDevReq+0x36>
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	d14b      	bne.n	800c596 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3
      break;
 800c50c:	e048      	b.n	800c5a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	2b09      	cmp	r3, #9
 800c514:	d839      	bhi.n	800c58a <USBD_StdDevReq+0xb2>
 800c516:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <USBD_StdDevReq+0x44>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c56d 	.word	0x0800c56d
 800c520:	0800c581 	.word	0x0800c581
 800c524:	0800c58b 	.word	0x0800c58b
 800c528:	0800c577 	.word	0x0800c577
 800c52c:	0800c58b 	.word	0x0800c58b
 800c530:	0800c54f 	.word	0x0800c54f
 800c534:	0800c545 	.word	0x0800c545
 800c538:	0800c58b 	.word	0x0800c58b
 800c53c:	0800c563 	.word	0x0800c563
 800c540:	0800c559 	.word	0x0800c559
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f9dc 	bl	800c904 <USBD_GetDescriptor>
          break;
 800c54c:	e022      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fb3f 	bl	800cbd4 <USBD_SetAddress>
          break;
 800c556:	e01d      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fb7e 	bl	800cc5c <USBD_SetConfig>
          break;
 800c560:	e018      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fc07 	bl	800cd78 <USBD_GetConfig>
          break;
 800c56a:	e013      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fc37 	bl	800cde2 <USBD_GetStatus>
          break;
 800c574:	e00e      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fc65 	bl	800ce48 <USBD_SetFeature>
          break;
 800c57e:	e009      	b.n	800c594 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fc74 	bl	800ce70 <USBD_ClrFeature>
          break;
 800c588:	e004      	b.n	800c594 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fcc9 	bl	800cf24 <USBD_CtlError>
          break;
 800c592:	bf00      	nop
      }
      break;
 800c594:	e004      	b.n	800c5a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fcc3 	bl	800cf24 <USBD_CtlError>
      break;
 800c59e:	bf00      	nop
  }

  return ret;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop

0800c5ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5c2:	2b40      	cmp	r3, #64	@ 0x40
 800c5c4:	d005      	beq.n	800c5d2 <USBD_StdItfReq+0x26>
 800c5c6:	2b40      	cmp	r3, #64	@ 0x40
 800c5c8:	d82e      	bhi.n	800c628 <USBD_StdItfReq+0x7c>
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <USBD_StdItfReq+0x26>
 800c5ce:	2b20      	cmp	r3, #32
 800c5d0:	d12a      	bne.n	800c628 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d81d      	bhi.n	800c61a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d813      	bhi.n	800c610 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	4798      	blx	r3
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d110      	bne.n	800c624 <USBD_StdItfReq+0x78>
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10d      	bne.n	800c624 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fcdc 	bl	800cfc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c60e:	e009      	b.n	800c624 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fc86 	bl	800cf24 <USBD_CtlError>
          break;
 800c618:	e004      	b.n	800c624 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fc81 	bl	800cf24 <USBD_CtlError>
          break;
 800c622:	e000      	b.n	800c626 <USBD_StdItfReq+0x7a>
          break;
 800c624:	bf00      	nop
      }
      break;
 800c626:	e004      	b.n	800c632 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fc7a 	bl	800cf24 <USBD_CtlError>
      break;
 800c630:	bf00      	nop
  }

  return USBD_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	889b      	ldrh	r3, [r3, #4]
 800c64e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c658:	2b40      	cmp	r3, #64	@ 0x40
 800c65a:	d007      	beq.n	800c66c <USBD_StdEPReq+0x30>
 800c65c:	2b40      	cmp	r3, #64	@ 0x40
 800c65e:	f200 8146 	bhi.w	800c8ee <USBD_StdEPReq+0x2b2>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <USBD_StdEPReq+0x40>
 800c666:	2b20      	cmp	r3, #32
 800c668:	f040 8141 	bne.w	800c8ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	4798      	blx	r3
      break;
 800c67a:	e13d      	b.n	800c8f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c684:	2b20      	cmp	r3, #32
 800c686:	d10a      	bne.n	800c69e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	4798      	blx	r3
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	e12d      	b.n	800c8fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d007      	beq.n	800c6b6 <USBD_StdEPReq+0x7a>
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	f300 811b 	bgt.w	800c8e2 <USBD_StdEPReq+0x2a6>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d072      	beq.n	800c796 <USBD_StdEPReq+0x15a>
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d03a      	beq.n	800c72a <USBD_StdEPReq+0xee>
 800c6b4:	e115      	b.n	800c8e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d002      	beq.n	800c6c6 <USBD_StdEPReq+0x8a>
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d015      	beq.n	800c6f0 <USBD_StdEPReq+0xb4>
 800c6c4:	e02b      	b.n	800c71e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6c6:	7bbb      	ldrb	r3, [r7, #14]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00c      	beq.n	800c6e6 <USBD_StdEPReq+0xaa>
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	2b80      	cmp	r3, #128	@ 0x80
 800c6d0:	d009      	beq.n	800c6e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fd5c 	bl	800d194 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c6dc:	2180      	movs	r1, #128	@ 0x80
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fd58 	bl	800d194 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6e4:	e020      	b.n	800c728 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fc1b 	bl	800cf24 <USBD_CtlError>
              break;
 800c6ee:	e01b      	b.n	800c728 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	885b      	ldrh	r3, [r3, #2]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10e      	bne.n	800c716 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <USBD_StdEPReq+0xda>
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	2b80      	cmp	r3, #128	@ 0x80
 800c702:	d008      	beq.n	800c716 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	88db      	ldrh	r3, [r3, #6]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d104      	bne.n	800c716 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c70c:	7bbb      	ldrb	r3, [r7, #14]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fd3f 	bl	800d194 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fc55 	bl	800cfc6 <USBD_CtlSendStatus>

              break;
 800c71c:	e004      	b.n	800c728 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fbff 	bl	800cf24 <USBD_CtlError>
              break;
 800c726:	bf00      	nop
          }
          break;
 800c728:	e0e0      	b.n	800c8ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c730:	2b02      	cmp	r3, #2
 800c732:	d002      	beq.n	800c73a <USBD_StdEPReq+0xfe>
 800c734:	2b03      	cmp	r3, #3
 800c736:	d015      	beq.n	800c764 <USBD_StdEPReq+0x128>
 800c738:	e026      	b.n	800c788 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00c      	beq.n	800c75a <USBD_StdEPReq+0x11e>
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b80      	cmp	r3, #128	@ 0x80
 800c744:	d009      	beq.n	800c75a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c746:	7bbb      	ldrb	r3, [r7, #14]
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fd22 	bl	800d194 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c750:	2180      	movs	r1, #128	@ 0x80
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fd1e 	bl	800d194 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c758:	e01c      	b.n	800c794 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fbe1 	bl	800cf24 <USBD_CtlError>
              break;
 800c762:	e017      	b.n	800c794 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d112      	bne.n	800c792 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c772:	2b00      	cmp	r3, #0
 800c774:	d004      	beq.n	800c780 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c776:	7bbb      	ldrb	r3, [r7, #14]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fd29 	bl	800d1d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fc20 	bl	800cfc6 <USBD_CtlSendStatus>
              }
              break;
 800c786:	e004      	b.n	800c792 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fbca 	bl	800cf24 <USBD_CtlError>
              break;
 800c790:	e000      	b.n	800c794 <USBD_StdEPReq+0x158>
              break;
 800c792:	bf00      	nop
          }
          break;
 800c794:	e0aa      	b.n	800c8ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d002      	beq.n	800c7a6 <USBD_StdEPReq+0x16a>
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d032      	beq.n	800c80a <USBD_StdEPReq+0x1ce>
 800c7a4:	e097      	b.n	800c8d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d007      	beq.n	800c7bc <USBD_StdEPReq+0x180>
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	2b80      	cmp	r3, #128	@ 0x80
 800c7b0:	d004      	beq.n	800c7bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fbb5 	bl	800cf24 <USBD_CtlError>
                break;
 800c7ba:	e091      	b.n	800c8e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	da0b      	bge.n	800c7dc <USBD_StdEPReq+0x1a0>
 800c7c4:	7bbb      	ldrb	r3, [r7, #14]
 800c7c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	3310      	adds	r3, #16
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	3304      	adds	r3, #4
 800c7da:	e00b      	b.n	800c7f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
 800c7de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2202      	movs	r2, #2
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fb9f 	bl	800cf46 <USBD_CtlSendData>
              break;
 800c808:	e06a      	b.n	800c8e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c80a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	da11      	bge.n	800c836 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c812:	7bbb      	ldrb	r3, [r7, #14]
 800c814:	f003 020f 	and.w	r2, r3, #15
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	440b      	add	r3, r1
 800c824:	3318      	adds	r3, #24
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d117      	bne.n	800c85c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fb78 	bl	800cf24 <USBD_CtlError>
                  break;
 800c834:	e054      	b.n	800c8e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c836:	7bbb      	ldrb	r3, [r7, #14]
 800c838:	f003 020f 	and.w	r2, r3, #15
 800c83c:	6879      	ldr	r1, [r7, #4]
 800c83e:	4613      	mov	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d104      	bne.n	800c85c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fb65 	bl	800cf24 <USBD_CtlError>
                  break;
 800c85a:	e041      	b.n	800c8e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c85c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	da0b      	bge.n	800c87c <USBD_StdEPReq+0x240>
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c86a:	4613      	mov	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	3310      	adds	r3, #16
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	4413      	add	r3, r2
 800c878:	3304      	adds	r3, #4
 800c87a:	e00b      	b.n	800c894 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	4413      	add	r3, r2
 800c892:	3304      	adds	r3, #4
 800c894:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <USBD_StdEPReq+0x266>
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
 800c89e:	2b80      	cmp	r3, #128	@ 0x80
 800c8a0:	d103      	bne.n	800c8aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	e00e      	b.n	800c8c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fcae 	bl	800d210 <USBD_LL_IsStallEP>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	e002      	b.n	800c8c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fb39 	bl	800cf46 <USBD_CtlSendData>
              break;
 800c8d4:	e004      	b.n	800c8e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fb23 	bl	800cf24 <USBD_CtlError>
              break;
 800c8de:	bf00      	nop
          }
          break;
 800c8e0:	e004      	b.n	800c8ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fb1d 	bl	800cf24 <USBD_CtlError>
          break;
 800c8ea:	bf00      	nop
      }
      break;
 800c8ec:	e004      	b.n	800c8f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fb17 	bl	800cf24 <USBD_CtlError>
      break;
 800c8f6:	bf00      	nop
  }

  return ret;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	885b      	ldrh	r3, [r3, #2]
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	2b06      	cmp	r3, #6
 800c926:	f200 8128 	bhi.w	800cb7a <USBD_GetDescriptor+0x276>
 800c92a:	a201      	add	r2, pc, #4	@ (adr r2, 800c930 <USBD_GetDescriptor+0x2c>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c94d 	.word	0x0800c94d
 800c934:	0800c965 	.word	0x0800c965
 800c938:	0800c9a5 	.word	0x0800c9a5
 800c93c:	0800cb7b 	.word	0x0800cb7b
 800c940:	0800cb7b 	.word	0x0800cb7b
 800c944:	0800cb1b 	.word	0x0800cb1b
 800c948:	0800cb47 	.word	0x0800cb47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	7c12      	ldrb	r2, [r2, #16]
 800c958:	f107 0108 	add.w	r1, r7, #8
 800c95c:	4610      	mov	r0, r2
 800c95e:	4798      	blx	r3
 800c960:	60f8      	str	r0, [r7, #12]
      break;
 800c962:	e112      	b.n	800cb8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7c1b      	ldrb	r3, [r3, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10d      	bne.n	800c988 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c974:	f107 0208 	add.w	r2, r7, #8
 800c978:	4610      	mov	r0, r2
 800c97a:	4798      	blx	r3
 800c97c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	2202      	movs	r2, #2
 800c984:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c986:	e100      	b.n	800cb8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c990:	f107 0208 	add.w	r2, r7, #8
 800c994:	4610      	mov	r0, r2
 800c996:	4798      	blx	r3
 800c998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	2202      	movs	r2, #2
 800c9a0:	701a      	strb	r2, [r3, #0]
      break;
 800c9a2:	e0f2      	b.n	800cb8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	885b      	ldrh	r3, [r3, #2]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	f200 80ac 	bhi.w	800cb08 <USBD_GetDescriptor+0x204>
 800c9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b8 <USBD_GetDescriptor+0xb4>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800c9d1 	.word	0x0800c9d1
 800c9bc:	0800ca05 	.word	0x0800ca05
 800c9c0:	0800ca39 	.word	0x0800ca39
 800c9c4:	0800ca6d 	.word	0x0800ca6d
 800c9c8:	0800caa1 	.word	0x0800caa1
 800c9cc:	0800cad5 	.word	0x0800cad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	7c12      	ldrb	r2, [r2, #16]
 800c9e8:	f107 0108 	add.w	r1, r7, #8
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	4798      	blx	r3
 800c9f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9f2:	e091      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa94 	bl	800cf24 <USBD_CtlError>
            err++;
 800c9fc:	7afb      	ldrb	r3, [r7, #11]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	72fb      	strb	r3, [r7, #11]
          break;
 800ca02:	e089      	b.n	800cb18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00b      	beq.n	800ca28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	7c12      	ldrb	r2, [r2, #16]
 800ca1c:	f107 0108 	add.w	r1, r7, #8
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
 800ca24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca26:	e077      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fa7a 	bl	800cf24 <USBD_CtlError>
            err++;
 800ca30:	7afb      	ldrb	r3, [r7, #11]
 800ca32:	3301      	adds	r3, #1
 800ca34:	72fb      	strb	r3, [r7, #11]
          break;
 800ca36:	e06f      	b.n	800cb18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00b      	beq.n	800ca5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	7c12      	ldrb	r2, [r2, #16]
 800ca50:	f107 0108 	add.w	r1, r7, #8
 800ca54:	4610      	mov	r0, r2
 800ca56:	4798      	blx	r3
 800ca58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca5a:	e05d      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fa60 	bl	800cf24 <USBD_CtlError>
            err++;
 800ca64:	7afb      	ldrb	r3, [r7, #11]
 800ca66:	3301      	adds	r3, #1
 800ca68:	72fb      	strb	r3, [r7, #11]
          break;
 800ca6a:	e055      	b.n	800cb18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00b      	beq.n	800ca90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	7c12      	ldrb	r2, [r2, #16]
 800ca84:	f107 0108 	add.w	r1, r7, #8
 800ca88:	4610      	mov	r0, r2
 800ca8a:	4798      	blx	r3
 800ca8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca8e:	e043      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fa46 	bl	800cf24 <USBD_CtlError>
            err++;
 800ca98:	7afb      	ldrb	r3, [r7, #11]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca9e:	e03b      	b.n	800cb18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00b      	beq.n	800cac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800cab2:	695b      	ldr	r3, [r3, #20]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	7c12      	ldrb	r2, [r2, #16]
 800cab8:	f107 0108 	add.w	r1, r7, #8
 800cabc:	4610      	mov	r0, r2
 800cabe:	4798      	blx	r3
 800cac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cac2:	e029      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fa2c 	bl	800cf24 <USBD_CtlError>
            err++;
 800cacc:	7afb      	ldrb	r3, [r7, #11]
 800cace:	3301      	adds	r3, #1
 800cad0:	72fb      	strb	r3, [r7, #11]
          break;
 800cad2:	e021      	b.n	800cb18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00b      	beq.n	800caf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	7c12      	ldrb	r2, [r2, #16]
 800caec:	f107 0108 	add.w	r1, r7, #8
 800caf0:	4610      	mov	r0, r2
 800caf2:	4798      	blx	r3
 800caf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caf6:	e00f      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fa12 	bl	800cf24 <USBD_CtlError>
            err++;
 800cb00:	7afb      	ldrb	r3, [r7, #11]
 800cb02:	3301      	adds	r3, #1
 800cb04:	72fb      	strb	r3, [r7, #11]
          break;
 800cb06:	e007      	b.n	800cb18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa0a 	bl	800cf24 <USBD_CtlError>
          err++;
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	3301      	adds	r3, #1
 800cb14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cb16:	e038      	b.n	800cb8a <USBD_GetDescriptor+0x286>
 800cb18:	e037      	b.n	800cb8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7c1b      	ldrb	r3, [r3, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d109      	bne.n	800cb36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2a:	f107 0208 	add.w	r2, r7, #8
 800cb2e:	4610      	mov	r0, r2
 800cb30:	4798      	blx	r3
 800cb32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb34:	e029      	b.n	800cb8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb36:	6839      	ldr	r1, [r7, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f9f3 	bl	800cf24 <USBD_CtlError>
        err++;
 800cb3e:	7afb      	ldrb	r3, [r7, #11]
 800cb40:	3301      	adds	r3, #1
 800cb42:	72fb      	strb	r3, [r7, #11]
      break;
 800cb44:	e021      	b.n	800cb8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	7c1b      	ldrb	r3, [r3, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10d      	bne.n	800cb6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb56:	f107 0208 	add.w	r2, r7, #8
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	4798      	blx	r3
 800cb5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3301      	adds	r3, #1
 800cb64:	2207      	movs	r2, #7
 800cb66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb68:	e00f      	b.n	800cb8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f9d9 	bl	800cf24 <USBD_CtlError>
        err++;
 800cb72:	7afb      	ldrb	r3, [r7, #11]
 800cb74:	3301      	adds	r3, #1
 800cb76:	72fb      	strb	r3, [r7, #11]
      break;
 800cb78:	e007      	b.n	800cb8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f9d1 	bl	800cf24 <USBD_CtlError>
      err++;
 800cb82:	7afb      	ldrb	r3, [r7, #11]
 800cb84:	3301      	adds	r3, #1
 800cb86:	72fb      	strb	r3, [r7, #11]
      break;
 800cb88:	bf00      	nop
  }

  if (err != 0U)
 800cb8a:	7afb      	ldrb	r3, [r7, #11]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d11c      	bne.n	800cbca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cb90:	893b      	ldrh	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d011      	beq.n	800cbba <USBD_GetDescriptor+0x2b6>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	88db      	ldrh	r3, [r3, #6]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00d      	beq.n	800cbba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	88da      	ldrh	r2, [r3, #6]
 800cba2:	893b      	ldrh	r3, [r7, #8]
 800cba4:	4293      	cmp	r3, r2
 800cba6:	bf28      	it	cs
 800cba8:	4613      	movcs	r3, r2
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cbae:	893b      	ldrh	r3, [r7, #8]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	68f9      	ldr	r1, [r7, #12]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f9c6 	bl	800cf46 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	88db      	ldrh	r3, [r3, #6]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d104      	bne.n	800cbcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f9ff 	bl	800cfc6 <USBD_CtlSendStatus>
 800cbc8:	e000      	b.n	800cbcc <USBD_GetDescriptor+0x2c8>
    return;
 800cbca:	bf00      	nop
    }
  }
}
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop

0800cbd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	889b      	ldrh	r3, [r3, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d130      	bne.n	800cc48 <USBD_SetAddress+0x74>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	88db      	ldrh	r3, [r3, #6]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d12c      	bne.n	800cc48 <USBD_SetAddress+0x74>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbf4:	d828      	bhi.n	800cc48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d104      	bne.n	800cc16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f988 	bl	800cf24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc14:	e01d      	b.n	800cc52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7bfa      	ldrb	r2, [r7, #15]
 800cc1a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fb1f 	bl	800d266 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f9cc 	bl	800cfc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d004      	beq.n	800cc3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc3c:	e009      	b.n	800cc52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc46:	e004      	b.n	800cc52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f96a 	bl	800cf24 <USBD_CtlError>
  }
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
	...

0800cc5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	885b      	ldrh	r3, [r3, #2]
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b41      	ldr	r3, [pc, #260]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cc6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc70:	4b40      	ldr	r3, [pc, #256]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d904      	bls.n	800cc82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f952 	bl	800cf24 <USBD_CtlError>
 800cc80:	e075      	b.n	800cd6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d002      	beq.n	800cc92 <USBD_SetConfig+0x36>
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d023      	beq.n	800ccd8 <USBD_SetConfig+0x7c>
 800cc90:	e062      	b.n	800cd58 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800cc92:	4b38      	ldr	r3, [pc, #224]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01a      	beq.n	800ccd0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800cc9a:	4b36      	ldr	r3, [pc, #216]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2203      	movs	r2, #3
 800cca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ccac:	4b31      	ldr	r3, [pc, #196]	@ (800cd74 <USBD_SetConfig+0x118>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff f9e7 	bl	800c086 <USBD_SetClassConfig>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d104      	bne.n	800ccc8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f92f 	bl	800cf24 <USBD_CtlError>
            return;
 800ccc6:	e052      	b.n	800cd6e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f97c 	bl	800cfc6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ccce:	e04e      	b.n	800cd6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f978 	bl	800cfc6 <USBD_CtlSendStatus>
        break;
 800ccd6:	e04a      	b.n	800cd6e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ccd8:	4b26      	ldr	r3, [pc, #152]	@ (800cd74 <USBD_SetConfig+0x118>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d112      	bne.n	800cd06 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2202      	movs	r2, #2
 800cce4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800cce8:	4b22      	ldr	r3, [pc, #136]	@ (800cd74 <USBD_SetConfig+0x118>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	461a      	mov	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ccf2:	4b20      	ldr	r3, [pc, #128]	@ (800cd74 <USBD_SetConfig+0x118>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff f9e3 	bl	800c0c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f961 	bl	800cfc6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cd04:	e033      	b.n	800cd6e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800cd06:	4b1b      	ldr	r3, [pc, #108]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d01d      	beq.n	800cd50 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff f9d1 	bl	800c0c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cd22:	4b14      	ldr	r3, [pc, #80]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	461a      	mov	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cd2c:	4b11      	ldr	r3, [pc, #68]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff f9a7 	bl	800c086 <USBD_SetClassConfig>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d104      	bne.n	800cd48 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f8ef 	bl	800cf24 <USBD_CtlError>
            return;
 800cd46:	e012      	b.n	800cd6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f93c 	bl	800cfc6 <USBD_CtlSendStatus>
        break;
 800cd4e:	e00e      	b.n	800cd6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f938 	bl	800cfc6 <USBD_CtlSendStatus>
        break;
 800cd56:	e00a      	b.n	800cd6e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f8e2 	bl	800cf24 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cd60:	4b04      	ldr	r3, [pc, #16]	@ (800cd74 <USBD_SetConfig+0x118>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff f9ac 	bl	800c0c4 <USBD_ClrClassConfig>
        break;
 800cd6c:	bf00      	nop
    }
  }
}
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20000608 	.word	0x20000608

0800cd78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	88db      	ldrh	r3, [r3, #6]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d004      	beq.n	800cd94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f8c9 	bl	800cf24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd92:	e022      	b.n	800cdda <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	dc02      	bgt.n	800cda4 <USBD_GetConfig+0x2c>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dc03      	bgt.n	800cdaa <USBD_GetConfig+0x32>
 800cda2:	e015      	b.n	800cdd0 <USBD_GetConfig+0x58>
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d00b      	beq.n	800cdc0 <USBD_GetConfig+0x48>
 800cda8:	e012      	b.n	800cdd0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f8c4 	bl	800cf46 <USBD_CtlSendData>
        break;
 800cdbe:	e00c      	b.n	800cdda <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f8bc 	bl	800cf46 <USBD_CtlSendData>
        break;
 800cdce:	e004      	b.n	800cdda <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f8a6 	bl	800cf24 <USBD_CtlError>
        break;
 800cdd8:	bf00      	nop
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d81e      	bhi.n	800ce36 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	88db      	ldrh	r3, [r3, #6]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d004      	beq.n	800ce0a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f88e 	bl	800cf24 <USBD_CtlError>
        break;
 800ce08:	e01a      	b.n	800ce40 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f043 0202 	orr.w	r2, r3, #2
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f889 	bl	800cf46 <USBD_CtlSendData>
      break;
 800ce34:	e004      	b.n	800ce40 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f873 	bl	800cf24 <USBD_CtlError>
      break;
 800ce3e:	bf00      	nop
  }
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d106      	bne.n	800ce68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f8af 	bl	800cfc6 <USBD_CtlSendStatus>
  }
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce80:	3b01      	subs	r3, #1
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d80b      	bhi.n	800ce9e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	885b      	ldrh	r3, [r3, #2]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d10c      	bne.n	800cea8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f895 	bl	800cfc6 <USBD_CtlSendStatus>
      }
      break;
 800ce9c:	e004      	b.n	800cea8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f83f 	bl	800cf24 <USBD_CtlError>
      break;
 800cea6:	e000      	b.n	800ceaa <USBD_ClrFeature+0x3a>
      break;
 800cea8:	bf00      	nop
  }
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781a      	ldrb	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	785a      	ldrb	r2, [r3, #1]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	3302      	adds	r3, #2
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	3303      	adds	r3, #3
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	021b      	lsls	r3, r3, #8
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4413      	add	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	3304      	adds	r3, #4
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	461a      	mov	r2, r3
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	3305      	adds	r3, #5
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	021b      	lsls	r3, r3, #8
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4413      	add	r3, r2
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	3306      	adds	r3, #6
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	3307      	adds	r3, #7
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	021b      	lsls	r3, r3, #8
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	80da      	strh	r2, [r3, #6]

}
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bc80      	pop	{r7}
 800cf22:	4770      	bx	lr

0800cf24 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cf2e:	2180      	movs	r1, #128	@ 0x80
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 f92f 	bl	800d194 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cf36:	2100      	movs	r1, #0
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f92b 	bl	800d194 <USBD_LL_StallEP>
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	4613      	mov	r3, r2
 800cf52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf68:	88fb      	ldrh	r3, [r7, #6]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f000 f998 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	2100      	movs	r1, #0
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 f986 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	4613      	mov	r3, r2
 800cfae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfb0:	88fb      	ldrh	r3, [r7, #6]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f000 f997 	bl	800d2ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2204      	movs	r2, #4
 800cfd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2100      	movs	r1, #0
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f961 	bl	800d2a4 <USBD_LL_Transmit>

  return USBD_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2205      	movs	r2, #5
 800cff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cffc:	2300      	movs	r3, #0
 800cffe:	2200      	movs	r2, #0
 800d000:	2100      	movs	r1, #0
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f971 	bl	800d2ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d026:	4619      	mov	r1, r3
 800d028:	4610      	mov	r0, r2
 800d02a:	f7ff f85e 	bl	800c0ea <USBD_LL_SetupStage>
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800d048:	78fa      	ldrb	r2, [r7, #3]
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	4613      	mov	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	4413      	add	r3, r2
 800d052:	00db      	lsls	r3, r3, #3
 800d054:	440b      	add	r3, r1
 800d056:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	4619      	mov	r1, r3
 800d060:	f7ff f890 	bl	800c184 <USBD_LL_DataOutStage>
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800d07e:	78fa      	ldrb	r2, [r7, #3]
 800d080:	6879      	ldr	r1, [r7, #4]
 800d082:	4613      	mov	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	440b      	add	r3, r1
 800d08c:	3324      	adds	r3, #36	@ 0x24
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	78fb      	ldrb	r3, [r7, #3]
 800d092:	4619      	mov	r1, r3
 800d094:	f7ff f8e7 	bl	800c266 <USBD_LL_DataInStage>
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd) // usb는 통신할때 항상 1ms 단위로 callback이 호출된다.
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff f9f7 	bl	800c4a2 <USBD_LL_SOF>
}
 800d0b4:	bf00      	nop
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	799b      	ldrb	r3, [r3, #6]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d001      	beq.n	800d0d4 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d0d0:	f7f8 f90d 	bl	80052ee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0da:	7bfa      	ldrb	r2, [r7, #15]
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff f9a7 	bl	800c432 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff f960 	bl	800c3b0 <USBD_LL_Reset>
}
 800d0f0:	bf00      	nop
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff f9a2 	bl	800c450 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7a9b      	ldrb	r3, [r3, #10]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d005      	beq.n	800d120 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d114:	4b04      	ldr	r3, [pc, #16]	@ (800d128 <HAL_PCD_SuspendCallback+0x30>)
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	4a03      	ldr	r2, [pc, #12]	@ (800d128 <HAL_PCD_SuspendCallback+0x30>)
 800d11a:	f043 0306 	orr.w	r3, r3, #6
 800d11e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	e000ed00 	.word	0xe000ed00

0800d12c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7ff f99c 	bl	800c478 <USBD_LL_Resume>
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	4608      	mov	r0, r1
 800d152:	4611      	mov	r1, r2
 800d154:	461a      	mov	r2, r3
 800d156:	4603      	mov	r3, r0
 800d158:	70fb      	strb	r3, [r7, #3]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70bb      	strb	r3, [r7, #2]
 800d15e:	4613      	mov	r3, r2
 800d160:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d170:	78bb      	ldrb	r3, [r7, #2]
 800d172:	883a      	ldrh	r2, [r7, #0]
 800d174:	78f9      	ldrb	r1, [r7, #3]
 800d176:	f7f9 fd99 	bl	8006cac <HAL_PCD_EP_Open>
 800d17a:	4603      	mov	r3, r0
 800d17c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	4618      	mov	r0, r3
 800d182:	f000 f8d5 	bl	800d330 <USBD_Get_USB_Status>
 800d186:	4603      	mov	r3, r0
 800d188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f9 fe3f 	bl	8006e36 <HAL_PCD_EP_SetStall>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f8b6 	bl	800d330 <USBD_Get_USB_Status>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f9 fe80 	bl	8006ef6 <HAL_PCD_EP_ClrStall>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f897 	bl	800d330 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d206:	7bbb      	ldrb	r3, [r7, #14]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d222:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	da0b      	bge.n	800d244 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d22c:	78fb      	ldrb	r3, [r7, #3]
 800d22e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	440b      	add	r3, r1
 800d23e:	3312      	adds	r3, #18
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	e00b      	b.n	800d25c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d24a:	68f9      	ldr	r1, [r7, #12]
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	440b      	add	r3, r1
 800d256:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d25a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	bc80      	pop	{r7}
 800d264:	4770      	bx	lr

0800d266 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	460b      	mov	r3, r1
 800d270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d280:	78fa      	ldrb	r2, [r7, #3]
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f7f9 fced 	bl	8006c64 <HAL_PCD_SetAddress>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	4618      	mov	r0, r3
 800d292:	f000 f84d 	bl	800d330 <USBD_Get_USB_Status>
 800d296:	4603      	mov	r3, r0
 800d298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	607a      	str	r2, [r7, #4]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	72fb      	strb	r3, [r7, #11]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d2c6:	893b      	ldrh	r3, [r7, #8]
 800d2c8:	7af9      	ldrb	r1, [r7, #11]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	f7f9 fd7c 	bl	8006dc8 <HAL_PCD_EP_Transmit>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f82a 	bl	800d330 <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	72fb      	strb	r3, [r7, #11]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d30c:	893b      	ldrh	r3, [r7, #8]
 800d30e:	7af9      	ldrb	r1, [r7, #11]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	f7f9 fd28 	bl	8006d66 <HAL_PCD_EP_Receive>
 800d316:	4603      	mov	r3, r0
 800d318:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 f807 	bl	800d330 <USBD_Get_USB_Status>
 800d322:	4603      	mov	r3, r0
 800d324:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d326:	7dbb      	ldrb	r3, [r7, #22]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b03      	cmp	r3, #3
 800d342:	d817      	bhi.n	800d374 <USBD_Get_USB_Status+0x44>
 800d344:	a201      	add	r2, pc, #4	@ (adr r2, 800d34c <USBD_Get_USB_Status+0x1c>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d35d 	.word	0x0800d35d
 800d350:	0800d363 	.word	0x0800d363
 800d354:	0800d369 	.word	0x0800d369
 800d358:	0800d36f 	.word	0x0800d36f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	73fb      	strb	r3, [r7, #15]
    break;
 800d360:	e00b      	b.n	800d37a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d362:	2302      	movs	r3, #2
 800d364:	73fb      	strb	r3, [r7, #15]
    break;
 800d366:	e008      	b.n	800d37a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d368:	2301      	movs	r3, #1
 800d36a:	73fb      	strb	r3, [r7, #15]
    break;
 800d36c:	e005      	b.n	800d37a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d36e:	2302      	movs	r3, #2
 800d370:	73fb      	strb	r3, [r7, #15]
    break;
 800d372:	e002      	b.n	800d37a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d374:	2302      	movs	r3, #2
 800d376:	73fb      	strb	r3, [r7, #15]
    break;
 800d378:	bf00      	nop
  }
  return usb_status;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3714      	adds	r7, #20
 800d380:	46bd      	mov	sp, r7
 800d382:	bc80      	pop	{r7}
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop

0800d388 <main>:




int main(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
  hwInit();
 800d38c:	f7f8 fbdc 	bl	8005b48 <hwInit>
  apInit();
 800d390:	f7f7 fedc 	bl	800514c <apInit>

  apMain();
 800d394:	f7f7 fee8 	bl	8005168 <apMain>

  return 0;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <memset>:
 800d39e:	4603      	mov	r3, r0
 800d3a0:	4402      	add	r2, r0
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d100      	bne.n	800d3a8 <memset+0xa>
 800d3a6:	4770      	bx	lr
 800d3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ac:	e7f9      	b.n	800d3a2 <memset+0x4>
	...

0800d3b0 <__libc_init_array>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	2600      	movs	r6, #0
 800d3b4:	4d0c      	ldr	r5, [pc, #48]	@ (800d3e8 <__libc_init_array+0x38>)
 800d3b6:	4c0d      	ldr	r4, [pc, #52]	@ (800d3ec <__libc_init_array+0x3c>)
 800d3b8:	1b64      	subs	r4, r4, r5
 800d3ba:	10a4      	asrs	r4, r4, #2
 800d3bc:	42a6      	cmp	r6, r4
 800d3be:	d109      	bne.n	800d3d4 <__libc_init_array+0x24>
 800d3c0:	f000 f81a 	bl	800d3f8 <_init>
 800d3c4:	2600      	movs	r6, #0
 800d3c6:	4d0a      	ldr	r5, [pc, #40]	@ (800d3f0 <__libc_init_array+0x40>)
 800d3c8:	4c0a      	ldr	r4, [pc, #40]	@ (800d3f4 <__libc_init_array+0x44>)
 800d3ca:	1b64      	subs	r4, r4, r5
 800d3cc:	10a4      	asrs	r4, r4, #2
 800d3ce:	42a6      	cmp	r6, r4
 800d3d0:	d105      	bne.n	800d3de <__libc_init_array+0x2e>
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
 800d3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d8:	4798      	blx	r3
 800d3da:	3601      	adds	r6, #1
 800d3dc:	e7ee      	b.n	800d3bc <__libc_init_array+0xc>
 800d3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e2:	4798      	blx	r3
 800d3e4:	3601      	adds	r6, #1
 800d3e6:	e7f2      	b.n	800d3ce <__libc_init_array+0x1e>
 800d3e8:	0800d450 	.word	0x0800d450
 800d3ec:	0800d450 	.word	0x0800d450
 800d3f0:	0800d450 	.word	0x0800d450
 800d3f4:	0800d454 	.word	0x0800d454

0800d3f8 <_init>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr

0800d404 <_fini>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr
