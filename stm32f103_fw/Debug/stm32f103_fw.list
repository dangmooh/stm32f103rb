
stm32f103_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c98  0800510c  0800510c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800eda4  0800eda4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee7c  0800ee7c  0000b070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee7c  0800ee7c  0000b070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee7c  0800ee7c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee7c  0800ee7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee80  0800ee80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800ee84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000070  0800eef4  0000b070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  0800eef4  0000baa8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f78  00000000  00000000  0000b099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d46  00000000  00000000  0001d011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00020d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1b  00000000  00000000  00021ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ba  00000000  00000000  00022c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad8f  00000000  00000000  0003edcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba48  00000000  00000000  00059b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e55a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  000e55e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ea238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	@ (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000070 	.word	0x20000070
 8005128:	00000000 	.word	0x00000000
 800512c:	0800ed8c 	.word	0x0800ed8c

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	@ (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000074 	.word	0x20000074
 8005148:	0800ed8c 	.word	0x0800ed8c

0800514c <apInit>:




void apInit(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 8005150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005154:	2000      	movs	r0, #0
 8005156:	f000 fdb7 	bl	8005cc8 <uartOpen>
  uartOpen(_DEF_UART2, 57600);
 800515a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800515e:	2001      	movs	r0, #1
 8005160:	f000 fdb2 	bl	8005cc8 <uartOpen>
}
 8005164:	bf00      	nop
 8005166:	bd80      	pop	{r7, pc}

08005168 <apMain>:

// gcc 계열에서 printf 함수를 사용하려면 syscallback 추가하면 된다.

void apMain(void) //main.c를 최소화하고 ap에서 모든 상위 작업을 진행한다.
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800516e:	f000 f8be 	bl	80052ee <millis>
 8005172:	62f8      	str	r0, [r7, #44]	@ 0x2c
  while(1)
  {
    if (millis() - pre_time >= 500)
 8005174:	f000 f8bb 	bl	80052ee <millis>
 8005178:	4602      	mov	r2, r0
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005182:	d305      	bcc.n	8005190 <apMain+0x28>
    {
      pre_time = millis();
 8005184:	f000 f8b3 	bl	80052ee <millis>
 8005188:	62f8      	str	r0, [r7, #44]	@ 0x2c
      ledToggle(_DEF_LED1);
 800518a:	2000      	movs	r0, #0
 800518c:	f000 fcc6 	bl	8005b1c <ledToggle>

      //logPrintf("logPrintf test %d\n", (int)millis());
    }

    if (uartAvailable(_DEF_UART1) >0)
 8005190:	2000      	movs	r0, #0
 8005192:	f000 fe2f 	bl	8005df4 <uartAvailable>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0eb      	beq.n	8005174 <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 800519c:	2000      	movs	r0, #0
 800519e:	f000 fe53 	bl	8005e48 <uartRead>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

      if (rx_data == '1')
 80051a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ac:	2b31      	cmp	r3, #49	@ 0x31
 80051ae:	d11e      	bne.n	80051ee <apMain+0x86>
      {
        uint8_t buf[32];

        logPrintf("Read... \n");
 80051b0:	482d      	ldr	r0, [pc, #180]	@ (8005268 <apMain+0x100>)
 80051b2:	f008 ff7d 	bl	800e0b0 <puts>

        flashRead(0x8000000 + (120*1024), buf, 32); // 시작 주소 0x8000000 + (120*1024) 에서 32byte를 읽어온다.
 80051b6:	463b      	mov	r3, r7
 80051b8:	2220      	movs	r2, #32
 80051ba:	4619      	mov	r1, r3
 80051bc:	482b      	ldr	r0, [pc, #172]	@ (800526c <apMain+0x104>)
 80051be:	f000 fbcd 	bl	800595c <flashRead>

        for (int i=0; i<32; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c6:	e00f      	b.n	80051e8 <apMain+0x80>
        {
          logPrintf("0x%X : 0x%X\n", 0x8000000 + (120*1024) + i, buf[i]); // 32byte를 화면에 출력한다.
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80051ce:	f503 33f0 	add.w	r3, r3, #122880	@ 0x1e000
 80051d2:	4639      	mov	r1, r7
 80051d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d6:	440a      	add	r2, r1
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4824      	ldr	r0, [pc, #144]	@ (8005270 <apMain+0x108>)
 80051de:	f008 feff 	bl	800dfe0 <iprintf>
        for (int i=0; i<32; i++)
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	3301      	adds	r3, #1
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	2b1f      	cmp	r3, #31
 80051ec:	ddec      	ble.n	80051c8 <apMain+0x60>
        }
      }

      if (rx_data == '2')
 80051ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051f2:	2b32      	cmp	r3, #50	@ 0x32
 80051f4:	d110      	bne.n	8005218 <apMain+0xb0>
      {
        logPrintf("Erase... \n");
 80051f6:	481f      	ldr	r0, [pc, #124]	@ (8005274 <apMain+0x10c>)
 80051f8:	f008 ff5a 	bl	800e0b0 <puts>

        if (flashErase(0x8000000 + (120*1024), 32) == true) // 시작 주소 0x8000000 + (120*1024) 에서 32byte를 지운다.
 80051fc:	2120      	movs	r1, #32
 80051fe:	481b      	ldr	r0, [pc, #108]	@ (800526c <apMain+0x104>)
 8005200:	f000 fb10 	bl	8005824 <flashErase>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <apMain+0xaa>
        {
          logPrintf("Erase OK \n");
 800520a:	481b      	ldr	r0, [pc, #108]	@ (8005278 <apMain+0x110>)
 800520c:	f008 ff50 	bl	800e0b0 <puts>
 8005210:	e002      	b.n	8005218 <apMain+0xb0>
        }
        else
        {
          logPrintf("Erase Fail \n");
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <apMain+0x114>)
 8005214:	f008 ff4c 	bl	800e0b0 <puts>
        }
      }

      if (rx_data == '3')
 8005218:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800521c:	2b33      	cmp	r3, #51	@ 0x33
 800521e:	d1a9      	bne.n	8005174 <apMain+0xc>
      {
        uint8_t buf[32];

        for (int i=0; i<32; i++)
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
 8005224:	e009      	b.n	800523a <apMain+0xd2>
        {
          buf[i] = i;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	b2d9      	uxtb	r1, r3
 800522a:	463a      	mov	r2, r7
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	4413      	add	r3, r2
 8005230:	460a      	mov	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<32; i++)
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	3301      	adds	r3, #1
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	2b1f      	cmp	r3, #31
 800523e:	ddf2      	ble.n	8005226 <apMain+0xbe>
        }

        logPrintf("Write... \n");
 8005240:	480f      	ldr	r0, [pc, #60]	@ (8005280 <apMain+0x118>)
 8005242:	f008 ff35 	bl	800e0b0 <puts>

        if (flashWrite(0x8000000 + (120*1024), buf, 32) == true) // 시작 주소 0x8000000 + (120*1024) 에서 32byte를 쓴다.
 8005246:	463b      	mov	r3, r7
 8005248:	2220      	movs	r2, #32
 800524a:	4619      	mov	r1, r3
 800524c:	4807      	ldr	r0, [pc, #28]	@ (800526c <apMain+0x104>)
 800524e:	f000 fb3f 	bl	80058d0 <flashWrite>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <apMain+0xf8>
        {
          logPrintf("Write OK \n");
 8005258:	480a      	ldr	r0, [pc, #40]	@ (8005284 <apMain+0x11c>)
 800525a:	f008 ff29 	bl	800e0b0 <puts>
 800525e:	e789      	b.n	8005174 <apMain+0xc>
        }
        else
        {
          logPrintf("Write Fail \n");
 8005260:	4809      	ldr	r0, [pc, #36]	@ (8005288 <apMain+0x120>)
 8005262:	f008 ff25 	bl	800e0b0 <puts>
    if (millis() - pre_time >= 500)
 8005266:	e785      	b.n	8005174 <apMain+0xc>
 8005268:	0800eda4 	.word	0x0800eda4
 800526c:	0801e000 	.word	0x0801e000
 8005270:	0800edb0 	.word	0x0800edb0
 8005274:	0800edc0 	.word	0x0800edc0
 8005278:	0800edcc 	.word	0x0800edcc
 800527c:	0800edd8 	.word	0x0800edd8
 8005280:	0800ede4 	.word	0x0800ede4
 8005284:	0800edf0 	.word	0x0800edf0
 8005288:	0800edfc 	.word	0x0800edfc

0800528c <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
  HAL_Init();
 8005292:	f000 fefb 	bl	800608c <HAL_Init>
  SystemClock_Config();
 8005296:	f000 f840 	bl	800531a <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE(); // gpio 수정시 복사
 800529a:	4b0e      	ldr	r3, [pc, #56]	@ (80052d4 <bspInit+0x48>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <bspInit+0x48>)
 80052a0:	f043 0304 	orr.w	r3, r3, #4
 80052a4:	6193      	str	r3, [r2, #24]
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <bspInit+0x48>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <bspInit+0x48>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	4a07      	ldr	r2, [pc, #28]	@ (80052d4 <bspInit+0x48>)
 80052b8:	f043 0320 	orr.w	r3, r3, #32
 80052bc:	6193      	str	r3, [r2, #24]
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <bspInit+0x48>)
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]

  //MX_USB_DEVICE_Init();

}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000

080052d8 <delay>:

void delay(uint32_t ms)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 ff35 	bl	8006150 <HAL_Delay>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <millis>:

uint32_t millis(void)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	af00      	add	r7, sp, #0
  return HAL_GetTick(); //sysTick에서 증가하는 uwTick 값을 가져옴
 80052f2:	f000 ff23 	bl	800613c <HAL_GetTick>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd80      	pop	{r7, pc}

080052fc <__io_putchar>:
int __io_putchar(int ch) // printf 호출 시 하나의 charactor를 보낸다.
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  // usb로 printf 캐릭터 전송
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	2201      	movs	r2, #1
 8005308:	4619      	mov	r1, r3
 800530a:	2000      	movs	r0, #0
 800530c:	f000 fdb8 	bl	8005e80 <uartWrite>

  return 1;
 8005310:	2301      	movs	r3, #1
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <SystemClock_Config>:




void SystemClock_Config(void)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b094      	sub	sp, #80	@ 0x50
 800531e:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005320:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005324:	2228      	movs	r2, #40	@ 0x28
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f008 ffa1 	bl	800e270 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	611a      	str	r2, [r3, #16]
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	60da      	str	r2, [r3, #12]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800534a:	2305      	movs	r3, #5
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800534e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005354:	2300      	movs	r3, #0
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005358:	2301      	movs	r3, #1
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800535c:	2301      	movs	r3, #1
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005360:	2302      	movs	r3, #2
 8005362:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005364:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005368:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800536a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005374:	4618      	mov	r0, r3
 8005376:	f003 fb6d 	bl	8008a54 <HAL_RCC_OscConfig>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <SystemClock_Config+0x6a>
{
  Error_Handler();
 8005380:	f000 f82a 	bl	80053d8 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005384:	230f      	movs	r3, #15
 8005386:	617b      	str	r3, [r7, #20]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005388:	2302      	movs	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005394:	623b      	str	r3, [r7, #32]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f003 fdd9 	bl	8008f58 <HAL_RCC_ClockConfig>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <SystemClock_Config+0x96>
{
  Error_Handler();
 80053ac:	f000 f814 	bl	80053d8 <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80053b0:	2311      	movs	r3, #17
 80053b2:	607b      	str	r3, [r7, #4]
PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80053b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053b8:	60bb      	str	r3, [r7, #8]
PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 ff57 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SystemClock_Config+0xb6>
{
  Error_Handler();
 80053cc:	f000 f804 	bl	80053d8 <Error_Handler>
}
}
 80053d0:	bf00      	nop
 80053d2:	3750      	adds	r7, #80	@ 0x50
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053dc:	b672      	cpsid	i
}
 80053de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <Error_Handler+0x8>

080053e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <HAL_MspInit+0x5c>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	4a14      	ldr	r2, [pc, #80]	@ (8005440 <HAL_MspInit+0x5c>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6193      	str	r3, [r2, #24]
 80053f6:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_MspInit+0x5c>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4b0f      	ldr	r3, [pc, #60]	@ (8005440 <HAL_MspInit+0x5c>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4a0e      	ldr	r2, [pc, #56]	@ (8005440 <HAL_MspInit+0x5c>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800540c:	61d3      	str	r3, [r2, #28]
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <HAL_MspInit+0x5c>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_MspInit+0x60>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_MspInit+0x60>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	40021000 	.word	0x40021000
 8005444:	40010000 	.word	0x40010000

08005448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <NMI_Handler+0x4>

08005450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <HardFault_Handler+0x4>

08005458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <MemManage_Handler+0x4>

08005460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <BusFault_Handler+0x4>

08005468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <UsageFault_Handler+0x4>

08005470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800548c:	bf00      	nop
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005498:	f000 fe3e 	bl	8006118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800549c:	bf00      	nop
 800549e:	bd80      	pop	{r7, pc}

080054a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054a4:	4802      	ldr	r0, [pc, #8]	@ (80054b0 <DMA1_Channel5_IRQHandler+0x10>)
 80054a6:	f001 f981 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000618 	.word	0x20000618

080054b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80054b8:	4802      	ldr	r0, [pc, #8]	@ (80054c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80054ba:	f001 ff1c 	bl	80072f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000684 	.word	0x20000684

080054c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80054cc:	4802      	ldr	r0, [pc, #8]	@ (80054d8 <USART1_IRQHandler+0x10>)
 80054ce:	f004 fad5 	bl	8009a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200005d0 	.word	0x200005d0

080054dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e00a      	b.n	8005504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054ee:	f3af 8000 	nop.w
 80054f2:	4601      	mov	r1, r0
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	60ba      	str	r2, [r7, #8]
 80054fa:	b2ca      	uxtb	r2, r1
 80054fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	dbf0      	blt.n	80054ee <_read+0x12>
  }

  return len;
 800550c:	687b      	ldr	r3, [r7, #4]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e009      	b.n	800553c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	60ba      	str	r2, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff fee3 	bl	80052fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3301      	adds	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	dbf1      	blt.n	8005528 <_write+0x12>
  }
  return len;
 8005544:	687b      	ldr	r3, [r7, #4]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_close>:

int _close(int file)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005574:	605a      	str	r2, [r3, #4]
  return 0;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <_isatty>:

int _isatty(int file)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800558a:	2301      	movs	r3, #1
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr
	...

080055b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055b8:	4a14      	ldr	r2, [pc, #80]	@ (800560c <_sbrk+0x5c>)
 80055ba:	4b15      	ldr	r3, [pc, #84]	@ (8005610 <_sbrk+0x60>)
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055c4:	4b13      	ldr	r3, [pc, #76]	@ (8005614 <_sbrk+0x64>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055cc:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <_sbrk+0x64>)
 80055ce:	4a12      	ldr	r2, [pc, #72]	@ (8005618 <_sbrk+0x68>)
 80055d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055d2:	4b10      	ldr	r3, [pc, #64]	@ (8005614 <_sbrk+0x64>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d207      	bcs.n	80055f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055e0:	f008 fe94 	bl	800e30c <__errno>
 80055e4:	4603      	mov	r3, r0
 80055e6:	220c      	movs	r2, #12
 80055e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
 80055ee:	e009      	b.n	8005604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055f0:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <_sbrk+0x64>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055f6:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <_sbrk+0x64>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	4a05      	ldr	r2, [pc, #20]	@ (8005614 <_sbrk+0x64>)
 8005600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20005000 	.word	0x20005000
 8005610:	00000400 	.word	0x00000400
 8005614:	2000008c 	.word	0x2000008c
 8005618:	20000aa8 	.word	0x20000aa8

0800561c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005620:	4b03      	ldr	r3, [pc, #12]	@ (8005630 <SystemInit+0x14>)
 8005622:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <SystemInit+0x18>)
 8005624:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000ed00 	.word	0xe000ed00
 8005634:	08005000 	.word	0x08005000

08005638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005638:	f7ff fff0 	bl	800561c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800563c:	480b      	ldr	r0, [pc, #44]	@ (800566c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800563e:	490c      	ldr	r1, [pc, #48]	@ (8005670 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005640:	4a0c      	ldr	r2, [pc, #48]	@ (8005674 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005644:	e002      	b.n	800564c <LoopCopyDataInit>

08005646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800564a:	3304      	adds	r3, #4

0800564c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800564c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800564e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005650:	d3f9      	bcc.n	8005646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005652:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005654:	4c09      	ldr	r4, [pc, #36]	@ (800567c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005658:	e001      	b.n	800565e <LoopFillZerobss>

0800565a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800565a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800565c:	3204      	adds	r2, #4

0800565e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800565e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005660:	d3fb      	bcc.n	800565a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005662:	f008 fe59 	bl	800e318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005666:	f008 fbed 	bl	800de44 <main>
  bx lr
 800566a:	4770      	bx	lr
  ldr r0, =_sdata
 800566c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005670:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005674:	0800ee84 	.word	0x0800ee84
  ldr r2, =_sbss
 8005678:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800567c:	20000aa8 	.word	0x20000aa8

08005680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005680:	e7fe      	b.n	8005680 <ADC1_2_IRQHandler>

08005682 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]


  p_node->in = 0;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf; // buff가 null인 경우 index만 관리한다. 실제 data를 관리하는게 아니라.
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	60da      	str	r2, [r3, #12]

  return ret;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b089      	sub	sp, #36	@ 0x24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;

  for(int i=0; i<length; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	e027      	b.n	800571c <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len; // 다음 in index를 구해서 buf가 비어있는지 확인
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	6892      	ldr	r2, [r2, #8]
 80056d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80056da:	fb01 f202 	mul.w	r2, r1, r2
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

    if(next_in != p_node->out)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d011      	beq.n	8005710 <qbufferWrite+0x5a>
    {
      if(p_node->p_buf != NULL) // buf가 NULL이 아니면 write 한다.
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	440b      	add	r3, r1
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in; // NULL인 경우에는 index만 관리한다.
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e002      	b.n	8005716 <qbufferWrite+0x60>
    }
    else // buffer가 꽉차있으면 break
    {
      ret = false;
 8005710:	2300      	movs	r3, #0
 8005712:	77fb      	strb	r3, [r7, #31]
      break;
 8005714:	e006      	b.n	8005724 <qbufferWrite+0x6e>
  for(int i=0; i<length; i++)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d8d3      	bhi.n	80056cc <qbufferWrite+0x16>
    }
  }


  return ret;
 8005724:	7ffb      	ldrb	r3, [r7, #31]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3724      	adds	r7, #36	@ 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint8_t ret;


  for(int i =0; i<length; i++)
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e026      	b.n	8005790 <qbufferRead+0x60>
  {
    if(p_node->p_buf != NULL) // buf가 NULL이 아니면 Read.
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <qbufferRead+0x2e>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	441a      	add	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	440b      	add	r3, r1
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in) // data가 있다면 out index 증가
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00c      	beq.n	8005784 <qbufferRead+0x54>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	fbb3 f1f2 	udiv	r1, r3, r2
 8005778:	fb01 f202 	mul.w	r2, r1, r2
 800577c:	1a9a      	subs	r2, r3, r2
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	e002      	b.n	800578a <qbufferRead+0x5a>
    }
    else
    {
      ret = false;
 8005784:	2300      	movs	r3, #0
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	e006      	b.n	8005798 <qbufferRead+0x68>
  for(int i =0; i<length; i++)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3301      	adds	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d8d4      	bhi.n	8005742 <qbufferRead+0x12>
    }
  }


  return ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node) // 현재 buffer에 있는 개수를 넘긴다.
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c8:	fb01 f202 	mul.w	r2, r1, r2
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  return ret;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <flashInit>:
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);



bool flashInit(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	e012      	b.n	800580e <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x8000000 + i*1024;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	4619      	mov	r1, r3
 80057f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005820 <flashInit+0x44>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = 1024;
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <flashInit+0x44>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005806:	809a      	strh	r2, [r3, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3301      	adds	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b7f      	cmp	r3, #127	@ 0x7f
 8005812:	dde9      	ble.n	80057e8 <flashInit+0xc>
  }

  return true;
 8005814:	2301      	movs	r3, #1
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	20000090 	.word	0x20000090

08005824 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length) // sector나 page 단위로 지우고
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	@ 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t  page_error;

  int16_t start_sector_num  = -1;               // 시작 sector를 찾기 위해서
 8005834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005838:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint32_t sector_count     = 0;                // NbPage에 대응되는 값
 800583a:	2300      	movs	r3, #0
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
 8005842:	e015      	b.n	8005870 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true) // 지워야하는 sector인지 확인
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	b29b      	uxth	r3, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f8a7 	bl	80059a0 <flashInSector>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8005858:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	da01      	bge.n	8005864 <flashErase+0x40>
      {
        start_sector_num = i;
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }
      sector_count++;
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	3301      	adds	r3, #1
 8005868:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	3301      	adds	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	2b7f      	cmp	r3, #127	@ 0x7f
 8005874:	dde6      	ble.n	8005844 <flashErase+0x20>
    }
  }

  if (sector_count > 0)
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d021      	beq.n	80058c0 <flashErase+0x9c>
  {
    HAL_FLASH_Unlock();
 800587c:	f001 f93a 	bl	8006af4 <HAL_FLASH_Unlock>

    init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
    init.Banks      = FLASH_BANK_1;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
    init.PageAddress= flash_tbl[start_sector_num].addr;
 8005888:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800588c:	4a0f      	ldr	r2, [pc, #60]	@ (80058cc <flashErase+0xa8>)
 800588e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005892:	61bb      	str	r3, [r7, #24]
    init.NbPages    = sector_count;
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	61fb      	str	r3, [r7, #28]

    status =  HAL_FLASHEx_Erase(&init, &page_error);
 8005898:	f107 020c 	add.w	r2, r7, #12
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fa0e 	bl	8006cc4 <HAL_FLASHEx_Erase>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (status == HAL_OK)
 80058ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <flashErase+0x98>
    {
      ret = true;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    HAL_FLASH_Lock();
 80058bc:	f001 f940 	bl	8006b40 <HAL_FLASH_Lock>
  }


  return ret;
 80058c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	@ 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000090 	.word	0x20000090

080058d0 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length) // byte나 ward 단위로 쓴다.
{
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80058dc:	2301      	movs	r3, #1
 80058de:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  if (addr%2 != 0) // aline된 주소만 받는걸로 간단하게 처리
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <flashWrite+0x1e>
  {
    return false;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e032      	b.n	8005954 <flashWrite+0x84>
  }

  HAL_FLASH_Unlock();
 80058ee:	f001 f901 	bl	8006af4 <HAL_FLASH_Unlock>

  for (int i=0; i <length; i+=2)
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	e026      	b.n	8005946 <flashWrite+0x76>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;   // 첫 번째 byte를 쓰고
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;   // 두 번째 byte를 그 다음에 쓴다. 16bit data를 만든다.
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	3301      	adds	r3, #1
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	b21a      	sxth	r2, r3
 8005910:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005914:	4313      	orrs	r3, r2
 8005916:	b21b      	sxth	r3, r3
 8005918:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data); // 최소 단위 16bit로 쓸 수 있다. 주소를 aline 해줘야 한다.
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	18d1      	adds	r1, r2, r3
 8005920:	8afb      	ldrh	r3, [r7, #22]
 8005922:	2200      	movs	r2, #0
 8005924:	461c      	mov	r4, r3
 8005926:	4615      	mov	r5, r2
 8005928:	4622      	mov	r2, r4
 800592a:	462b      	mov	r3, r5
 800592c:	2001      	movs	r0, #1
 800592e:	f001 f871 	bl	8006a14 <HAL_FLASH_Program>
 8005932:	4603      	mov	r3, r0
 8005934:	757b      	strb	r3, [r7, #21]

    if (status != HAL_OK)
 8005936:	7d7b      	ldrb	r3, [r7, #21]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <flashWrite+0x70>
    {
      ret = false;
 800593c:	2300      	movs	r3, #0
 800593e:	77fb      	strb	r3, [r7, #31]
  for (int i=0; i <length; i+=2)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	3302      	adds	r3, #2
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d8d4      	bhi.n	80058f8 <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 800594e:	f001 f8f7 	bl	8006b40 <HAL_FLASH_Lock>

  return ret;
 8005952:	7ffb      	ldrb	r3, [r7, #31]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bdb0      	pop	{r4, r5, r7, pc}

0800595c <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	@ 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8005968:	2301      	movs	r3, #1
 800596a:	76fb      	strb	r3, [r7, #27]

  uint8_t *p_byte = (uint8_t *)addr;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	617b      	str	r3, [r7, #20]

  for (int i=0; i<length; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e00a      	b.n	800598c <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	441a      	add	r2, r3
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	440b      	add	r3, r1
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<length; i++)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3301      	adds	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d8f0      	bhi.n	8005976 <flashRead+0x1a>
  }

  return ret;
 8005994:	7efb      	ldrb	r3, [r7, #27]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	@ 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <flashInSector>:

// 지우고자 하는 주소 영역을 줬을 때 포함되어 있는 섹터 영역을 찾기 위해서 처음부터 돌면서 그 섹터가 주소 영역에 포함되어 있는지 return 하는 함수
bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length) // 확인하고자 하는 sector 번호 및 지워야하는 addr, length
{
 80059a0:	b480      	push	{r7}
 80059a2:	b08b      	sub	sp, #44	@ 0x2c
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t sector_start;  // flash > sector : 검사하는 sector의 시작 및 end 주소 이것이 지워야하는 flash 영역에 포함되어 있는지 확인
  uint32_t sector_end;    // flash < sector : flash 영역의 시작 및 end 주소가 sector 영역에 포함되어 있는지 확인
  uint32_t flash_start;   // 지워야하는 flash 영역의 시작 주소
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	4a25      	ldr	r2, [pc, #148]	@ (8005a4c <flashInSector+0xac>)
 80059b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059bc:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	4a22      	ldr	r2, [pc, #136]	@ (8005a4c <flashInSector+0xac>)
 80059c2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	4920      	ldr	r1, [pc, #128]	@ (8005a4c <flashInSector+0xac>)
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	440b      	add	r3, r1
 80059ce:	889b      	ldrh	r3, [r3, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	3b01      	subs	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	3b01      	subs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]

  if (sector_start >= flash_start && sector_start <= flash_end)
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d306      	bcc.n	80059fa <flashInSector+0x5a>
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d802      	bhi.n	80059fa <flashInSector+0x5a>
  {
    ret = true;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d306      	bcc.n	8005a10 <flashInSector+0x70>
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d802      	bhi.n	8005a10 <flashInSector+0x70>
  {
    ret = true;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if(flash_start >= sector_start && flash_start <= sector_end)
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d306      	bcc.n	8005a26 <flashInSector+0x86>
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d802      	bhi.n	8005a26 <flashInSector+0x86>
  {
    ret = true;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if(flash_end >= sector_start && flash_end <= sector_end)
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d306      	bcc.n	8005a3c <flashInSector+0x9c>
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d802      	bhi.n	8005a3c <flashInSector+0x9c>
  {
    ret = true;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ret;
 8005a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	372c      	adds	r7, #44	@ 0x2c
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000090 	.word	0x20000090

08005a50 <ledInit>:
    };



bool ledInit(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
  bool ret = true;
 8005a56:	2301      	movs	r3, #1
 8005a58:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a5a:	f107 0308 	add.w	r3, r7, #8
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	609a      	str	r2, [r3, #8]
 8005a66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <ledInit+0x84>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ad4 <ledInit+0x84>)
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	6193      	str	r3, [r2, #24]
 8005a74:	4b17      	ldr	r3, [pc, #92]	@ (8005ad4 <ledInit+0x84>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // led 공통 설정 요소
 8005a80:	2301      	movs	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	617b      	str	r3, [r7, #20]

  for (int i =0; i<LED_MAX_CH; i++)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e017      	b.n	8005ac2 <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8005a92:	4a11      	ldr	r2, [pc, #68]	@ (8005ad8 <ledInit+0x88>)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	889b      	ldrh	r3, [r3, #4]
 8005a9c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8005a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad8 <ledInit+0x88>)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005aa6:	f107 0208 	add.w	r2, r7, #8
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f9b1 	bl	8006e14 <HAL_GPIO_Init>

    ledOff(i);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f810 	bl	8005adc <ledOff>
  for (int i =0; i<LED_MAX_CH; i++)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dde4      	ble.n	8005a92 <ledInit+0x42>
  }

  return ret;
 8005ac8:	7efb      	ldrb	r3, [r7, #27]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	20000004 	.word	0x20000004

08005adc <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d111      	bne.n	8005b10 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	4a0a      	ldr	r2, [pc, #40]	@ (8005b18 <ledOff+0x3c>)
 8005af0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	4a08      	ldr	r2, [pc, #32]	@ (8005b18 <ledOff+0x3c>)
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	8899      	ldrh	r1, [r3, #4]
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	4a05      	ldr	r2, [pc, #20]	@ (8005b18 <ledOff+0x3c>)
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	79db      	ldrb	r3, [r3, #7]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f001 fbc3 	bl	8007294 <HAL_GPIO_WritePin>
 8005b0e:	e000      	b.n	8005b12 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8005b10:	bf00      	nop
}
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000004 	.word	0x20000004

08005b1c <ledToggle>:

void ledToggle(uint8_t ch)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	4a08      	ldr	r2, [pc, #32]	@ (8005b50 <ledToggle+0x34>)
 8005b30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	4906      	ldr	r1, [pc, #24]	@ (8005b50 <ledToggle+0x34>)
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	440b      	add	r3, r1
 8005b3c:	889b      	ldrh	r3, [r3, #4]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f001 fbbf 	bl	80072c4 <HAL_GPIO_TogglePin>
 8005b46:	e000      	b.n	8005b4a <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8005b48:	bf00      	nop
}
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000004 	.word	0x20000004

08005b54 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
  bool ret = true;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	71fb      	strb	r3, [r7, #7]


  // reset 핀이 눌렸다면
  if(RCC->CSR & (1<<26))
 8005b5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <resetInit+0x50>)
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d012      	beq.n	8005b90 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1); // 자기 자신을 1 증가한다.
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	f000 f84e 	bl	8005c0c <rtcBackupRegRead>
 8005b70:	4603      	mov	r3, r0
 8005b72:	3301      	adds	r3, #1
 8005b74:	4619      	mov	r1, r3
 8005b76:	2001      	movs	r0, #1
 8005b78:	f000 f858 	bl	8005c2c <rtcBackupRegWrite>
    delay(500); // 500ms 안에 누르면 rtcBackupReg가 증가한다.
 8005b7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005b80:	f7ff fbaa 	bl	80052d8 <delay>
    reset_count = rtcBackupRegRead(1);
 8005b84:	2001      	movs	r0, #1
 8005b86:	f000 f841 	bl	8005c0c <rtcBackupRegRead>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4a06      	ldr	r2, [pc, #24]	@ (8005ba8 <resetInit+0x54>)
 8005b8e:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0); // 다음에도 0부터 시작을 위해 초기화, backupreg는 1부터 시작
 8005b90:	2100      	movs	r1, #0
 8005b92:	2001      	movs	r0, #1
 8005b94:	f000 f84a 	bl	8005c2c <rtcBackupRegWrite>

  return ret;
 8005b98:	79fb      	ldrb	r3, [r7, #7]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	20000490 	.word	0x20000490

08005bac <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  bool ret = true;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bb6:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <rtcInit+0x54>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	4a11      	ldr	r2, [pc, #68]	@ (8005c00 <rtcInit+0x54>)
 8005bbc:	f043 0310 	orr.w	r3, r3, #16
 8005bc0:	6193      	str	r3, [r2, #24]
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <rtcInit+0x54>)
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance           = RTC;
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <rtcInit+0x58>)
 8005bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005c08 <rtcInit+0x5c>)
 8005bd2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <rtcInit+0x58>)
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8005bdc:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <rtcInit+0x58>)
 8005bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005be4:	4807      	ldr	r0, [pc, #28]	@ (8005c04 <rtcInit+0x58>)
 8005be6:	f003 fcb1 	bl	800954c <HAL_RTC_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <rtcInit+0x48>
  {
    Error_Handler();
 8005bf0:	f7ff fbf2 	bl	80053d8 <Error_Handler>
  }


  return ret;
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	20000494 	.word	0x20000494
 8005c08:	40002800 	.word	0x40002800

08005c0c <rtcBackupRegRead>:


uint32_t rtcBackupRegRead(uint32_t index)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4804      	ldr	r0, [pc, #16]	@ (8005c28 <rtcBackupRegRead+0x1c>)
 8005c18:	f003 fdbc 	bl	8009794 <HAL_RTCEx_BKUPRead>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000494 	.word	0x20000494

08005c2c <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data) // 16 bit reserved 16 bit data
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4803      	ldr	r0, [pc, #12]	@ (8005c48 <rtcBackupRegWrite+0x1c>)
 8005c3c:	f003 fd90 	bl	8009760 <HAL_RTCEx_BKUPWrite>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000494 	.word	0x20000494

08005c4c <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a0b      	ldr	r2, [pc, #44]	@ (8005c88 <HAL_RTC_MspInit+0x3c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d110      	bne.n	8005c80 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005c5e:	f002 feed 	bl	8008a3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005c62:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <HAL_RTC_MspInit+0x40>)
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	4a09      	ldr	r2, [pc, #36]	@ (8005c8c <HAL_RTC_MspInit+0x40>)
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	61d3      	str	r3, [r2, #28]
 8005c6e:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <HAL_RTC_MspInit+0x40>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c7a:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <HAL_RTC_MspInit+0x44>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40002800 	.word	0x40002800
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	4242043c 	.word	0x4242043c

08005c94 <uartInit>:




bool uartInit(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e007      	b.n	8005cb0 <uartInit+0x1c>
  {
    is_open[i] = false;
 8005ca0:	4a08      	ldr	r2, [pc, #32]	@ (8005cc4 <uartInit+0x30>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3301      	adds	r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	ddf4      	ble.n	8005ca0 <uartInit+0xc>
  }

  return true;
 8005cb6:	2301      	movs	r3, #1
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200004a8 	.word	0x200004a8

08005cc8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <uartOpen+0x1c>
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d007      	beq.n	8005cf2 <uartOpen+0x2a>
 8005ce2:	e074      	b.n	8005dce <uartOpen+0x106>
  {
    case _DEF_UART1: // usb cdc
      is_open[ch] = true;
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd8 <uartOpen+0x110>)
 8005ce8:	2101      	movs	r1, #1
 8005cea:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e06d      	b.n	8005dce <uartOpen+0x106>

    case _DEF_UART2:
          huart1.Instance         = USART1;
 8005cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ddc <uartOpen+0x114>)
 8005cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8005de0 <uartOpen+0x118>)
 8005cf6:	601a      	str	r2, [r3, #0]
          huart1.Init.BaudRate    = baud;
 8005cf8:	4a38      	ldr	r2, [pc, #224]	@ (8005ddc <uartOpen+0x114>)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6053      	str	r3, [r2, #4]
          huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8005cfe:	4b37      	ldr	r3, [pc, #220]	@ (8005ddc <uartOpen+0x114>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
          huart1.Init.StopBits    = UART_STOPBITS_1;
 8005d04:	4b35      	ldr	r3, [pc, #212]	@ (8005ddc <uartOpen+0x114>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	60da      	str	r2, [r3, #12]
          huart1.Init.Parity      = UART_PARITY_NONE;
 8005d0a:	4b34      	ldr	r3, [pc, #208]	@ (8005ddc <uartOpen+0x114>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	611a      	str	r2, [r3, #16]
          huart1.Init.Mode        = UART_MODE_TX_RX;
 8005d10:	4b32      	ldr	r3, [pc, #200]	@ (8005ddc <uartOpen+0x114>)
 8005d12:	220c      	movs	r2, #12
 8005d14:	615a      	str	r2, [r3, #20]
          huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8005d16:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <uartOpen+0x114>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
          huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ddc <uartOpen+0x114>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]


          HAL_UART_DeInit(&huart1);// usb 터미널 쪽에서 baud를 바꾸는 경우 다시 uart를 재 오픈해야한다,
 8005d22:	482e      	ldr	r0, [pc, #184]	@ (8005ddc <uartOpen+0x114>)
 8005d24:	f003 fda2 	bl	800986c <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buff[0], 256);
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <uartOpen+0x11c>)
 8005d2e:	4413      	add	r3, r2
 8005d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d34:	492c      	ldr	r1, [pc, #176]	@ (8005de8 <uartOpen+0x120>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fca3 	bl	8005682 <qbufferCreate>

          /* DMA controller clock enable */
          __HAL_RCC_DMA1_CLK_ENABLE();
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <uartOpen+0x124>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	@ (8005dec <uartOpen+0x124>)
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	6153      	str	r3, [r2, #20]
 8005d48:	4b28      	ldr	r3, [pc, #160]	@ (8005dec <uartOpen+0x124>)
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]

          /* DMA interrupt init */
          /* DMA1_Channel5_IRQn interrupt configuration */
          HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	200f      	movs	r0, #15
 8005d5a:	f000 fb18 	bl	800638e <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005d5e:	200f      	movs	r0, #15
 8005d60:	f000 fb31 	bl	80063c6 <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d64:	481d      	ldr	r0, [pc, #116]	@ (8005ddc <uartOpen+0x114>)
 8005d66:	f003 fd31 	bl	80097cc <HAL_UART_Init>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <uartOpen+0xae>
          {
            ret = false;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]
             * if (HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1) != HAL_OK) // rx_data[_DEF_UART2]에 1byte를 받고 callback 함수 실행
              {
                ret = false;
              }*/
          }
          break;
 8005d74:	e02a      	b.n	8005dcc <uartOpen+0x104>
            ret = true;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4a16      	ldr	r2, [pc, #88]	@ (8005dd8 <uartOpen+0x110>)
 8005d7e:	2101      	movs	r1, #1
 8005d80:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buff[0], 256) != HAL_OK) // circular 방식이라 자동으로 다시 순환
 8005d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d86:	4918      	ldr	r1, [pc, #96]	@ (8005de8 <uartOpen+0x120>)
 8005d88:	4814      	ldr	r0, [pc, #80]	@ (8005ddc <uartOpen+0x114>)
 8005d8a:	f003 fe51 	bl	8009a30 <HAL_UART_Receive_DMA>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <uartOpen+0xd0>
              ret = false;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
            qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	@ (8005de4 <uartOpen+0x11c>)
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	4413      	add	r3, r2
 8005da0:	3308      	adds	r3, #8
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <uartOpen+0x128>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	1a8a      	subs	r2, r1, r2
 8005dae:	490d      	ldr	r1, [pc, #52]	@ (8005de4 <uartOpen+0x11c>)
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	440b      	add	r3, r1
 8005db4:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8005db6:	79fa      	ldrb	r2, [r7, #7]
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	490a      	ldr	r1, [pc, #40]	@ (8005de4 <uartOpen+0x11c>)
 8005dbc:	0112      	lsls	r2, r2, #4
 8005dbe:	440a      	add	r2, r1
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	4908      	ldr	r1, [pc, #32]	@ (8005de4 <uartOpen+0x11c>)
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3304      	adds	r3, #4
 8005dca:	601a      	str	r2, [r3, #0]
          break;
 8005dcc:	bf00      	nop
  }

  return ret;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	200004a8 	.word	0x200004a8
 8005ddc:	200005d0 	.word	0x200005d0
 8005de0:	40013800 	.word	0x40013800
 8005de4:	200004ac 	.word	0x200004ac
 8005de8:	200004cc 	.word	0x200004cc
 8005dec:	40021000 	.word	0x40021000
 8005df0:	20000618 	.word	0x20000618

08005df4 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch) // recieve data가 존재하는지
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  switch(ch)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <uartAvailable+0x40>
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d114      	bne.n	8005e36 <uartAvailable+0x42>
    case _DEF_UART1:
      //ret = cdcAvailable();
      break;

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[_DEF_UART2].len - hdma_usart1_rx.Instance->CNDTR); // CNDTR은 256에서 감소하므로 전체 size에서 빼 in_index를 설정해준다.
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <uartAvailable+0x4c>)
 8005e0e:	6999      	ldr	r1, [r3, #24]
 8005e10:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <uartAvailable+0x50>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	1a8a      	subs	r2, r1, r2
 8005e1a:	4909      	ldr	r1, [pc, #36]	@ (8005e40 <uartAvailable+0x4c>)
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	440b      	add	r3, r1
 8005e20:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	4a06      	ldr	r2, [pc, #24]	@ (8005e40 <uartAvailable+0x4c>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fcbf 	bl	80057ae <qbufferAvailable>
 8005e30:	60f8      	str	r0, [r7, #12]
      break;
 8005e32:	e000      	b.n	8005e36 <uartAvailable+0x42>
      break;
 8005e34:	bf00      	nop
  }

  return ret;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	200004ac 	.word	0x200004ac
 8005e44:	20000618 	.word	0x20000618

08005e48 <uartRead>:

uint8_t uartRead(uint8_t ch) // buffer에서 읽어온다.
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <uartRead+0x28>
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d108      	bne.n	8005e72 <uartRead+0x2a>
    case _DEF_UART1:
      //ret = cdcREad();
      break;

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8005e60:	f107 030f 	add.w	r3, r7, #15
 8005e64:	2201      	movs	r2, #1
 8005e66:	4619      	mov	r1, r3
 8005e68:	4804      	ldr	r0, [pc, #16]	@ (8005e7c <uartRead+0x34>)
 8005e6a:	f7ff fc61 	bl	8005730 <qbufferRead>
      break;
 8005e6e:	e000      	b.n	8005e72 <uartRead+0x2a>
      break;
 8005e70:	bf00      	nop
  }

  return ret;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	200004bc 	.word	0x200004bc

08005e80 <uartWrite>:

uint32_t  uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length) // ch에 p_data의 length 만큼 작성한다.
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <uartWrite+0x3a>
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d111      	bne.n	8005ec0 <uartWrite+0x40>
    case _DEF_UART1:
      //ret = cdcWrite(p_data, length);
      break;

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	2364      	movs	r3, #100	@ 0x64
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	4809      	ldr	r0, [pc, #36]	@ (8005ecc <uartWrite+0x4c>)
 8005ea6:	f003 fd13 	bl	80098d0 <HAL_UART_Transmit>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <uartWrite+0x3e>
      {
        ret = length;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
      }
      break;
 8005eb8:	e001      	b.n	8005ebe <uartWrite+0x3e>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <uartWrite+0x40>
      break;
 8005ebe:	bf00      	nop
  }

  return ret;
 8005ec0:	697b      	ldr	r3, [r7, #20]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	200005d0 	.word	0x200005d0

08005ed0 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_UART_RxCpltCallback>:

/*interrupt 방식은 interrupt가 너무 많이 걸려서 고속의 통신에서는 buffer가 덮어 씌여져 DMA 방식이 좋다.*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // weak 함수를 같은 파일을 다른 곳에서 정의하면 그 함수가 호출된다.
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a08      	ldr	r2, [pc, #32]	@ (8005f14 <HAL_UART_RxCpltCallback+0x30>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d109      	bne.n	8005f0a <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1); // 수신된 1byte를 buffer에 write한다.
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4907      	ldr	r1, [pc, #28]	@ (8005f18 <HAL_UART_RxCpltCallback+0x34>)
 8005efa:	4808      	ldr	r0, [pc, #32]	@ (8005f1c <HAL_UART_RxCpltCallback+0x38>)
 8005efc:	f7ff fbdb 	bl	80056b6 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1); // 호출되고 interrupt를 다 꺼버려서 다시 호출해 1byte를 받는다.
 8005f00:	2201      	movs	r2, #1
 8005f02:	4905      	ldr	r1, [pc, #20]	@ (8005f18 <HAL_UART_RxCpltCallback+0x34>)
 8005f04:	4806      	ldr	r0, [pc, #24]	@ (8005f20 <HAL_UART_RxCpltCallback+0x3c>)
 8005f06:	f003 fd6e 	bl	80099e6 <HAL_UART_Receive_IT>

  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40013800 	.word	0x40013800
 8005f18:	200005cd 	.word	0x200005cd
 8005f1c:	200004bc 	.word	0x200004bc
 8005f20:	200005d0 	.word	0x200005d0

08005f24 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2c:	f107 0310 	add.w	r3, r7, #16
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a33      	ldr	r2, [pc, #204]	@ (800600c <HAL_UART_MspInit+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d15f      	bne.n	8006004 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f44:	4b32      	ldr	r3, [pc, #200]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	4a31      	ldr	r2, [pc, #196]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f4e:	6193      	str	r3, [r2, #24]
 8005f50:	4b2f      	ldr	r3, [pc, #188]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	4a2b      	ldr	r2, [pc, #172]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f62:	f043 0304 	orr.w	r3, r3, #4
 8005f66:	6193      	str	r3, [r2, #24]
 8005f68:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <HAL_UART_MspInit+0xec>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f82:	f107 0310 	add.w	r3, r7, #16
 8005f86:	4619      	mov	r1, r3
 8005f88:	4822      	ldr	r0, [pc, #136]	@ (8006014 <HAL_UART_MspInit+0xf0>)
 8005f8a:	f000 ff43 	bl	8006e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f94:	2302      	movs	r3, #2
 8005f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f9c:	f107 0310 	add.w	r3, r7, #16
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	481c      	ldr	r0, [pc, #112]	@ (8006014 <HAL_UART_MspInit+0xf0>)
 8005fa4:	f000 ff36 	bl	8006e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005faa:	4a1c      	ldr	r2, [pc, #112]	@ (800601c <HAL_UART_MspInit+0xf8>)
 8005fac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fb4:	4b18      	ldr	r3, [pc, #96]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fba:	4b17      	ldr	r3, [pc, #92]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fc6:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005fcc:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fce:	2220      	movs	r2, #32
 8005fd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005fd2:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005fd8:	480f      	ldr	r0, [pc, #60]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fda:	f000 fa1d 	bl	8006418 <HAL_DMA_Init>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005fe4:	f7ff f9f8 	bl	80053d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a0b      	ldr	r2, [pc, #44]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005fec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005fee:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <HAL_UART_MspInit+0xf4>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	2025      	movs	r0, #37	@ 0x25
 8005ffa:	f000 f9c8 	bl	800638e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ffe:	2025      	movs	r0, #37	@ 0x25
 8006000:	f000 f9e1 	bl	80063c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006004:	bf00      	nop
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40013800 	.word	0x40013800
 8006010:	40021000 	.word	0x40021000
 8006014:	40010800 	.word	0x40010800
 8006018:	20000618 	.word	0x20000618
 800601c:	40020058 	.word	0x40020058

08006020 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <HAL_UART_MspDeInit+0x40>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d112      	bne.n	8006058 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <HAL_UART_MspDeInit+0x44>)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	4a0b      	ldr	r2, [pc, #44]	@ (8006064 <HAL_UART_MspDeInit+0x44>)
 8006038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800603c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 800603e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006042:	4809      	ldr	r0, [pc, #36]	@ (8006068 <HAL_UART_MspDeInit+0x48>)
 8006044:	f001 f86a 	bl	800711c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fa3d 	bl	80064cc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006052:	2025      	movs	r0, #37	@ 0x25
 8006054:	f000 f9c5 	bl	80063e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40013800 	.word	0x40013800
 8006064:	40021000 	.word	0x40021000
 8006068:	40010800 	.word	0x40010800

0800606c <hwInit>:




void hwInit(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  bspInit();
 8006070:	f7ff f90c 	bl	800528c <bspInit>
  rtcInit();
 8006074:	f7ff fd9a 	bl	8005bac <rtcInit>

  resetInit();
 8006078:	f7ff fd6c 	bl	8005b54 <resetInit>
  ledInit();
 800607c:	f7ff fce8 	bl	8005a50 <ledInit>
  uartInit();
 8006080:	f7ff fe08 	bl	8005c94 <uartInit>
  flashInit();
 8006084:	f7ff fbaa 	bl	80057dc <flashInit>
}
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006090:	4b08      	ldr	r3, [pc, #32]	@ (80060b4 <HAL_Init+0x28>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a07      	ldr	r2, [pc, #28]	@ (80060b4 <HAL_Init+0x28>)
 8006096:	f043 0310 	orr.w	r3, r3, #16
 800609a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800609c:	2003      	movs	r0, #3
 800609e:	f000 f96b 	bl	8006378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060a2:	200f      	movs	r0, #15
 80060a4:	f000 f808 	bl	80060b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060a8:	f7ff f99c 	bl	80053e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40022000 	.word	0x40022000

080060b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060c0:	4b12      	ldr	r3, [pc, #72]	@ (800610c <HAL_InitTick+0x54>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <HAL_InitTick+0x58>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80060ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f991 	bl	80063fe <HAL_SYSTICK_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e00e      	b.n	8006104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b0f      	cmp	r3, #15
 80060ea:	d80a      	bhi.n	8006102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060ec:	2200      	movs	r2, #0
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	f000 f94b 	bl	800638e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060f8:	4a06      	ldr	r2, [pc, #24]	@ (8006114 <HAL_InitTick+0x5c>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000000 	.word	0x20000000
 8006110:	20000010 	.word	0x20000010
 8006114:	2000000c 	.word	0x2000000c

08006118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_IncTick+0x1c>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <HAL_IncTick+0x20>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4413      	add	r3, r2
 8006128:	4a03      	ldr	r2, [pc, #12]	@ (8006138 <HAL_IncTick+0x20>)
 800612a:	6013      	str	r3, [r2, #0]
}
 800612c:	bf00      	nop
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	20000010 	.word	0x20000010
 8006138:	2000065c 	.word	0x2000065c

0800613c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return uwTick;
 8006140:	4b02      	ldr	r3, [pc, #8]	@ (800614c <HAL_GetTick+0x10>)
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr
 800614c:	2000065c 	.word	0x2000065c

08006150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006158:	f7ff fff0 	bl	800613c <HAL_GetTick>
 800615c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d005      	beq.n	8006176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800616a:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <HAL_Delay+0x44>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006176:	bf00      	nop
 8006178:	f7ff ffe0 	bl	800613c <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	429a      	cmp	r2, r3
 8006186:	d8f7      	bhi.n	8006178 <HAL_Delay+0x28>
  {
  }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000010 	.word	0x20000010

08006198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061a8:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <__NVIC_SetPriorityGrouping+0x44>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80061b4:	4013      	ands	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ca:	4a04      	ldr	r2, [pc, #16]	@ (80061dc <__NVIC_SetPriorityGrouping+0x44>)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	60d3      	str	r3, [r2, #12]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	e000ed00 	.word	0xe000ed00

080061e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e4:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <__NVIC_GetPriorityGrouping+0x18>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	f003 0307 	and.w	r3, r3, #7
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000ed00 	.word	0xe000ed00

080061fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620a:	2b00      	cmp	r3, #0
 800620c:	db0b      	blt.n	8006226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	f003 021f 	and.w	r2, r3, #31
 8006214:	4906      	ldr	r1, [pc, #24]	@ (8006230 <__NVIC_EnableIRQ+0x34>)
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2001      	movs	r0, #1
 800621e:	fa00 f202 	lsl.w	r2, r0, r2
 8006222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr
 8006230:	e000e100 	.word	0xe000e100

08006234 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800623e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006242:	2b00      	cmp	r3, #0
 8006244:	db12      	blt.n	800626c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	f003 021f 	and.w	r2, r3, #31
 800624c:	490a      	ldr	r1, [pc, #40]	@ (8006278 <__NVIC_DisableIRQ+0x44>)
 800624e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2001      	movs	r0, #1
 8006256:	fa00 f202 	lsl.w	r2, r0, r2
 800625a:	3320      	adds	r3, #32
 800625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006260:	f3bf 8f4f 	dsb	sy
}
 8006264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006266:	f3bf 8f6f 	isb	sy
}
 800626a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	e000e100 	.word	0xe000e100

0800627c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628c:	2b00      	cmp	r3, #0
 800628e:	db0a      	blt.n	80062a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	490c      	ldr	r1, [pc, #48]	@ (80062c8 <__NVIC_SetPriority+0x4c>)
 8006296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	440b      	add	r3, r1
 80062a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062a4:	e00a      	b.n	80062bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	4908      	ldr	r1, [pc, #32]	@ (80062cc <__NVIC_SetPriority+0x50>)
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	3b04      	subs	r3, #4
 80062b4:	0112      	lsls	r2, r2, #4
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	440b      	add	r3, r1
 80062ba:	761a      	strb	r2, [r3, #24]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bc80      	pop	{r7}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	e000e100 	.word	0xe000e100
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b089      	sub	sp, #36	@ 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f1c3 0307 	rsb	r3, r3, #7
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	bf28      	it	cs
 80062ee:	2304      	movcs	r3, #4
 80062f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d902      	bls.n	8006300 <NVIC_EncodePriority+0x30>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3b03      	subs	r3, #3
 80062fe:	e000      	b.n	8006302 <NVIC_EncodePriority+0x32>
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43da      	mvns	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	401a      	ands	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006318:	f04f 31ff 	mov.w	r1, #4294967295
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	fa01 f303 	lsl.w	r3, r1, r3
 8006322:	43d9      	mvns	r1, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006328:	4313      	orrs	r3, r2
         );
}
 800632a:	4618      	mov	r0, r3
 800632c:	3724      	adds	r7, #36	@ 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3b01      	subs	r3, #1
 8006340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006344:	d301      	bcc.n	800634a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006346:	2301      	movs	r3, #1
 8006348:	e00f      	b.n	800636a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800634a:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <SysTick_Config+0x40>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3b01      	subs	r3, #1
 8006350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006352:	210f      	movs	r1, #15
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	f7ff ff90 	bl	800627c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <SysTick_Config+0x40>)
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006362:	4b04      	ldr	r3, [pc, #16]	@ (8006374 <SysTick_Config+0x40>)
 8006364:	2207      	movs	r2, #7
 8006366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000e010 	.word	0xe000e010

08006378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff ff09 	bl	8006198 <__NVIC_SetPriorityGrouping>
}
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	4603      	mov	r3, r0
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063a0:	f7ff ff1e 	bl	80061e0 <__NVIC_GetPriorityGrouping>
 80063a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7ff ff90 	bl	80062d0 <NVIC_EncodePriority>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff5f 	bl	800627c <__NVIC_SetPriority>
}
 80063be:	bf00      	nop
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	4603      	mov	r3, r0
 80063ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff11 	bl	80061fc <__NVIC_EnableIRQ>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	4603      	mov	r3, r0
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff ff1f 	bl	8006234 <__NVIC_DisableIRQ>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff ff94 	bl	8006334 <SysTick_Config>
 800640c:	4603      	mov	r3, r0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e043      	b.n	80064b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	4b22      	ldr	r3, [pc, #136]	@ (80064c0 <HAL_DMA_Init+0xa8>)
 8006436:	4413      	add	r3, r2
 8006438:	4a22      	ldr	r2, [pc, #136]	@ (80064c4 <HAL_DMA_Init+0xac>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	009a      	lsls	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1f      	ldr	r2, [pc, #124]	@ (80064c8 <HAL_DMA_Init+0xb0>)
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006462:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800647c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	bffdfff8 	.word	0xbffdfff8
 80064c4:	cccccccd 	.word	0xcccccccd
 80064c8:	40020000 	.word	0x40020000

080064cc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e046      	b.n	800656c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <HAL_DMA_DeInit+0xac>)
 8006516:	4413      	add	r3, r2
 8006518:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_DMA_DeInit+0xb0>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	091b      	lsrs	r3, r3, #4
 8006520:	009a      	lsls	r2, r3, #2
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_DMA_DeInit+0xb4>)
 800652a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	2101      	movs	r1, #1
 8006536:	fa01 f202 	lsl.w	r2, r1, r2
 800653a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	bffdfff8 	.word	0xbffdfff8
 800657c:	cccccccd 	.word	0xcccccccd
 8006580:	40020000 	.word	0x40020000

08006584 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_DMA_Start_IT+0x20>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e04b      	b.n	800663c <HAL_DMA_Start_IT+0xb8>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d13a      	bne.n	800662e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f9eb 	bl	80069b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 020e 	orr.w	r2, r2, #14
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e00f      	b.n	800661c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 020a 	orr.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e005      	b.n	800663a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d008      	beq.n	800666e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e020      	b.n	80066b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 020e 	bic.w	r2, r2, #14
 800667c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	2101      	movs	r1, #1
 8006698:	fa01 f202 	lsl.w	r2, r1, r2
 800669c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d005      	beq.n	80066e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e051      	b.n	8006784 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 020e 	bic.w	r2, r2, #14
 80066ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a22      	ldr	r2, [pc, #136]	@ (8006790 <HAL_DMA_Abort_IT+0xd4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d029      	beq.n	800675e <HAL_DMA_Abort_IT+0xa2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	@ (8006794 <HAL_DMA_Abort_IT+0xd8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <HAL_DMA_Abort_IT+0x9e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <HAL_DMA_Abort_IT+0xdc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01a      	beq.n	8006754 <HAL_DMA_Abort_IT+0x98>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	@ (800679c <HAL_DMA_Abort_IT+0xe0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d012      	beq.n	800674e <HAL_DMA_Abort_IT+0x92>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_DMA_Abort_IT+0xe4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00a      	beq.n	8006748 <HAL_DMA_Abort_IT+0x8c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_DMA_Abort_IT+0xe8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d102      	bne.n	8006742 <HAL_DMA_Abort_IT+0x86>
 800673c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006740:	e00e      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 8006742:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006746:	e00b      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 8006748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800674c:	e008      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 800674e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006752:	e005      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 8006754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006758:	e002      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 800675a:	2310      	movs	r3, #16
 800675c:	e000      	b.n	8006760 <HAL_DMA_Abort_IT+0xa4>
 800675e:	2301      	movs	r3, #1
 8006760:	4a11      	ldr	r2, [pc, #68]	@ (80067a8 <HAL_DMA_Abort_IT+0xec>)
 8006762:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
    } 
  }
  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40020008 	.word	0x40020008
 8006794:	4002001c 	.word	0x4002001c
 8006798:	40020030 	.word	0x40020030
 800679c:	40020044 	.word	0x40020044
 80067a0:	40020058 	.word	0x40020058
 80067a4:	4002006c 	.word	0x4002006c
 80067a8:	40020000 	.word	0x40020000

080067ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c8:	2204      	movs	r2, #4
 80067ca:	409a      	lsls	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d04f      	beq.n	8006874 <HAL_DMA_IRQHandler+0xc8>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d04a      	beq.n	8006874 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0204 	bic.w	r2, r2, #4
 80067fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a66      	ldr	r2, [pc, #408]	@ (800699c <HAL_DMA_IRQHandler+0x1f0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d029      	beq.n	800685a <HAL_DMA_IRQHandler+0xae>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a65      	ldr	r2, [pc, #404]	@ (80069a0 <HAL_DMA_IRQHandler+0x1f4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_DMA_IRQHandler+0xaa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a63      	ldr	r2, [pc, #396]	@ (80069a4 <HAL_DMA_IRQHandler+0x1f8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01a      	beq.n	8006850 <HAL_DMA_IRQHandler+0xa4>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a62      	ldr	r2, [pc, #392]	@ (80069a8 <HAL_DMA_IRQHandler+0x1fc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d012      	beq.n	800684a <HAL_DMA_IRQHandler+0x9e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a60      	ldr	r2, [pc, #384]	@ (80069ac <HAL_DMA_IRQHandler+0x200>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00a      	beq.n	8006844 <HAL_DMA_IRQHandler+0x98>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a5f      	ldr	r2, [pc, #380]	@ (80069b0 <HAL_DMA_IRQHandler+0x204>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d102      	bne.n	800683e <HAL_DMA_IRQHandler+0x92>
 8006838:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800683c:	e00e      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 800683e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006842:	e00b      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 8006844:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006848:	e008      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 800684a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800684e:	e005      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 8006850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006854:	e002      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 8006856:	2340      	movs	r3, #64	@ 0x40
 8006858:	e000      	b.n	800685c <HAL_DMA_IRQHandler+0xb0>
 800685a:	2304      	movs	r3, #4
 800685c:	4a55      	ldr	r2, [pc, #340]	@ (80069b4 <HAL_DMA_IRQHandler+0x208>)
 800685e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8094 	beq.w	8006992 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006872:	e08e      	b.n	8006992 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	2202      	movs	r2, #2
 800687a:	409a      	lsls	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d056      	beq.n	8006932 <HAL_DMA_IRQHandler+0x186>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d051      	beq.n	8006932 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 020a 	bic.w	r2, r2, #10
 80068aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a38      	ldr	r2, [pc, #224]	@ (800699c <HAL_DMA_IRQHandler+0x1f0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d029      	beq.n	8006912 <HAL_DMA_IRQHandler+0x166>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a37      	ldr	r2, [pc, #220]	@ (80069a0 <HAL_DMA_IRQHandler+0x1f4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d022      	beq.n	800690e <HAL_DMA_IRQHandler+0x162>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a35      	ldr	r2, [pc, #212]	@ (80069a4 <HAL_DMA_IRQHandler+0x1f8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01a      	beq.n	8006908 <HAL_DMA_IRQHandler+0x15c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a34      	ldr	r2, [pc, #208]	@ (80069a8 <HAL_DMA_IRQHandler+0x1fc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d012      	beq.n	8006902 <HAL_DMA_IRQHandler+0x156>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a32      	ldr	r2, [pc, #200]	@ (80069ac <HAL_DMA_IRQHandler+0x200>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00a      	beq.n	80068fc <HAL_DMA_IRQHandler+0x150>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a31      	ldr	r2, [pc, #196]	@ (80069b0 <HAL_DMA_IRQHandler+0x204>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d102      	bne.n	80068f6 <HAL_DMA_IRQHandler+0x14a>
 80068f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80068f4:	e00e      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 80068f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068fa:	e00b      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 80068fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006900:	e008      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 8006902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006906:	e005      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 8006908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800690c:	e002      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 800690e:	2320      	movs	r3, #32
 8006910:	e000      	b.n	8006914 <HAL_DMA_IRQHandler+0x168>
 8006912:	2302      	movs	r3, #2
 8006914:	4a27      	ldr	r2, [pc, #156]	@ (80069b4 <HAL_DMA_IRQHandler+0x208>)
 8006916:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006924:	2b00      	cmp	r3, #0
 8006926:	d034      	beq.n	8006992 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006930:	e02f      	b.n	8006992 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	2208      	movs	r2, #8
 8006938:	409a      	lsls	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d028      	beq.n	8006994 <HAL_DMA_IRQHandler+0x1e8>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d023      	beq.n	8006994 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 020e 	bic.w	r2, r2, #14
 800695a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f202 	lsl.w	r2, r1, r2
 800696a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
    }
  }
  return;
 8006992:	bf00      	nop
 8006994:	bf00      	nop
}
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40020008 	.word	0x40020008
 80069a0:	4002001c 	.word	0x4002001c
 80069a4:	40020030 	.word	0x40020030
 80069a8:	40020044 	.word	0x40020044
 80069ac:	40020058 	.word	0x40020058
 80069b0:	4002006c 	.word	0x4002006c
 80069b4:	40020000 	.word	0x40020000

080069b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	2101      	movs	r1, #1
 80069d0:	fa01 f202 	lsl.w	r2, r1, r2
 80069d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d108      	bne.n	80069f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069f6:	e007      	b.n	8006a08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	60da      	str	r2, [r3, #12]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
	...

08006a14 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006aec <HAL_FLASH_Program+0xd8>)
 8006a30:	7e1b      	ldrb	r3, [r3, #24]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_FLASH_Program+0x26>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e054      	b.n	8006ae4 <HAL_FLASH_Program+0xd0>
 8006a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006aec <HAL_FLASH_Program+0xd8>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006a40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a44:	f000 f8a8 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d144      	bne.n	8006adc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d102      	bne.n	8006a5e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	757b      	strb	r3, [r7, #21]
 8006a5c:	e007      	b.n	8006a6e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d102      	bne.n	8006a6a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006a64:	2302      	movs	r3, #2
 8006a66:	757b      	strb	r3, [r7, #21]
 8006a68:	e001      	b.n	8006a6e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75bb      	strb	r3, [r7, #22]
 8006a72:	e02d      	b.n	8006ad0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006a74:	7dbb      	ldrb	r3, [r7, #22]
 8006a76:	005a      	lsls	r2, r3, #1
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	eb02 0c03 	add.w	ip, r2, r3
 8006a7e:	7dbb      	ldrb	r3, [r7, #22]
 8006a80:	0119      	lsls	r1, r3, #4
 8006a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a86:	f1c1 0620 	rsb	r6, r1, #32
 8006a8a:	f1a1 0020 	sub.w	r0, r1, #32
 8006a8e:	fa22 f401 	lsr.w	r4, r2, r1
 8006a92:	fa03 f606 	lsl.w	r6, r3, r6
 8006a96:	4334      	orrs	r4, r6
 8006a98:	fa23 f000 	lsr.w	r0, r3, r0
 8006a9c:	4304      	orrs	r4, r0
 8006a9e:	fa23 f501 	lsr.w	r5, r3, r1
 8006aa2:	b2a3      	uxth	r3, r4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4660      	mov	r0, ip
 8006aa8:	f000 f85a 	bl	8006b60 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006aac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006ab0:	f000 f872 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <HAL_FLASH_Program+0xdc>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	4a0c      	ldr	r2, [pc, #48]	@ (8006af0 <HAL_FLASH_Program+0xdc>)
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006aca:	7dbb      	ldrb	r3, [r7, #22]
 8006acc:	3301      	adds	r3, #1
 8006ace:	75bb      	strb	r3, [r7, #22]
 8006ad0:	7dba      	ldrb	r2, [r7, #22]
 8006ad2:	7d7b      	ldrb	r3, [r7, #21]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d3cd      	bcc.n	8006a74 <HAL_FLASH_Program+0x60>
 8006ad8:	e000      	b.n	8006adc <HAL_FLASH_Program+0xc8>
      {
        break;
 8006ada:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006adc:	4b03      	ldr	r3, [pc, #12]	@ (8006aec <HAL_FLASH_Program+0xd8>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	761a      	strb	r2, [r3, #24]

  return status;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aec:	20000660 	.word	0x20000660
 8006af0:	40022000 	.word	0x40022000

08006af4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006afe:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <HAL_FLASH_Unlock+0x40>)
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <HAL_FLASH_Unlock+0x40>)
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b38 <HAL_FLASH_Unlock+0x44>)
 8006b0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <HAL_FLASH_Unlock+0x40>)
 8006b12:	4a0a      	ldr	r2, [pc, #40]	@ (8006b3c <HAL_FLASH_Unlock+0x48>)
 8006b14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006b16:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <HAL_FLASH_Unlock+0x40>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006b26:	79fb      	ldrb	r3, [r7, #7]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40022000 	.word	0x40022000
 8006b38:	45670123 	.word	0x45670123
 8006b3c:	cdef89ab 	.word	0xcdef89ab

08006b40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006b44:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <HAL_FLASH_Lock+0x1c>)
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	4a04      	ldr	r2, [pc, #16]	@ (8006b5c <HAL_FLASH_Lock+0x1c>)
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40022000 	.word	0x40022000

08006b60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b6c:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <FLASH_Program_HalfWord+0x30>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006b72:	4b08      	ldr	r3, [pc, #32]	@ (8006b94 <FLASH_Program_HalfWord+0x34>)
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	4a07      	ldr	r2, [pc, #28]	@ (8006b94 <FLASH_Program_HalfWord+0x34>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	887a      	ldrh	r2, [r7, #2]
 8006b82:	801a      	strh	r2, [r3, #0]
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000660 	.word	0x20000660
 8006b94:	40022000 	.word	0x40022000

08006b98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006ba0:	f7ff facc 	bl	800613c <HAL_GetTick>
 8006ba4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006ba6:	e010      	b.n	8006bca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d00c      	beq.n	8006bca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <FLASH_WaitForLastOperation+0x2e>
 8006bb6:	f7ff fac1 	bl	800613c <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d201      	bcs.n	8006bca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e025      	b.n	8006c16 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006bca:	4b15      	ldr	r3, [pc, #84]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e8      	bne.n	8006ba8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006bd6:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006be2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006be4:	2220      	movs	r2, #32
 8006be6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006be8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <FLASH_WaitForLastOperation+0x88>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006c0c:	f000 f80a 	bl	8006c24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40022000 	.word	0x40022000

08006c24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006c2e:	4b23      	ldr	r3, [pc, #140]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006c3a:	4b21      	ldr	r3, [pc, #132]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f043 0302 	orr.w	r3, r3, #2
 8006c42:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f043 0310 	orr.w	r3, r3, #16
 8006c4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006c5a:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	4a17      	ldr	r2, [pc, #92]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8006c6e:	4b13      	ldr	r3, [pc, #76]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f043 0304 	orr.w	r3, r3, #4
 8006c82:	4a0f      	ldr	r2, [pc, #60]	@ (8006cc0 <FLASH_SetErrorCode+0x9c>)
 8006c84:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006c86:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f240 1201 	movw	r2, #257	@ 0x101
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d106      	bne.n	8006caa <FLASH_SetErrorCode+0x86>
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	61d3      	str	r3, [r2, #28]
}  
 8006ca8:	e002      	b.n	8006cb0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006caa:	4a04      	ldr	r2, [pc, #16]	@ (8006cbc <FLASH_SetErrorCode+0x98>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60d3      	str	r3, [r2, #12]
}  
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40022000 	.word	0x40022000
 8006cc0:	20000660 	.word	0x20000660

08006cc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d94 <HAL_FLASHEx_Erase+0xd0>)
 8006cd8:	7e1b      	ldrb	r3, [r3, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_FLASHEx_Erase+0x1e>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e053      	b.n	8006d8a <HAL_FLASHEx_Erase+0xc6>
 8006ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d94 <HAL_FLASHEx_Erase+0xd0>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d116      	bne.n	8006d1e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006cf0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006cf4:	f7ff ff50 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d141      	bne.n	8006d82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f000 f84c 	bl	8006d9c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006d08:	f7ff ff46 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006d10:	4b21      	ldr	r3, [pc, #132]	@ (8006d98 <HAL_FLASHEx_Erase+0xd4>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	4a20      	ldr	r2, [pc, #128]	@ (8006d98 <HAL_FLASHEx_Erase+0xd4>)
 8006d16:	f023 0304 	bic.w	r3, r3, #4
 8006d1a:	6113      	str	r3, [r2, #16]
 8006d1c:	e031      	b.n	8006d82 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006d1e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006d22:	f7ff ff39 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d12a      	bne.n	8006d82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d32:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	e019      	b.n	8006d70 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006d3c:	68b8      	ldr	r0, [r7, #8]
 8006d3e:	f000 f849 	bl	8006dd4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006d46:	f7ff ff27 	bl	8006b98 <FLASH_WaitForLastOperation>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006d4e:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <HAL_FLASHEx_Erase+0xd4>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a11      	ldr	r2, [pc, #68]	@ (8006d98 <HAL_FLASHEx_Erase+0xd4>)
 8006d54:	f023 0302 	bic.w	r3, r3, #2
 8006d58:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	601a      	str	r2, [r3, #0]
            break;
 8006d66:	e00c      	b.n	8006d82 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d6e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	029a      	lsls	r2, r3, #10
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3dc      	bcc.n	8006d3c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006d82:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <HAL_FLASHEx_Erase+0xd0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	761a      	strb	r2, [r3, #24]

  return status;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000660 	.word	0x20000660
 8006d98:	40022000 	.word	0x40022000

08006d9c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006da4:	4b09      	ldr	r3, [pc, #36]	@ (8006dcc <FLASH_MassErase+0x30>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006daa:	4b09      	ldr	r3, [pc, #36]	@ (8006dd0 <FLASH_MassErase+0x34>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	4a08      	ldr	r2, [pc, #32]	@ (8006dd0 <FLASH_MassErase+0x34>)
 8006db0:	f043 0304 	orr.w	r3, r3, #4
 8006db4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006db6:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <FLASH_MassErase+0x34>)
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	4a05      	ldr	r2, [pc, #20]	@ (8006dd0 <FLASH_MassErase+0x34>)
 8006dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr
 8006dcc:	20000660 	.word	0x20000660
 8006dd0:	40022000 	.word	0x40022000

08006dd4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <FLASH_PageErase+0x38>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <FLASH_PageErase+0x3c>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <FLASH_PageErase+0x3c>)
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006dee:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <FLASH_PageErase+0x3c>)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006df4:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <FLASH_PageErase+0x3c>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4a05      	ldr	r2, [pc, #20]	@ (8006e10 <FLASH_PageErase+0x3c>)
 8006dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dfe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000660 	.word	0x20000660
 8006e10:	40022000 	.word	0x40022000

08006e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b08b      	sub	sp, #44	@ 0x2c
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006e22:	2300      	movs	r3, #0
 8006e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e26:	e169      	b.n	80070fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006e28:	2201      	movs	r2, #1
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	f040 8158 	bne.w	80070f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4a9a      	ldr	r2, [pc, #616]	@ (80070b4 <HAL_GPIO_Init+0x2a0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d05e      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
 8006e50:	4a98      	ldr	r2, [pc, #608]	@ (80070b4 <HAL_GPIO_Init+0x2a0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d875      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e56:	4a98      	ldr	r2, [pc, #608]	@ (80070b8 <HAL_GPIO_Init+0x2a4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d058      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
 8006e5c:	4a96      	ldr	r2, [pc, #600]	@ (80070b8 <HAL_GPIO_Init+0x2a4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d86f      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e62:	4a96      	ldr	r2, [pc, #600]	@ (80070bc <HAL_GPIO_Init+0x2a8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d052      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
 8006e68:	4a94      	ldr	r2, [pc, #592]	@ (80070bc <HAL_GPIO_Init+0x2a8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d869      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e6e:	4a94      	ldr	r2, [pc, #592]	@ (80070c0 <HAL_GPIO_Init+0x2ac>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d04c      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
 8006e74:	4a92      	ldr	r2, [pc, #584]	@ (80070c0 <HAL_GPIO_Init+0x2ac>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d863      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e7a:	4a92      	ldr	r2, [pc, #584]	@ (80070c4 <HAL_GPIO_Init+0x2b0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d046      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
 8006e80:	4a90      	ldr	r2, [pc, #576]	@ (80070c4 <HAL_GPIO_Init+0x2b0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d85d      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e86:	2b12      	cmp	r3, #18
 8006e88:	d82a      	bhi.n	8006ee0 <HAL_GPIO_Init+0xcc>
 8006e8a:	2b12      	cmp	r3, #18
 8006e8c:	d859      	bhi.n	8006f42 <HAL_GPIO_Init+0x12e>
 8006e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <HAL_GPIO_Init+0x80>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006f0f 	.word	0x08006f0f
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006efb 	.word	0x08006efb
 8006ea0:	08006f3d 	.word	0x08006f3d
 8006ea4:	08006f43 	.word	0x08006f43
 8006ea8:	08006f43 	.word	0x08006f43
 8006eac:	08006f43 	.word	0x08006f43
 8006eb0:	08006f43 	.word	0x08006f43
 8006eb4:	08006f43 	.word	0x08006f43
 8006eb8:	08006f43 	.word	0x08006f43
 8006ebc:	08006f43 	.word	0x08006f43
 8006ec0:	08006f43 	.word	0x08006f43
 8006ec4:	08006f43 	.word	0x08006f43
 8006ec8:	08006f43 	.word	0x08006f43
 8006ecc:	08006f43 	.word	0x08006f43
 8006ed0:	08006f43 	.word	0x08006f43
 8006ed4:	08006f43 	.word	0x08006f43
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	4a79      	ldr	r2, [pc, #484]	@ (80070c8 <HAL_GPIO_Init+0x2b4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ee6:	e02c      	b.n	8006f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	623b      	str	r3, [r7, #32]
          break;
 8006eee:	e029      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	623b      	str	r3, [r7, #32]
          break;
 8006ef8:	e024      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	3308      	adds	r3, #8
 8006f00:	623b      	str	r3, [r7, #32]
          break;
 8006f02:	e01f      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	623b      	str	r3, [r7, #32]
          break;
 8006f0c:	e01a      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006f16:	2304      	movs	r3, #4
 8006f18:	623b      	str	r3, [r7, #32]
          break;
 8006f1a:	e013      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d105      	bne.n	8006f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006f24:	2308      	movs	r3, #8
 8006f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	611a      	str	r2, [r3, #16]
          break;
 8006f2e:	e009      	b.n	8006f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006f30:	2308      	movs	r3, #8
 8006f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	615a      	str	r2, [r3, #20]
          break;
 8006f3a:	e003      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	623b      	str	r3, [r7, #32]
          break;
 8006f40:	e000      	b.n	8006f44 <HAL_GPIO_Init+0x130>
          break;
 8006f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2bff      	cmp	r3, #255	@ 0xff
 8006f48:	d801      	bhi.n	8006f4e <HAL_GPIO_Init+0x13a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	e001      	b.n	8006f52 <HAL_GPIO_Init+0x13e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2bff      	cmp	r3, #255	@ 0xff
 8006f58:	d802      	bhi.n	8006f60 <HAL_GPIO_Init+0x14c>
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	e002      	b.n	8006f66 <HAL_GPIO_Init+0x152>
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	3b08      	subs	r3, #8
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	210f      	movs	r1, #15
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	401a      	ands	r2, r3
 8006f78:	6a39      	ldr	r1, [r7, #32]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	431a      	orrs	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80b1 	beq.w	80070f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006f94:	4b4d      	ldr	r3, [pc, #308]	@ (80070cc <HAL_GPIO_Init+0x2b8>)
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4a4c      	ldr	r2, [pc, #304]	@ (80070cc <HAL_GPIO_Init+0x2b8>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6193      	str	r3, [r2, #24]
 8006fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80070cc <HAL_GPIO_Init+0x2b8>)
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006fac:	4a48      	ldr	r2, [pc, #288]	@ (80070d0 <HAL_GPIO_Init+0x2bc>)
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	089b      	lsrs	r3, r3, #2
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	220f      	movs	r2, #15
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a40      	ldr	r2, [pc, #256]	@ (80070d4 <HAL_GPIO_Init+0x2c0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_GPIO_Init+0x1ec>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3f      	ldr	r2, [pc, #252]	@ (80070d8 <HAL_GPIO_Init+0x2c4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00d      	beq.n	8006ffc <HAL_GPIO_Init+0x1e8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80070dc <HAL_GPIO_Init+0x2c8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <HAL_GPIO_Init+0x1e4>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3d      	ldr	r2, [pc, #244]	@ (80070e0 <HAL_GPIO_Init+0x2cc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_GPIO_Init+0x1e0>
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e006      	b.n	8007002 <HAL_GPIO_Init+0x1ee>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	e004      	b.n	8007002 <HAL_GPIO_Init+0x1ee>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e002      	b.n	8007002 <HAL_GPIO_Init+0x1ee>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <HAL_GPIO_Init+0x1ee>
 8007000:	2300      	movs	r3, #0
 8007002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007004:	f002 0203 	and.w	r2, r2, #3
 8007008:	0092      	lsls	r2, r2, #2
 800700a:	4093      	lsls	r3, r2
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007012:	492f      	ldr	r1, [pc, #188]	@ (80070d0 <HAL_GPIO_Init+0x2bc>)
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	3302      	adds	r3, #2
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800702c:	4b2d      	ldr	r3, [pc, #180]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	492c      	ldr	r1, [pc, #176]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]
 8007038:	e006      	b.n	8007048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800703a:	4b2a      	ldr	r3, [pc, #168]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	43db      	mvns	r3, r3
 8007042:	4928      	ldr	r1, [pc, #160]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007044:	4013      	ands	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007054:	4b23      	ldr	r3, [pc, #140]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	4922      	ldr	r1, [pc, #136]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	4313      	orrs	r3, r2
 800705e:	60cb      	str	r3, [r1, #12]
 8007060:	e006      	b.n	8007070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007062:	4b20      	ldr	r3, [pc, #128]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	43db      	mvns	r3, r3
 800706a:	491e      	ldr	r1, [pc, #120]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800706c:	4013      	ands	r3, r2
 800706e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800707c:	4b19      	ldr	r3, [pc, #100]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4918      	ldr	r1, [pc, #96]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	4313      	orrs	r3, r2
 8007086:	604b      	str	r3, [r1, #4]
 8007088:	e006      	b.n	8007098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800708a:	4b16      	ldr	r3, [pc, #88]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	43db      	mvns	r3, r3
 8007092:	4914      	ldr	r1, [pc, #80]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 8007094:	4013      	ands	r3, r2
 8007096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d021      	beq.n	80070e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80070a4:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	490e      	ldr	r1, [pc, #56]	@ (80070e4 <HAL_GPIO_Init+0x2d0>)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]
 80070b0:	e021      	b.n	80070f6 <HAL_GPIO_Init+0x2e2>
 80070b2:	bf00      	nop
 80070b4:	10320000 	.word	0x10320000
 80070b8:	10310000 	.word	0x10310000
 80070bc:	10220000 	.word	0x10220000
 80070c0:	10210000 	.word	0x10210000
 80070c4:	10120000 	.word	0x10120000
 80070c8:	10110000 	.word	0x10110000
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40010800 	.word	0x40010800
 80070d8:	40010c00 	.word	0x40010c00
 80070dc:	40011000 	.word	0x40011000
 80070e0:	40011400 	.word	0x40011400
 80070e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007118 <HAL_GPIO_Init+0x304>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	4909      	ldr	r1, [pc, #36]	@ (8007118 <HAL_GPIO_Init+0x304>)
 80070f2:	4013      	ands	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	3301      	adds	r3, #1
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	f47f ae8e 	bne.w	8006e28 <HAL_GPIO_Init+0x14>
  }
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	372c      	adds	r7, #44	@ 0x2c
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr
 8007118:	40010400 	.word	0x40010400

0800711c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	@ 0x24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800712a:	e09a      	b.n	8007262 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800712c:	2201      	movs	r2, #1
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	4013      	ands	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 808d 	beq.w	800725c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8007142:	4a4e      	ldr	r2, [pc, #312]	@ (800727c <HAL_GPIO_DeInit+0x160>)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	3302      	adds	r3, #2
 800714a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	220f      	movs	r2, #15
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4013      	ands	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a46      	ldr	r2, [pc, #280]	@ (8007280 <HAL_GPIO_DeInit+0x164>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_GPIO_DeInit+0x78>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a45      	ldr	r2, [pc, #276]	@ (8007284 <HAL_GPIO_DeInit+0x168>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00d      	beq.n	8007190 <HAL_GPIO_DeInit+0x74>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a44      	ldr	r2, [pc, #272]	@ (8007288 <HAL_GPIO_DeInit+0x16c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d007      	beq.n	800718c <HAL_GPIO_DeInit+0x70>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a43      	ldr	r2, [pc, #268]	@ (800728c <HAL_GPIO_DeInit+0x170>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d101      	bne.n	8007188 <HAL_GPIO_DeInit+0x6c>
 8007184:	2303      	movs	r3, #3
 8007186:	e006      	b.n	8007196 <HAL_GPIO_DeInit+0x7a>
 8007188:	2304      	movs	r3, #4
 800718a:	e004      	b.n	8007196 <HAL_GPIO_DeInit+0x7a>
 800718c:	2302      	movs	r3, #2
 800718e:	e002      	b.n	8007196 <HAL_GPIO_DeInit+0x7a>
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <HAL_GPIO_DeInit+0x7a>
 8007194:	2300      	movs	r3, #0
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	f002 0203 	and.w	r2, r2, #3
 800719c:	0092      	lsls	r2, r2, #2
 800719e:	4093      	lsls	r3, r2
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d132      	bne.n	800720c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80071a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	4938      	ldr	r1, [pc, #224]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80071b4:	4b36      	ldr	r3, [pc, #216]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	43db      	mvns	r3, r3
 80071bc:	4934      	ldr	r1, [pc, #208]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071be:	4013      	ands	r3, r2
 80071c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80071c2:	4b33      	ldr	r3, [pc, #204]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	43db      	mvns	r3, r3
 80071ca:	4931      	ldr	r1, [pc, #196]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80071d0:	4b2f      	ldr	r3, [pc, #188]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	43db      	mvns	r3, r3
 80071d8:	492d      	ldr	r1, [pc, #180]	@ (8007290 <HAL_GPIO_DeInit+0x174>)
 80071da:	4013      	ands	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	220f      	movs	r2, #15
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80071ee:	4a23      	ldr	r2, [pc, #140]	@ (800727c <HAL_GPIO_DeInit+0x160>)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	089b      	lsrs	r3, r3, #2
 80071f4:	3302      	adds	r3, #2
 80071f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	43da      	mvns	r2, r3
 80071fe:	481f      	ldr	r0, [pc, #124]	@ (800727c <HAL_GPIO_DeInit+0x160>)
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	400a      	ands	r2, r1
 8007206:	3302      	adds	r3, #2
 8007208:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2bff      	cmp	r3, #255	@ 0xff
 8007210:	d801      	bhi.n	8007216 <HAL_GPIO_DeInit+0xfa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	e001      	b.n	800721a <HAL_GPIO_DeInit+0xfe>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2bff      	cmp	r3, #255	@ 0xff
 8007220:	d802      	bhi.n	8007228 <HAL_GPIO_DeInit+0x10c>
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	e002      	b.n	800722e <HAL_GPIO_DeInit+0x112>
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3b08      	subs	r3, #8
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	210f      	movs	r1, #15
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	401a      	ands	r2, r3
 8007240:	2104      	movs	r1, #4
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	431a      	orrs	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	43db      	mvns	r3, r3
 8007256:	401a      	ands	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3301      	adds	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	f47f af5e 	bne.w	800712c <HAL_GPIO_DeInit+0x10>
  }
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	3724      	adds	r7, #36	@ 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr
 800727c:	40010000 	.word	0x40010000
 8007280:	40010800 	.word	0x40010800
 8007284:	40010c00 	.word	0x40010c00
 8007288:	40011000 	.word	0x40011000
 800728c:	40011400 	.word	0x40011400
 8007290:	40010400 	.word	0x40010400

08007294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	807b      	strh	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072a4:	787b      	ldrb	r3, [r7, #1]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80072b0:	e003      	b.n	80072ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80072b2:	887b      	ldrh	r3, [r7, #2]
 80072b4:	041a      	lsls	r2, r3, #16
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr

080072c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072d6:	887a      	ldrh	r2, [r7, #2]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4013      	ands	r3, r2
 80072dc:	041a      	lsls	r2, r3, #16
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	43d9      	mvns	r1, r3
 80072e2:	887b      	ldrh	r3, [r7, #2]
 80072e4:	400b      	ands	r3, r1
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	611a      	str	r2, [r3, #16]
}
 80072ec:	bf00      	nop
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b088      	sub	sp, #32
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f005 fb65 	bl	800c9d2 <USB_ReadInterrupts>
 8007308:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fabb 	bl	8007890 <PCD_EP_ISR_Handler>

    return;
 800731a:	e119      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007338:	b292      	uxth	r2, r2
 800733a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f006 fc1a 	bl	800db78 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007344:	2100      	movs	r1, #0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f905 	bl	8007556 <HAL_PCD_SetAddress>

    return;
 800734c:	e100      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800736a:	b292      	uxth	r2, r2
 800736c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007370:	e0ee      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800738e:	b292      	uxth	r2, r2
 8007390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007394:	e0dc      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d027      	beq.n	80073f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0204 	bic.w	r2, r2, #4
 80073b2:	b292      	uxth	r2, r2
 80073b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0208 	bic.w	r2, r2, #8
 80073ca:	b292      	uxth	r2, r2
 80073cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f006 fc09 	bl	800dbe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073e8:	b292      	uxth	r2, r2
 80073ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80073ee:	e0af      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8083 	beq.w	8007502 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e010      	b.n	8007424 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	7ffb      	ldrb	r3, [r7, #31]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	7ffb      	ldrb	r3, [r7, #31]
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	b292      	uxth	r2, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	3320      	adds	r3, #32
 8007418:	443b      	add	r3, r7
 800741a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800741e:	7ffb      	ldrb	r3, [r7, #31]
 8007420:	3301      	adds	r3, #1
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	7ffb      	ldrb	r3, [r7, #31]
 8007426:	2b07      	cmp	r3, #7
 8007428:	d9eb      	bls.n	8007402 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	b292      	uxth	r2, r2
 800743e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	b292      	uxth	r2, r2
 8007456:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800745a:	bf00      	nop
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007464:	b29b      	uxth	r3, r3
 8007466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f6      	beq.n	800745c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007476:	b29a      	uxth	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007480:	b292      	uxth	r2, r2
 8007482:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	77fb      	strb	r3, [r7, #31]
 800748a:	e00f      	b.n	80074ac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800748c:	7ffb      	ldrb	r3, [r7, #31]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	4611      	mov	r1, r2
 8007494:	7ffa      	ldrb	r2, [r7, #31]
 8007496:	0092      	lsls	r2, r2, #2
 8007498:	440a      	add	r2, r1
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	3320      	adds	r3, #32
 800749e:	443b      	add	r3, r7
 80074a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80074a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
 80074a8:	3301      	adds	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	7ffb      	ldrb	r3, [r7, #31]
 80074ae:	2b07      	cmp	r3, #7
 80074b0:	d9ec      	bls.n	800748c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0208 	orr.w	r2, r2, #8
 80074c4:	b292      	uxth	r2, r2
 80074c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074dc:	b292      	uxth	r2, r2
 80074de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0204 	orr.w	r2, r2, #4
 80074f4:	b292      	uxth	r2, r2
 80074f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f006 fb5a 	bl	800dbb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007500:	e026      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00f      	beq.n	800752c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800751e:	b292      	uxth	r2, r2
 8007520:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f006 fb19 	bl	800db5c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800752a:	e011      	b.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800753e:	b29a      	uxth	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007548:	b292      	uxth	r2, r2
 800754a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800754e:	bf00      	nop
  }
}
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_PCD_SetAddress+0x1a>
 800756c:	2302      	movs	r3, #2
 800756e:	e012      	b.n	8007596 <HAL_PCD_SetAddress+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f005 fa10 	bl	800c9ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	461a      	mov	r2, r3
 80075ac:	4603      	mov	r3, r0
 80075ae:	70fb      	strb	r3, [r7, #3]
 80075b0:	460b      	mov	r3, r1
 80075b2:	803b      	strh	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	da0e      	bge.n	80075e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	f003 0207 	and.w	r2, r3, #7
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	3310      	adds	r3, #16
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	4413      	add	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	705a      	strb	r2, [r3, #1]
 80075e0:	e00e      	b.n	8007600 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	f003 0207 	and.w	r2, r3, #7
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	b2da      	uxtb	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800760c:	883a      	ldrh	r2, [r7, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	78ba      	ldrb	r2, [r7, #2]
 8007616:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007618:	78bb      	ldrb	r3, [r7, #2]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d102      	bne.n	8007624 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_PCD_EP_Open+0x94>
 800762e:	2302      	movs	r3, #2
 8007630:	e00e      	b.n	8007650 <HAL_PCD_EP_Open+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	4618      	mov	r0, r3
 8007642:	f003 f945 	bl	800a8d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800764e:	7afb      	ldrb	r3, [r7, #11]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	460b      	mov	r3, r1
 8007666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	f003 0207 	and.w	r2, r3, #7
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f003 fcd0 	bl	800b050 <USB_EPStartXfer>

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	460b      	mov	r3, r1
 80076c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	f003 0207 	and.w	r2, r3, #7
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	3310      	adds	r3, #16
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2201      	movs	r2, #1
 8007704:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	b2da      	uxtb	r2, r3
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6979      	ldr	r1, [r7, #20]
 8007718:	4618      	mov	r0, r3
 800771a:	f003 fc99 	bl	800b050 <USB_EPStartXfer>

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	7912      	ldrb	r2, [r2, #4]
 800773e:	4293      	cmp	r3, r2
 8007740:	d901      	bls.n	8007746 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e04c      	b.n	80077e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da0e      	bge.n	800776c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 0207 	and.w	r2, r3, #7
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	3310      	adds	r3, #16
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	705a      	strb	r2, [r3, #1]
 800776a:	e00c      	b.n	8007786 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	b2da      	uxtb	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_PCD_EP_SetStall+0x7e>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e01c      	b.n	80077e0 <HAL_PCD_EP_SetStall+0xb8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f004 fffc 	bl	800c7b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f005 f90d 	bl	800c9f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	7912      	ldrb	r2, [r2, #4]
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e040      	b.n	8007888 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800780a:	2b00      	cmp	r3, #0
 800780c:	da0e      	bge.n	800782c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	f003 0207 	and.w	r2, r3, #7
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	3310      	adds	r3, #16
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	705a      	strb	r2, [r3, #1]
 800782a:	e00e      	b.n	800784a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	f003 0207 	and.w	r2, r3, #7
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_PCD_EP_ClrStall+0x82>
 8007866:	2302      	movs	r3, #2
 8007868:	e00e      	b.n	8007888 <HAL_PCD_EP_ClrStall+0xa0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	4618      	mov	r0, r3
 800787a:	f004 ffea 	bl	800c852 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b096      	sub	sp, #88	@ 0x58
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007898:	e3bb      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80078a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80078a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80078b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 8175 	bne.w	8007ba8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80078be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d14e      	bne.n	8007968 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80078d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078da:	81fb      	strh	r3, [r7, #14]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3310      	adds	r3, #16
 80078f2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4413      	add	r3, r2
 8007908:	3302      	adds	r3, #2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800791c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	441a      	add	r2, r3
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800792e:	2100      	movs	r1, #0
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f006 f8f9 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7b5b      	ldrb	r3, [r3, #13]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8368 	beq.w	8008012 <PCD_EP_ISR_Handler+0x782>
 8007942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 8363 	bne.w	8008012 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7b5b      	ldrb	r3, [r3, #13]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007956:	b2da      	uxtb	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	735a      	strb	r2, [r3, #13]
 8007966:	e354      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800796e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800797a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800797e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007982:	2b00      	cmp	r3, #0
 8007984:	d034      	beq.n	80079f0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800798e:	b29b      	uxth	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	3306      	adds	r3, #6
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80079bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80079c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f005 f863 	bl	800ca90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80079d6:	4013      	ands	r3, r2
 80079d8:	823b      	strh	r3, [r7, #16]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	8a3a      	ldrh	r2, [r7, #16]
 80079e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079e4:	b292      	uxth	r2, r2
 80079e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f006 f870 	bl	800dace <HAL_PCD_SetupStageCallback>
 80079ee:	e310      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80079f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f280 830c 	bge.w	8008012 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007a06:	4013      	ands	r3, r2
 8007a08:	83fb      	strh	r3, [r7, #30]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	8bfa      	ldrh	r2, [r7, #30]
 8007a10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a14:	b292      	uxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3306      	adds	r3, #6
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d019      	beq.n	8007a80 <PCD_EP_ISR_Handler+0x1f0>
 8007a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5a:	6959      	ldr	r1, [r3, #20]
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f005 f813 	bl	800ca90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	441a      	add	r2, r3
 8007a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f006 f839 	bl	800daf2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007a8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 82bd 	bne.w	8008012 <PCD_EP_ISR_Handler+0x782>
 8007a98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007a9c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aa4:	f000 82b5 	beq.w	8008012 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	4413      	add	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ade:	d91d      	bls.n	8007b1c <PCD_EP_ISR_Handler+0x28c>
 8007ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <PCD_EP_ISR_Handler+0x26a>
 8007af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af6:	3b01      	subs	r3, #1
 8007af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	e026      	b.n	8007b6a <PCD_EP_ISR_Handler+0x2da>
 8007b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <PCD_EP_ISR_Handler+0x2aa>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	e017      	b.n	8007b6a <PCD_EP_ISR_Handler+0x2da>
 8007b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <PCD_EP_ISR_Handler+0x2c4>
 8007b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b50:	3301      	adds	r3, #1
 8007b52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	029b      	lsls	r3, r3, #10
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7a:	827b      	strh	r3, [r7, #18]
 8007b7c:	8a7b      	ldrh	r3, [r7, #18]
 8007b7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b82:	827b      	strh	r3, [r7, #18]
 8007b84:	8a7b      	ldrh	r3, [r7, #18]
 8007b86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b8a:	827b      	strh	r3, [r7, #18]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	8a7b      	ldrh	r3, [r7, #18]
 8007b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8013      	strh	r3, [r2, #0]
 8007ba6:	e234      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007bbc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f280 80fc 	bge.w	8007dbe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007bdc:	4013      	ands	r3, r2
 8007bde:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007bf4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007bf8:	b292      	uxth	r2, r2
 8007bfa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007bfc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4413      	add	r3, r2
 8007c10:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c14:	7b1b      	ldrb	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d125      	bne.n	8007c66 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3306      	adds	r3, #6
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c42:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007c46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 8092 	beq.w	8007d74 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c56:	6959      	ldr	r1, [r3, #20]
 8007c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5a:	88da      	ldrh	r2, [r3, #6]
 8007c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007c60:	f004 ff16 	bl	800ca90 <USB_ReadPMA>
 8007c64:	e086      	b.n	8007d74 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d10a      	bne.n	8007c84 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007c6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007c72:	461a      	mov	r2, r3
 8007c74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9d9 	bl	800802e <HAL_PCD_EP_DB_Receive>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007c82:	e077      	b.n	8007d74 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	441a      	add	r2, r3
 8007cb0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d024      	beq.n	8007d2c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3302      	adds	r3, #2
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007d0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d02e      	beq.n	8007d74 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1c:	6959      	ldr	r1, [r3, #20]
 8007d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d20:	891a      	ldrh	r2, [r3, #8]
 8007d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d26:	f004 feb3 	bl	800ca90 <USB_ReadPMA>
 8007d2a:	e023      	b.n	8007d74 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	4413      	add	r3, r2
 8007d40:	3306      	adds	r3, #6
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d54:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d66:	6959      	ldr	r1, [r3, #20]
 8007d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d6a:	895a      	ldrh	r2, [r3, #10]
 8007d6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d70:	f004 fe8e 	bl	800ca90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d7c:	441a      	add	r2, r3
 8007d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d84:	695a      	ldr	r2, [r3, #20]
 8007d86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007d8a:	441a      	add	r2, r3
 8007d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <PCD_EP_ISR_Handler+0x514>
 8007d98:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d206      	bcs.n	8007db2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f005 fea1 	bl	800daf2 <HAL_PCD_DataOutStageCallback>
 8007db0:	e005      	b.n	8007dbe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007db8:	4618      	mov	r0, r3
 8007dba:	f003 f949 	bl	800b050 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007dbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8123 	beq.w	8008012 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8007dcc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	3310      	adds	r3, #16
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e1e:	78db      	ldrb	r3, [r3, #3]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	f040 80a2 	bne.w	8007f6a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8007e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e28:	2200      	movs	r2, #0
 8007e2a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e2e:	7b1b      	ldrb	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8093 	beq.w	8007f5c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d046      	beq.n	8007ed0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d126      	bne.n	8007e98 <PCD_EP_ISR_Handler+0x608>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	4413      	add	r3, r2
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	011a      	lsls	r2, r3, #4
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	801a      	strh	r2, [r3, #0]
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e061      	b.n	8007f5c <PCD_EP_ISR_Handler+0x6cc>
 8007e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d15d      	bne.n	8007f5c <PCD_EP_ISR_Handler+0x6cc>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	4413      	add	r3, r2
 8007eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	011a      	lsls	r2, r3, #4
 8007ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	2200      	movs	r2, #0
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	e045      	b.n	8007f5c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d126      	bne.n	8007f2c <PCD_EP_ISR_Handler+0x69c>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef2:	4413      	add	r3, r2
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	011a      	lsls	r2, r3, #4
 8007efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efe:	4413      	add	r3, r2
 8007f00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	e017      	b.n	8007f5c <PCD_EP_ISR_Handler+0x6cc>
 8007f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d113      	bne.n	8007f5c <PCD_EP_ISR_Handler+0x6cc>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f42:	4413      	add	r3, r2
 8007f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	011a      	lsls	r2, r3, #4
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f58:	2200      	movs	r2, #0
 8007f5a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f005 fde0 	bl	800db28 <HAL_PCD_DataInStageCallback>
 8007f68:	e053      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007f6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d146      	bne.n	8008004 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d907      	bls.n	8007fbe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8007fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007fb6:	1ad2      	subs	r2, r2, r3
 8007fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fba:	619a      	str	r2, [r3, #24]
 8007fbc:	e002      	b.n	8007fc4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8007fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f005 fda8 	bl	800db28 <HAL_PCD_DataInStageCallback>
 8007fd8:	e01b      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007fe2:	441a      	add	r2, r3
 8007fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ff0:	441a      	add	r2, r3
 8007ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ff4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f003 f827 	bl	800b050 <USB_EPStartXfer>
 8008002:	e006      	b.n	8008012 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008004:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008008:	461a      	mov	r2, r3
 800800a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f91b 	bl	8008248 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800801a:	b29b      	uxth	r3, r3
 800801c:	b21b      	sxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	f6ff ac3b 	blt.w	800789a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3758      	adds	r7, #88	@ 0x58
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b088      	sub	sp, #32
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	4613      	mov	r3, r2
 800803a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d07e      	beq.n	8008144 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800804e:	b29b      	uxth	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	3302      	adds	r3, #2
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800806e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	8b7b      	ldrh	r3, [r7, #26]
 8008076:	429a      	cmp	r2, r3
 8008078:	d306      	bcc.n	8008088 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	8b7b      	ldrh	r3, [r7, #26]
 8008080:	1ad2      	subs	r2, r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	619a      	str	r2, [r3, #24]
 8008086:	e002      	b.n	800808e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d123      	bne.n	80080de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b0:	833b      	strh	r3, [r7, #24]
 80080b2:	8b3b      	ldrh	r3, [r7, #24]
 80080b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080b8:	833b      	strh	r3, [r7, #24]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	8b3b      	ldrh	r3, [r7, #24]
 80080ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01f      	beq.n	8008128 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008102:	82fb      	strh	r3, [r7, #22]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	441a      	add	r2, r3
 8008112:	8afb      	ldrh	r3, [r7, #22]
 8008114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800811c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008120:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008124:	b29b      	uxth	r3, r3
 8008126:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008128:	8b7b      	ldrh	r3, [r7, #26]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8087 	beq.w	800823e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	6959      	ldr	r1, [r3, #20]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	891a      	ldrh	r2, [r3, #8]
 800813c:	8b7b      	ldrh	r3, [r7, #26]
 800813e:	f004 fca7 	bl	800ca90 <USB_ReadPMA>
 8008142:	e07c      	b.n	800823e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800814c:	b29b      	uxth	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	4413      	add	r3, r2
 8008158:	3306      	adds	r3, #6
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800816c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	8b7b      	ldrh	r3, [r7, #26]
 8008174:	429a      	cmp	r2, r3
 8008176:	d306      	bcc.n	8008186 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	8b7b      	ldrh	r3, [r7, #26]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	619a      	str	r2, [r3, #24]
 8008184:	e002      	b.n	800818c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d123      	bne.n	80081dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	83fb      	strh	r3, [r7, #30]
 80081b0:	8bfb      	ldrh	r3, [r7, #30]
 80081b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80081b6:	83fb      	strh	r3, [r7, #30]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d11f      	bne.n	8008226 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008200:	83bb      	strh	r3, [r7, #28]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	8bbb      	ldrh	r3, [r7, #28]
 8008212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800821a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800821e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008222:	b29b      	uxth	r3, r3
 8008224:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008226:	8b7b      	ldrh	r3, [r7, #26]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	6959      	ldr	r1, [r3, #20]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	895a      	ldrh	r2, [r3, #10]
 8008238:	8b7b      	ldrh	r3, [r7, #26]
 800823a:	f004 fc29 	bl	800ca90 <USB_ReadPMA>
    }
  }

  return count;
 800823e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b0a4      	sub	sp, #144	@ 0x90
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 81dd 	beq.w	800861c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	3302      	adds	r3, #2
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008296:	429a      	cmp	r2, r3
 8008298:	d907      	bls.n	80082aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	619a      	str	r2, [r3, #24]
 80082a8:	e002      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 80b9 	bne.w	800842c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d126      	bne.n	8008310 <HAL_PCD_EP_DB_Transmit+0xc8>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	4413      	add	r3, r2
 80082d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	011a      	lsls	r2, r3, #4
 80082e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008308:	b29a      	uxth	r2, r3
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e01a      	b.n	8008346 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d116      	bne.n	8008346 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008326:	b29b      	uxth	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	4413      	add	r3, r2
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	011a      	lsls	r2, r3, #4
 8008336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008338:	4413      	add	r3, r2
 800833a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800833e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d126      	bne.n	80083a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	011a      	lsls	r2, r3, #4
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008386:	b29a      	uxth	r2, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839a:	b29a      	uxth	r2, r3
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e017      	b.n	80083d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d113      	bne.n	80083d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	4413      	add	r3, r2
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	011a      	lsls	r2, r3, #4
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2200      	movs	r2, #0
 80083d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f005 fba5 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 82fc 	beq.w	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008404:	82fb      	strh	r3, [r7, #22]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800841a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800841e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008426:	b29b      	uxth	r3, r3
 8008428:	8013      	strh	r3, [r2, #0]
 800842a:	e2da      	b.n	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008450:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800846a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800846e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008476:	b29b      	uxth	r3, r3
 8008478:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008480:	2b01      	cmp	r3, #1
 8008482:	f040 82ae 	bne.w	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800848e:	441a      	add	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800849c:	441a      	add	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6a1a      	ldr	r2, [r3, #32]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d30b      	bcc.n	80084c6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	621a      	str	r2, [r3, #32]
 80084c4:	e017      	b.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d108      	bne.n	80084e0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80084ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80084d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80084de:	e00a      	b.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2200      	movs	r2, #0
 80084f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d165      	bne.n	80085ca <HAL_PCD_EP_DB_Transmit+0x382>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008512:	4413      	add	r3, r2
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	011a      	lsls	r2, r3, #4
 800851c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800851e:	4413      	add	r3, r2
 8008520:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008524:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008530:	b29a      	uxth	r2, r3
 8008532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800853a:	2b3e      	cmp	r3, #62	@ 0x3e
 800853c:	d91d      	bls.n	800857a <HAL_PCD_EP_DB_Transmit+0x332>
 800853e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <HAL_PCD_EP_DB_Transmit+0x310>
 8008552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008554:	3b01      	subs	r3, #1
 8008556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008560:	b29b      	uxth	r3, r3
 8008562:	029b      	lsls	r3, r3, #10
 8008564:	b29b      	uxth	r3, r3
 8008566:	4313      	orrs	r3, r2
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008572:	b29a      	uxth	r2, r3
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	e044      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800857a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <HAL_PCD_EP_DB_Transmit+0x350>
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	e035      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80085ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ae:	3301      	adds	r3, #1
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e01c      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d118      	bne.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e6:	4413      	add	r3, r2
 80085e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	011a      	lsls	r2, r3, #4
 80085f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f2:	4413      	add	r3, r2
 80085f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80085fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008602:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6959      	ldr	r1, [r3, #20]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	891a      	ldrh	r2, [r3, #8]
 8008610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008614:	b29b      	uxth	r3, r3
 8008616:	f004 f9f6 	bl	800ca06 <USB_WritePMA>
 800861a:	e1e2      	b.n	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	3306      	adds	r3, #6
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	6812      	ldr	r2, [r2, #0]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008644:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008650:	429a      	cmp	r2, r3
 8008652:	d307      	bcc.n	8008664 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	619a      	str	r2, [r3, #24]
 8008662:	e002      	b.n	800866a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 80c0 	bne.w	80087f4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d126      	bne.n	80086ca <HAL_PCD_EP_DB_Transmit+0x482>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800868a:	b29b      	uxth	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008690:	4413      	add	r3, r2
 8008692:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	011a      	lsls	r2, r3, #4
 800869a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800869c:	4413      	add	r3, r2
 800869e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	e01a      	b.n	8008700 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d116      	bne.n	8008700 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e6:	4413      	add	r3, r2
 80086e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	011a      	lsls	r2, r3, #4
 80086f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f2:	4413      	add	r3, r2
 80086f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80086fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086fc:	2200      	movs	r2, #0
 80086fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	677b      	str	r3, [r7, #116]	@ 0x74
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d12b      	bne.n	8008766 <HAL_PCD_EP_DB_Transmit+0x51e>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800871c:	b29b      	uxth	r3, r3
 800871e:	461a      	mov	r2, r3
 8008720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008722:	4413      	add	r3, r2
 8008724:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	011a      	lsls	r2, r3, #4
 800872c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872e:	4413      	add	r3, r2
 8008730:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29b      	uxth	r3, r3
 8008740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875c:	b29a      	uxth	r2, r3
 800875e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	e017      	b.n	8008796 <HAL_PCD_EP_DB_Transmit+0x54e>
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d113      	bne.n	8008796 <HAL_PCD_EP_DB_Transmit+0x54e>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008776:	b29b      	uxth	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800877c:	4413      	add	r3, r2
 800877e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008788:	4413      	add	r3, r2
 800878a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800878e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008792:	2200      	movs	r2, #0
 8008794:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	4619      	mov	r1, r3
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f005 f9c3 	bl	800db28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80087a2:	88fb      	ldrh	r3, [r7, #6]
 80087a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 811a 	bne.w	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]
 80087f2:	e0f6      	b.n	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d121      	bne.n	8008842 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008818:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	441a      	add	r2, r3
 800882a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800882e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800883a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008848:	2b01      	cmp	r3, #1
 800884a:	f040 80ca 	bne.w	80089e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	695a      	ldr	r2, [r3, #20]
 8008852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008856:	441a      	add	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008864:	441a      	add	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	429a      	cmp	r2, r3
 8008874:	d30b      	bcc.n	800888e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	6a1a      	ldr	r2, [r3, #32]
 8008882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	621a      	str	r2, [r3, #32]
 800888c:	e017      	b.n	80088be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d108      	bne.n	80088a8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8008896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800889a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80088a6:	e00a      	b.n	80088be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2200      	movs	r2, #0
 80088b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	785b      	ldrb	r3, [r3, #1]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d165      	bne.n	8008998 <HAL_PCD_EP_DB_Transmit+0x750>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088da:	b29b      	uxth	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088e0:	4413      	add	r3, r2
 80088e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	011a      	lsls	r2, r3, #4
 80088ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088ec:	4413      	add	r3, r2
 80088ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088fe:	b29a      	uxth	r2, r3
 8008900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008908:	2b3e      	cmp	r3, #62	@ 0x3e
 800890a:	d91d      	bls.n	8008948 <HAL_PCD_EP_DB_Transmit+0x700>
 800890c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008918:	f003 031f 	and.w	r3, r3, #31
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <HAL_PCD_EP_DB_Transmit+0x6de>
 8008920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008922:	3b01      	subs	r3, #1
 8008924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29a      	uxth	r2, r3
 800892c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800892e:	b29b      	uxth	r3, r3
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	b29b      	uxth	r3, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	b29b      	uxth	r3, r3
 8008938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008940:	b29a      	uxth	r2, r3
 8008942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e041      	b.n	80089cc <HAL_PCD_EP_DB_Transmit+0x784>
 8008948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_PCD_EP_DB_Transmit+0x71e>
 8008950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e032      	b.n	80089cc <HAL_PCD_EP_DB_Transmit+0x784>
 8008966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800896e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <HAL_PCD_EP_DB_Transmit+0x738>
 800897a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800897c:	3301      	adds	r3, #1
 800897e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29a      	uxth	r2, r3
 8008986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008988:	b29b      	uxth	r3, r3
 800898a:	029b      	lsls	r3, r3, #10
 800898c:	b29b      	uxth	r3, r3
 800898e:	4313      	orrs	r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008994:	801a      	strh	r2, [r3, #0]
 8008996:	e019      	b.n	80089cc <HAL_PCD_EP_DB_Transmit+0x784>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d115      	bne.n	80089cc <HAL_PCD_EP_DB_Transmit+0x784>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	461a      	mov	r2, r3
 80089ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ae:	4413      	add	r3, r2
 80089b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	011a      	lsls	r2, r3, #4
 80089b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ba:	4413      	add	r3, r2
 80089bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6959      	ldr	r1, [r3, #20]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	895a      	ldrh	r2, [r3, #10]
 80089d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f004 f812 	bl	800ca06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089fc:	82bb      	strh	r3, [r7, #20]
 80089fe:	8abb      	ldrh	r3, [r7, #20]
 8008a00:	f083 0310 	eor.w	r3, r3, #16
 8008a04:	82bb      	strh	r3, [r7, #20]
 8008a06:	8abb      	ldrh	r3, [r7, #20]
 8008a08:	f083 0320 	eor.w	r3, r3, #32
 8008a0c:	82bb      	strh	r3, [r7, #20]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	441a      	add	r2, r3
 8008a1c:	8abb      	ldrh	r3, [r7, #20]
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3790      	adds	r7, #144	@ 0x90
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a40:	4b03      	ldr	r3, [pc, #12]	@ (8008a50 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	420e0020 	.word	0x420e0020

08008a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e272      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 8087 	beq.w	8008b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a74:	4b92      	ldr	r3, [pc, #584]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f003 030c 	and.w	r3, r3, #12
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d00c      	beq.n	8008a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a80:	4b8f      	ldr	r3, [pc, #572]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f003 030c 	and.w	r3, r3, #12
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d112      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x5e>
 8008a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a98:	d10b      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9a:	4b89      	ldr	r3, [pc, #548]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d06c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x12c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d168      	bne.n	8008b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e24c      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aba:	d106      	bne.n	8008aca <HAL_RCC_OscConfig+0x76>
 8008abc:	4b80      	ldr	r3, [pc, #512]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7f      	ldr	r2, [pc, #508]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e02e      	b.n	8008b28 <HAL_RCC_OscConfig+0xd4>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10c      	bne.n	8008aec <HAL_RCC_OscConfig+0x98>
 8008ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a7a      	ldr	r2, [pc, #488]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	4b78      	ldr	r3, [pc, #480]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a77      	ldr	r2, [pc, #476]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	e01d      	b.n	8008b28 <HAL_RCC_OscConfig+0xd4>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008af4:	d10c      	bne.n	8008b10 <HAL_RCC_OscConfig+0xbc>
 8008af6:	4b72      	ldr	r3, [pc, #456]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a71      	ldr	r2, [pc, #452]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	4b6f      	ldr	r3, [pc, #444]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a6e      	ldr	r2, [pc, #440]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	e00b      	b.n	8008b28 <HAL_RCC_OscConfig+0xd4>
 8008b10:	4b6b      	ldr	r3, [pc, #428]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a6a      	ldr	r2, [pc, #424]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	4b68      	ldr	r3, [pc, #416]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a67      	ldr	r2, [pc, #412]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d013      	beq.n	8008b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b30:	f7fd fb04 	bl	800613c <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b38:	f7fd fb00 	bl	800613c <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b64      	cmp	r3, #100	@ 0x64
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e200      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0xe4>
 8008b56:	e014      	b.n	8008b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b58:	f7fd faf0 	bl	800613c <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b60:	f7fd faec 	bl	800613c <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b64      	cmp	r3, #100	@ 0x64
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e1ec      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b72:	4b53      	ldr	r3, [pc, #332]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x10c>
 8008b7e:	e000      	b.n	8008b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d063      	beq.n	8008c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b9a:	4b49      	ldr	r3, [pc, #292]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d11c      	bne.n	8008be0 <HAL_RCC_OscConfig+0x18c>
 8008ba6:	4b46      	ldr	r3, [pc, #280]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d116      	bne.n	8008be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bb2:	4b43      	ldr	r3, [pc, #268]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <HAL_RCC_OscConfig+0x176>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d001      	beq.n	8008bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e1c0      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bca:	4b3d      	ldr	r3, [pc, #244]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4939      	ldr	r1, [pc, #228]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bde:	e03a      	b.n	8008c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d020      	beq.n	8008c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008be8:	4b36      	ldr	r3, [pc, #216]	@ (8008cc4 <HAL_RCC_OscConfig+0x270>)
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bee:	f7fd faa5 	bl	800613c <HAL_GetTick>
 8008bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bf6:	f7fd faa1 	bl	800613c <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e1a1      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c08:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c14:	4b2a      	ldr	r3, [pc, #168]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4927      	ldr	r1, [pc, #156]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	600b      	str	r3, [r1, #0]
 8008c28:	e015      	b.n	8008c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c2a:	4b26      	ldr	r3, [pc, #152]	@ (8008cc4 <HAL_RCC_OscConfig+0x270>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c30:	f7fd fa84 	bl	800613c <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c36:	e008      	b.n	8008c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c38:	f7fd fa80 	bl	800613c <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e180      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f0      	bne.n	8008c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d03a      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d019      	beq.n	8008c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c6a:	4b17      	ldr	r3, [pc, #92]	@ (8008cc8 <HAL_RCC_OscConfig+0x274>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c70:	f7fd fa64 	bl	800613c <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c76:	e008      	b.n	8008c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c78:	f7fd fa60 	bl	800613c <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e160      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <HAL_RCC_OscConfig+0x26c>)
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0f0      	beq.n	8008c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c96:	2001      	movs	r0, #1
 8008c98:	f000 face 	bl	8009238 <RCC_Delay>
 8008c9c:	e01c      	b.n	8008cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <HAL_RCC_OscConfig+0x274>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ca4:	f7fd fa4a 	bl	800613c <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008caa:	e00f      	b.n	8008ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cac:	f7fd fa46 	bl	800613c <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d908      	bls.n	8008ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e146      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	42420000 	.word	0x42420000
 8008cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ccc:	4b92      	ldr	r3, [pc, #584]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e9      	bne.n	8008cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 80a6 	beq.w	8008e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cea:	4b8b      	ldr	r3, [pc, #556]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10d      	bne.n	8008d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cf6:	4b88      	ldr	r3, [pc, #544]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	4a87      	ldr	r2, [pc, #540]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d00:	61d3      	str	r3, [r2, #28]
 8008d02:	4b85      	ldr	r3, [pc, #532]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d0a:	60bb      	str	r3, [r7, #8]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d12:	4b82      	ldr	r3, [pc, #520]	@ (8008f1c <HAL_RCC_OscConfig+0x4c8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d118      	bne.n	8008d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8008f1c <HAL_RCC_OscConfig+0x4c8>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a7e      	ldr	r2, [pc, #504]	@ (8008f1c <HAL_RCC_OscConfig+0x4c8>)
 8008d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d2a:	f7fd fa07 	bl	800613c <HAL_GetTick>
 8008d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	e008      	b.n	8008d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d32:	f7fd fa03 	bl	800613c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b64      	cmp	r3, #100	@ 0x64
 8008d3e:	d901      	bls.n	8008d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e103      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d44:	4b75      	ldr	r3, [pc, #468]	@ (8008f1c <HAL_RCC_OscConfig+0x4c8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0f0      	beq.n	8008d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d106      	bne.n	8008d66 <HAL_RCC_OscConfig+0x312>
 8008d58:	4b6f      	ldr	r3, [pc, #444]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	6213      	str	r3, [r2, #32]
 8008d64:	e02d      	b.n	8008dc2 <HAL_RCC_OscConfig+0x36e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x334>
 8008d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	4a69      	ldr	r2, [pc, #420]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d74:	f023 0301 	bic.w	r3, r3, #1
 8008d78:	6213      	str	r3, [r2, #32]
 8008d7a:	4b67      	ldr	r3, [pc, #412]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	4a66      	ldr	r2, [pc, #408]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	f023 0304 	bic.w	r3, r3, #4
 8008d84:	6213      	str	r3, [r2, #32]
 8008d86:	e01c      	b.n	8008dc2 <HAL_RCC_OscConfig+0x36e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b05      	cmp	r3, #5
 8008d8e:	d10c      	bne.n	8008daa <HAL_RCC_OscConfig+0x356>
 8008d90:	4b61      	ldr	r3, [pc, #388]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	4a60      	ldr	r2, [pc, #384]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d96:	f043 0304 	orr.w	r3, r3, #4
 8008d9a:	6213      	str	r3, [r2, #32]
 8008d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	4a5d      	ldr	r2, [pc, #372]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	6213      	str	r3, [r2, #32]
 8008da8:	e00b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x36e>
 8008daa:	4b5b      	ldr	r3, [pc, #364]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	4a5a      	ldr	r2, [pc, #360]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	6213      	str	r3, [r2, #32]
 8008db6:	4b58      	ldr	r3, [pc, #352]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	4a57      	ldr	r2, [pc, #348]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008dbc:	f023 0304 	bic.w	r3, r3, #4
 8008dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d015      	beq.n	8008df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dca:	f7fd f9b7 	bl	800613c <HAL_GetTick>
 8008dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dd0:	e00a      	b.n	8008de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd2:	f7fd f9b3 	bl	800613c <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d901      	bls.n	8008de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e0b1      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008de8:	4b4b      	ldr	r3, [pc, #300]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0ee      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x37e>
 8008df4:	e014      	b.n	8008e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008df6:	f7fd f9a1 	bl	800613c <HAL_GetTick>
 8008dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dfc:	e00a      	b.n	8008e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dfe:	f7fd f99d 	bl	800613c <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e09b      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e14:	4b40      	ldr	r3, [pc, #256]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1ee      	bne.n	8008dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d105      	bne.n	8008e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e26:	4b3c      	ldr	r3, [pc, #240]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8087 	beq.w	8008f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e3c:	4b36      	ldr	r3, [pc, #216]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f003 030c 	and.w	r3, r3, #12
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d061      	beq.n	8008f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d146      	bne.n	8008ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e50:	4b33      	ldr	r3, [pc, #204]	@ (8008f20 <HAL_RCC_OscConfig+0x4cc>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e56:	f7fd f971 	bl	800613c <HAL_GetTick>
 8008e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e5e:	f7fd f96d 	bl	800613c <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e06d      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e70:	4b29      	ldr	r3, [pc, #164]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f0      	bne.n	8008e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e84:	d108      	bne.n	8008e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e86:	4b24      	ldr	r3, [pc, #144]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	4921      	ldr	r1, [pc, #132]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e98:	4b1f      	ldr	r3, [pc, #124]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a19      	ldr	r1, [r3, #32]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	491b      	ldr	r1, [pc, #108]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8008f20 <HAL_RCC_OscConfig+0x4cc>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb6:	f7fd f941 	bl	800613c <HAL_GetTick>
 8008eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ebc:	e008      	b.n	8008ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ebe:	f7fd f93d 	bl	800613c <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e03d      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ed0:	4b11      	ldr	r3, [pc, #68]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f0      	beq.n	8008ebe <HAL_RCC_OscConfig+0x46a>
 8008edc:	e035      	b.n	8008f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ede:	4b10      	ldr	r3, [pc, #64]	@ (8008f20 <HAL_RCC_OscConfig+0x4cc>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee4:	f7fd f92a 	bl	800613c <HAL_GetTick>
 8008ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eec:	f7fd f926 	bl	800613c <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e026      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008efe:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <HAL_RCC_OscConfig+0x4c4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x498>
 8008f0a:	e01e      	b.n	8008f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d107      	bne.n	8008f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e019      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	40007000 	.word	0x40007000
 8008f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <HAL_RCC_OscConfig+0x500>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d106      	bne.n	8008f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d001      	beq.n	8008f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40021000 	.word	0x40021000

08008f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0d0      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d910      	bls.n	8008f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b67      	ldr	r3, [pc, #412]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 0207 	bic.w	r2, r3, #7
 8008f82:	4965      	ldr	r1, [pc, #404]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	4b63      	ldr	r3, [pc, #396]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e0b8      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d020      	beq.n	8008fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fb4:	4b59      	ldr	r3, [pc, #356]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a58      	ldr	r2, [pc, #352]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fcc:	4b53      	ldr	r3, [pc, #332]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4a52      	ldr	r2, [pc, #328]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd8:	4b50      	ldr	r3, [pc, #320]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	494d      	ldr	r1, [pc, #308]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d040      	beq.n	8009078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ffe:	4b47      	ldr	r3, [pc, #284]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d115      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e07f      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d107      	bne.n	8009026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009016:	4b41      	ldr	r3, [pc, #260]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e073      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009026:	4b3d      	ldr	r3, [pc, #244]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e06b      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009036:	4b39      	ldr	r3, [pc, #228]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f023 0203 	bic.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4936      	ldr	r1, [pc, #216]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009044:	4313      	orrs	r3, r2
 8009046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009048:	f7fd f878 	bl	800613c <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7fd f874 	bl	800613c <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e053      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009066:	4b2d      	ldr	r3, [pc, #180]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f003 020c 	and.w	r2, r3, #12
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d1eb      	bne.n	8009050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009078:	4b27      	ldr	r3, [pc, #156]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d210      	bcs.n	80090a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009086:	4b24      	ldr	r3, [pc, #144]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f023 0207 	bic.w	r2, r3, #7
 800908e:	4922      	ldr	r1, [pc, #136]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	4313      	orrs	r3, r2
 8009094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009096:	4b20      	ldr	r3, [pc, #128]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d001      	beq.n	80090a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e032      	b.n	800910e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b4:	4b19      	ldr	r3, [pc, #100]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4916      	ldr	r1, [pc, #88]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80090d2:	4b12      	ldr	r3, [pc, #72]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	490e      	ldr	r1, [pc, #56]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090e6:	f000 f821 	bl	800912c <HAL_RCC_GetSysClockFreq>
 80090ea:	4602      	mov	r2, r0
 80090ec:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	091b      	lsrs	r3, r3, #4
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	490a      	ldr	r1, [pc, #40]	@ (8009120 <HAL_RCC_ClockConfig+0x1c8>)
 80090f8:	5ccb      	ldrb	r3, [r1, r3]
 80090fa:	fa22 f303 	lsr.w	r3, r2, r3
 80090fe:	4a09      	ldr	r2, [pc, #36]	@ (8009124 <HAL_RCC_ClockConfig+0x1cc>)
 8009100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009102:	4b09      	ldr	r3, [pc, #36]	@ (8009128 <HAL_RCC_ClockConfig+0x1d0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7fc ffd6 	bl	80060b8 <HAL_InitTick>

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40022000 	.word	0x40022000
 800911c:	40021000 	.word	0x40021000
 8009120:	0800ee08 	.word	0x0800ee08
 8009124:	20000000 	.word	0x20000000
 8009128:	2000000c 	.word	0x2000000c

0800912c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	2300      	movs	r3, #0
 8009138:	60bb      	str	r3, [r7, #8]
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009146:	4b1e      	ldr	r3, [pc, #120]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	2b04      	cmp	r3, #4
 8009154:	d002      	beq.n	800915c <HAL_RCC_GetSysClockFreq+0x30>
 8009156:	2b08      	cmp	r3, #8
 8009158:	d003      	beq.n	8009162 <HAL_RCC_GetSysClockFreq+0x36>
 800915a:	e027      	b.n	80091ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800915c:	4b19      	ldr	r3, [pc, #100]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800915e:	613b      	str	r3, [r7, #16]
      break;
 8009160:	e027      	b.n	80091b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	0c9b      	lsrs	r3, r3, #18
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	4a17      	ldr	r2, [pc, #92]	@ (80091c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800916c:	5cd3      	ldrb	r3, [r2, r3]
 800916e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d010      	beq.n	800919c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800917a:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	0c5b      	lsrs	r3, r3, #17
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	4a11      	ldr	r2, [pc, #68]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8009186:	5cd3      	ldrb	r3, [r2, r3]
 8009188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a0d      	ldr	r2, [pc, #52]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800918e:	fb03 f202 	mul.w	r2, r3, r2
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	e004      	b.n	80091a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a0c      	ldr	r2, [pc, #48]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	613b      	str	r3, [r7, #16]
      break;
 80091aa:	e002      	b.n	80091b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80091ac:	4b05      	ldr	r3, [pc, #20]	@ (80091c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80091ae:	613b      	str	r3, [r7, #16]
      break;
 80091b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091b2:	693b      	ldr	r3, [r7, #16]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40021000 	.word	0x40021000
 80091c4:	007a1200 	.word	0x007a1200
 80091c8:	0800ee20 	.word	0x0800ee20
 80091cc:	0800ee30 	.word	0x0800ee30
 80091d0:	003d0900 	.word	0x003d0900

080091d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091d8:	4b02      	ldr	r3, [pc, #8]	@ (80091e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr
 80091e4:	20000000 	.word	0x20000000

080091e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091ec:	f7ff fff2 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 80091f0:	4602      	mov	r2, r0
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	0a1b      	lsrs	r3, r3, #8
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	4903      	ldr	r1, [pc, #12]	@ (800920c <HAL_RCC_GetPCLK1Freq+0x24>)
 80091fe:	5ccb      	ldrb	r3, [r1, r3]
 8009200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009204:	4618      	mov	r0, r3
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40021000 	.word	0x40021000
 800920c:	0800ee18 	.word	0x0800ee18

08009210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009214:	f7ff ffde 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 8009218:	4602      	mov	r2, r0
 800921a:	4b05      	ldr	r3, [pc, #20]	@ (8009230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	0adb      	lsrs	r3, r3, #11
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	4903      	ldr	r1, [pc, #12]	@ (8009234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009226:	5ccb      	ldrb	r3, [r1, r3]
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800922c:	4618      	mov	r0, r3
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40021000 	.word	0x40021000
 8009234:	0800ee18 	.word	0x0800ee18

08009238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009240:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <RCC_Delay+0x34>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0a      	ldr	r2, [pc, #40]	@ (8009270 <RCC_Delay+0x38>)
 8009246:	fba2 2303 	umull	r2, r3, r2, r3
 800924a:	0a5b      	lsrs	r3, r3, #9
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	fb02 f303 	mul.w	r3, r2, r3
 8009252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009254:	bf00      	nop
  }
  while (Delay --);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	1e5a      	subs	r2, r3, #1
 800925a:	60fa      	str	r2, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1f9      	bne.n	8009254 <RCC_Delay+0x1c>
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	bc80      	pop	{r7}
 800926a:	4770      	bx	lr
 800926c:	20000000 	.word	0x20000000
 8009270:	10624dd3 	.word	0x10624dd3

08009274 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d07d      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009290:	2300      	movs	r3, #0
 8009292:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009294:	4b4f      	ldr	r3, [pc, #316]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a0:	4b4c      	ldr	r3, [pc, #304]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4a4b      	ldr	r2, [pc, #300]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092aa:	61d3      	str	r3, [r2, #28]
 80092ac:	4b49      	ldr	r3, [pc, #292]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092b8:	2301      	movs	r3, #1
 80092ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092bc:	4b46      	ldr	r3, [pc, #280]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d118      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092c8:	4b43      	ldr	r3, [pc, #268]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a42      	ldr	r2, [pc, #264]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d4:	f7fc ff32 	bl	800613c <HAL_GetTick>
 80092d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092da:	e008      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092dc:	f7fc ff2e 	bl	800613c <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b64      	cmp	r3, #100	@ 0x64
 80092e8:	d901      	bls.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e06d      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ee:	4b3a      	ldr	r3, [pc, #232]	@ (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092fa:	4b36      	ldr	r3, [pc, #216]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009302:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d02e      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	429a      	cmp	r2, r3
 8009316:	d027      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009318:	4b2e      	ldr	r3, [pc, #184]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009320:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009322:	4b2e      	ldr	r3, [pc, #184]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009328:	4b2c      	ldr	r3, [pc, #176]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800932e:	4a29      	ldr	r2, [pc, #164]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d014      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800933e:	f7fc fefd 	bl	800613c <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009344:	e00a      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009346:	f7fc fef9 	bl	800613c <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009354:	4293      	cmp	r3, r2
 8009356:	d901      	bls.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e036      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935c:	4b1d      	ldr	r3, [pc, #116]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0ee      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009368:	4b1a      	ldr	r3, [pc, #104]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4917      	ldr	r1, [pc, #92]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009376:	4313      	orrs	r3, r2
 8009378:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d105      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009380:	4b14      	ldr	r3, [pc, #80]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	4a13      	ldr	r2, [pc, #76]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800938a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d008      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009398:	4b0e      	ldr	r3, [pc, #56]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	490b      	ldr	r1, [pc, #44]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d008      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093b6:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	4904      	ldr	r1, [pc, #16]	@ (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40021000 	.word	0x40021000
 80093d8:	40007000 	.word	0x40007000
 80093dc:	42420440 	.word	0x42420440

080093e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	2300      	movs	r3, #0
 80093f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	2300      	movs	r3, #0
 80093fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b10      	cmp	r3, #16
 8009400:	d00a      	beq.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b10      	cmp	r3, #16
 8009406:	f200 808a 	bhi.w	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d045      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d075      	beq.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8009416:	e082      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8009418:	4b46      	ldr	r3, [pc, #280]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800941e:	4b45      	ldr	r3, [pc, #276]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d07b      	beq.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	0c9b      	lsrs	r3, r3, #18
 800942e:	f003 030f 	and.w	r3, r3, #15
 8009432:	4a41      	ldr	r2, [pc, #260]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8009434:	5cd3      	ldrb	r3, [r2, r3]
 8009436:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d015      	beq.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009442:	4b3c      	ldr	r3, [pc, #240]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	0c5b      	lsrs	r3, r3, #17
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	4a3b      	ldr	r2, [pc, #236]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800944e:	5cd3      	ldrb	r3, [r2, r3]
 8009450:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00d      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800945c:	4a38      	ldr	r2, [pc, #224]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	fbb2 f2f3 	udiv	r2, r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	61fb      	str	r3, [r7, #28]
 800946c:	e004      	b.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4a34      	ldr	r2, [pc, #208]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009478:	4b2e      	ldr	r3, [pc, #184]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009484:	d102      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	61bb      	str	r3, [r7, #24]
      break;
 800948a:	e04a      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4a2d      	ldr	r2, [pc, #180]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	085b      	lsrs	r3, r3, #1
 8009498:	61bb      	str	r3, [r7, #24]
      break;
 800949a:	e042      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800949c:	4b25      	ldr	r3, [pc, #148]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ac:	d108      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80094b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	e01f      	b.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ca:	d109      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80094cc:	4b19      	ldr	r3, [pc, #100]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80094d8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	e00f      	b.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094ea:	d11c      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80094ec:	4b11      	ldr	r3, [pc, #68]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d016      	beq.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80094f8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80094fc:	61bb      	str	r3, [r7, #24]
      break;
 80094fe:	e012      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009500:	e011      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009502:	f7ff fe85 	bl	8009210 <HAL_RCC_GetPCLK2Freq>
 8009506:	4602      	mov	r2, r0
 8009508:	4b0a      	ldr	r3, [pc, #40]	@ (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	0b9b      	lsrs	r3, r3, #14
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	3301      	adds	r3, #1
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	fbb2 f3f3 	udiv	r3, r2, r3
 800951a:	61bb      	str	r3, [r7, #24]
      break;
 800951c:	e004      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800951e:	bf00      	nop
 8009520:	e002      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009522:	bf00      	nop
 8009524:	e000      	b.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009526:	bf00      	nop
    }
  }
  return (frequency);
 8009528:	69bb      	ldr	r3, [r7, #24]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	40021000 	.word	0x40021000
 8009538:	0800ee34 	.word	0x0800ee34
 800953c:	0800ee44 	.word	0x0800ee44
 8009540:	007a1200 	.word	0x007a1200
 8009544:	003d0900 	.word	0x003d0900
 8009548:	aaaaaaab 	.word	0xaaaaaaab

0800954c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e07a      	b.n	8009658 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	7c5b      	ldrb	r3, [r3, #17]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d105      	bne.n	8009578 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fc fb6a 	bl	8005c4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f870 	bl	8009664 <HAL_RTC_WaitForSynchro>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2204      	movs	r2, #4
 800958e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e061      	b.n	8009658 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f892 	bl	80096be <RTC_EnterInitMode>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2204      	movs	r2, #4
 80095a4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e056      	b.n	8009658 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0207 	bic.w	r2, r2, #7
 80095b8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d005      	beq.n	80095ce <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80095c2:	4b27      	ldr	r3, [pc, #156]	@ (8009660 <HAL_RTC_Init+0x114>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c6:	4a26      	ldr	r2, [pc, #152]	@ (8009660 <HAL_RTC_Init+0x114>)
 80095c8:	f023 0301 	bic.w	r3, r3, #1
 80095cc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80095ce:	4b24      	ldr	r3, [pc, #144]	@ (8009660 <HAL_RTC_Init+0x114>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	4921      	ldr	r1, [pc, #132]	@ (8009660 <HAL_RTC_Init+0x114>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d003      	beq.n	80095f2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	e00e      	b.n	8009610 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80095f2:	2001      	movs	r0, #1
 80095f4:	f7ff fef4 	bl	80093e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80095f8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2204      	movs	r2, #4
 8009604:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e026      	b.n	8009658 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b01      	subs	r3, #1
 800960e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	0c1a      	lsrs	r2, r3, #16
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f002 020f 	and.w	r2, r2, #15
 800961c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	b292      	uxth	r2, r2
 8009626:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f870 	bl	800970e <RTC_ExitInitMode>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2204      	movs	r2, #4
 8009638:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e00c      	b.n	8009658 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8009656:	2300      	movs	r3, #0
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	40006c00 	.word	0x40006c00

08009664 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e01d      	b.n	80096b6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0208 	bic.w	r2, r2, #8
 8009688:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800968a:	f7fc fd57 	bl	800613c <HAL_GetTick>
 800968e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009690:	e009      	b.n	80096a6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009692:	f7fc fd53 	bl	800613c <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a0:	d901      	bls.n	80096a6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e007      	b.n	80096b6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f003 0308 	and.w	r3, r3, #8
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0ee      	beq.n	8009692 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80096ca:	f7fc fd37 	bl	800613c <HAL_GetTick>
 80096ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80096d0:	e009      	b.n	80096e6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80096d2:	f7fc fd33 	bl	800613c <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096e0:	d901      	bls.n	80096e6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e00f      	b.n	8009706 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f003 0320 	and.w	r3, r3, #32
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0ee      	beq.n	80096d2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0210 	orr.w	r2, r2, #16
 8009702:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0210 	bic.w	r2, r2, #16
 8009728:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800972a:	f7fc fd07 	bl	800613c <HAL_GetTick>
 800972e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009730:	e009      	b.n	8009746 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009732:	f7fc fd03 	bl	800613c <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009740:	d901      	bls.n	8009746 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e007      	b.n	8009756 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f003 0320 	and.w	r3, r3, #32
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0ee      	beq.n	8009732 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8009770:	4b07      	ldr	r3, [pc, #28]	@ (8009790 <HAL_RTCEx_BKUPWrite+0x30>)
 8009772:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	b292      	uxth	r2, r2
 8009784:	601a      	str	r2, [r3, #0]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr
 8009790:	40006c00 	.word	0x40006c00

08009794 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80097a6:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <HAL_RTCEx_BKUPRead+0x34>)
 80097a8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80097bc:	68bb      	ldr	r3, [r7, #8]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr
 80097c8:	40006c00 	.word	0x40006c00

080097cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e042      	b.n	8009864 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fc fb96 	bl	8005f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2224      	movs	r2, #36	@ 0x24
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800980e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 ffcf 	bl	800a7b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695a      	ldr	r2, [r3, #20]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2220      	movs	r2, #32
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e024      	b.n	80098c8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2224      	movs	r2, #36	@ 0x24
 8009882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009894:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fc fbc2 	bl	8006020 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08a      	sub	sp, #40	@ 0x28
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	d175      	bne.n	80099dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_UART_Transmit+0x2c>
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e06e      	b.n	80099de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2221      	movs	r2, #33	@ 0x21
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800990e:	f7fc fc15 	bl	800613c <HAL_GetTick>
 8009912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	88fa      	ldrh	r2, [r7, #6]
 8009918:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	88fa      	ldrh	r2, [r7, #6]
 800991e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009928:	d108      	bne.n	800993c <HAL_UART_Transmit+0x6c>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	61bb      	str	r3, [r7, #24]
 800993a:	e003      	b.n	8009944 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009940:	2300      	movs	r3, #0
 8009942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009944:	e02e      	b.n	80099a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2200      	movs	r2, #0
 800994e:	2180      	movs	r1, #128	@ 0x80
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fc40 	bl	800a1d6 <UART_WaitOnFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e03a      	b.n	80099de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10b      	bne.n	8009986 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800997c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	3302      	adds	r3, #2
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	e007      	b.n	8009996 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	3301      	adds	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b01      	subs	r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1cb      	bne.n	8009946 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2140      	movs	r1, #64	@ 0x40
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fc0c 	bl	800a1d6 <UART_WaitOnFlagUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e006      	b.n	80099de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	e000      	b.n	80099de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80099dc:	2302      	movs	r3, #2
  }
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d112      	bne.n	8009a26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <HAL_UART_Receive_IT+0x26>
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e00b      	b.n	8009a28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fc33 	bl	800a288 <UART_Start_Receive_IT>
 8009a22:	4603      	mov	r3, r0
 8009a24:	e000      	b.n	8009a28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009a26:	2302      	movs	r3, #2
  }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d112      	bne.n	8009a70 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <HAL_UART_Receive_DMA+0x26>
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e00b      	b.n	8009a72 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	461a      	mov	r2, r3
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fc48 	bl	800a2fc <UART_Start_Receive_DMA>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	e000      	b.n	8009a72 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009a70:	2302      	movs	r3, #2
  }
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b0ba      	sub	sp, #232	@ 0xe8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab2:	f003 030f 	and.w	r3, r3, #15
 8009ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10f      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x66>
 8009ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fdac 	bl	800a638 <UART_Receive_IT>
      return;
 8009ae0:	e25b      	b.n	8009f9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80de 	beq.w	8009ca8 <HAL_UART_IRQHandler+0x22c>
 8009aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009afc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80d1 	beq.w	8009ca8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <HAL_UART_IRQHandler+0xae>
 8009b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d005      	beq.n	8009b2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	f043 0201 	orr.w	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <HAL_UART_IRQHandler+0xd2>
 8009b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b46:	f043 0202 	orr.w	r2, r3, #2
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00b      	beq.n	8009b72 <HAL_UART_IRQHandler+0xf6>
 8009b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6a:	f043 0204 	orr.w	r2, r3, #4
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d011      	beq.n	8009ba2 <HAL_UART_IRQHandler+0x126>
 8009b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9a:	f043 0208 	orr.w	r2, r3, #8
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 81f2 	beq.w	8009f90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb0:	f003 0320 	and.w	r3, r3, #32
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d008      	beq.n	8009bca <HAL_UART_IRQHandler+0x14e>
 8009bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fd37 	bl	800a638 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	bf14      	ite	ne
 8009bd8:	2301      	movne	r3, #1
 8009bda:	2300      	moveq	r3, #0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be6:	f003 0308 	and.w	r3, r3, #8
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <HAL_UART_IRQHandler+0x17a>
 8009bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d04f      	beq.n	8009c96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc41 	bl	800a47e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d041      	beq.n	8009c8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3314      	adds	r3, #20
 8009c32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1d9      	bne.n	8009c0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d013      	beq.n	8009c86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c62:	4a7e      	ldr	r2, [pc, #504]	@ (8009e5c <HAL_UART_IRQHandler+0x3e0>)
 8009c64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fc fd26 	bl	80066bc <HAL_DMA_Abort_IT>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	e00e      	b.n	8009ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fc f922 	bl	8005ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8c:	e00a      	b.n	8009ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fc f91e 	bl	8005ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c94:	e006      	b.n	8009ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fc f91a 	bl	8005ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009ca2:	e175      	b.n	8009f90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca4:	bf00      	nop
    return;
 8009ca6:	e173      	b.n	8009f90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	f040 814f 	bne.w	8009f50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb6:	f003 0310 	and.w	r3, r3, #16
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 8148 	beq.w	8009f50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 8141 	beq.w	8009f50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60bb      	str	r3, [r7, #8]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60bb      	str	r3, [r7, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 80b6 	beq.w	8009e60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 8145 	beq.w	8009f94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f080 813e 	bcs.w	8009f94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	f000 8088 	beq.w	8009e3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	330c      	adds	r3, #12
 8009d54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009d58:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d68:	e841 2300 	strex	r3, r2, [r1]
 8009d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1d9      	bne.n	8009d2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3314      	adds	r3, #20
 8009d7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3314      	adds	r3, #20
 8009d98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009da4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e1      	bne.n	8009d78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3314      	adds	r3, #20
 8009dba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3314      	adds	r3, #20
 8009dd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009dd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009dda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009dde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e3      	bne.n	8009db4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	330c      	adds	r3, #12
 8009e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e0c:	f023 0310 	bic.w	r3, r3, #16
 8009e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009e1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e3      	bne.n	8009dfa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fc fc04 	bl	8006644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f8b6 	bl	8009fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e58:	e09c      	b.n	8009f94 <HAL_UART_IRQHandler+0x518>
 8009e5a:	bf00      	nop
 8009e5c:	0800a543 	.word	0x0800a543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 808e 	beq.w	8009f98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 8089 	beq.w	8009f98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	330c      	adds	r3, #12
 8009ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009eaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009eac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e3      	bne.n	8009e86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f023 0301 	bic.w	r3, r3, #1
 8009ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3314      	adds	r3, #20
 8009ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009ee2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e3      	bne.n	8009ebe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	330c      	adds	r3, #12
 8009f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	330c      	adds	r3, #12
 8009f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009f28:	61fa      	str	r2, [r7, #28]
 8009f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	617b      	str	r3, [r7, #20]
   return(result);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e3      	bne.n	8009f04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f83b 	bl	8009fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f4e:	e023      	b.n	8009f98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d009      	beq.n	8009f70 <HAL_UART_IRQHandler+0x4f4>
 8009f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fafe 	bl	800a56a <UART_Transmit_IT>
    return;
 8009f6e:	e014      	b.n	8009f9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <HAL_UART_IRQHandler+0x51e>
 8009f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d008      	beq.n	8009f9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fb3d 	bl	800a608 <UART_EndTransmit_IT>
    return;
 8009f8e:	e004      	b.n	8009f9a <HAL_UART_IRQHandler+0x51e>
    return;
 8009f90:	bf00      	nop
 8009f92:	e002      	b.n	8009f9a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f98:	bf00      	nop
  }
}
 8009f9a:	37e8      	adds	r7, #232	@ 0xe8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc80      	pop	{r7}
 8009fb0:	4770      	bx	lr

08009fb2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009fba:	bf00      	nop
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr

08009fda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b09c      	sub	sp, #112	@ 0x70
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d172      	bne.n	800a0dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a00c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a00e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a012:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a01c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a01e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3314      	adds	r3, #20
 800a036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	667b      	str	r3, [r7, #100]	@ 0x64
 800a048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3314      	adds	r3, #20
 800a04e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a050:	647a      	str	r2, [r7, #68]	@ 0x44
 800a052:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3314      	adds	r3, #20
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	623b      	str	r3, [r7, #32]
   return(result);
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a07a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a07c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a084:	633a      	str	r2, [r7, #48]	@ 0x30
 800a086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e5      	bne.n	800a064 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a09a:	2220      	movs	r2, #32
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d119      	bne.n	800a0dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0310 	bic.w	r3, r3, #16
 800a0be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0c8:	61fa      	str	r2, [r7, #28]
 800a0ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	69b9      	ldr	r1, [r7, #24]
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e5      	bne.n	800a0a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0de:	2200      	movs	r2, #0
 800a0e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d106      	bne.n	800a0f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0f2:	f7ff ff67 	bl	8009fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0f6:	e002      	b.n	800a0fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a0f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0fa:	f7fb fef3 	bl	8005ee4 <HAL_UART_RxCpltCallback>
}
 800a0fe:	bf00      	nop
 800a100:	3770      	adds	r7, #112	@ 0x70
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a112:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d108      	bne.n	800a134 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a126:	085b      	lsrs	r3, r3, #1
 800a128:	b29b      	uxth	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff ff49 	bl	8009fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a132:	e002      	b.n	800a13a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff ff3c 	bl	8009fb2 <HAL_UART_RxHalfCpltCallback>
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a152:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bf14      	ite	ne
 800a162:	2301      	movne	r3, #1
 800a164:	2300      	moveq	r3, #0
 800a166:	b2db      	uxtb	r3, r3
 800a168:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b21      	cmp	r3, #33	@ 0x21
 800a174:	d108      	bne.n	800a188 <UART_DMAError+0x46>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f000 f954 	bl	800a430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	bf14      	ite	ne
 800a196:	2301      	movne	r3, #1
 800a198:	2300      	moveq	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b22      	cmp	r3, #34	@ 0x22
 800a1a8:	d108      	bne.n	800a1bc <UART_DMAError+0x7a>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a1b6:	68b8      	ldr	r0, [r7, #8]
 800a1b8:	f000 f961 	bl	800a47e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c0:	f043 0210 	orr.w	r2, r3, #16
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1c8:	68b8      	ldr	r0, [r7, #8]
 800a1ca:	f7fb fe81 	bl	8005ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	603b      	str	r3, [r7, #0]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e6:	e03b      	b.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ee:	d037      	beq.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f0:	f7fb ffa4 	bl	800613c <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	6a3a      	ldr	r2, [r7, #32]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d302      	bcc.n	800a206 <UART_WaitOnFlagUntilTimeout+0x30>
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e03a      	b.n	800a280 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	d023      	beq.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b80      	cmp	r3, #128	@ 0x80
 800a21c:	d020      	beq.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b40      	cmp	r3, #64	@ 0x40
 800a222:	d01d      	beq.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	2b08      	cmp	r3, #8
 800a230:	d116      	bne.n	800a260 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f918 	bl	800a47e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2208      	movs	r2, #8
 800a252:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e00f      	b.n	800a280 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	4013      	ands	r3, r2
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	bf0c      	ite	eq
 800a270:	2301      	moveq	r3, #1
 800a272:	2300      	movne	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	461a      	mov	r2, r3
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d0b4      	beq.n	800a1e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	88fa      	ldrh	r2, [r7, #6]
 800a2a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2222      	movs	r2, #34	@ 0x22
 800a2b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	695a      	ldr	r2, [r3, #20]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0201 	orr.w	r2, r2, #1
 800a2dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f042 0220 	orr.w	r2, r2, #32
 800a2ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr
	...

0800a2fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b098      	sub	sp, #96	@ 0x60
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	88fa      	ldrh	r2, [r7, #6]
 800a314:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2222      	movs	r2, #34	@ 0x22
 800a320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a328:	4a3e      	ldr	r2, [pc, #248]	@ (800a424 <UART_Start_Receive_DMA+0x128>)
 800a32a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a330:	4a3d      	ldr	r2, [pc, #244]	@ (800a428 <UART_Start_Receive_DMA+0x12c>)
 800a332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a338:	4a3c      	ldr	r2, [pc, #240]	@ (800a42c <UART_Start_Receive_DMA+0x130>)
 800a33a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a340:	2200      	movs	r2, #0
 800a342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a344:	f107 0308 	add.w	r3, r7, #8
 800a348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3304      	adds	r3, #4
 800a354:	4619      	mov	r1, r3
 800a356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	f7fc f912 	bl	8006584 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a360:	2300      	movs	r3, #0
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d019      	beq.n	800a3b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	330c      	adds	r3, #12
 800a384:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a394:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	330c      	adds	r3, #12
 800a39c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a39e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a3a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3a6:	e841 2300 	strex	r3, r2, [r1]
 800a3aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e5      	bne.n	800a37e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3314      	adds	r3, #20
 800a3b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a3d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e5      	bne.n	800a3b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a406:	627a      	str	r2, [r7, #36]	@ 0x24
 800a408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6a39      	ldr	r1, [r7, #32]
 800a40c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	61fb      	str	r3, [r7, #28]
   return(result);
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3760      	adds	r7, #96	@ 0x60
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	08009fdb 	.word	0x08009fdb
 800a428:	0800a107 	.word	0x0800a107
 800a42c:	0800a143 	.word	0x0800a143

0800a430 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a430:	b480      	push	{r7}
 800a432:	b089      	sub	sp, #36	@ 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	60bb      	str	r3, [r7, #8]
   return(result);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a44e:	61fb      	str	r3, [r7, #28]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	330c      	adds	r3, #12
 800a456:	69fa      	ldr	r2, [r7, #28]
 800a458:	61ba      	str	r2, [r7, #24]
 800a45a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6979      	ldr	r1, [r7, #20]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e5      	bne.n	800a438 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2220      	movs	r2, #32
 800a470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a474:	bf00      	nop
 800a476:	3724      	adds	r7, #36	@ 0x24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a47e:	b480      	push	{r7}
 800a480:	b095      	sub	sp, #84	@ 0x54
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	330c      	adds	r3, #12
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	330c      	adds	r3, #12
 800a4a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4a6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e5      	bne.n	800a486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
 800a4d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d119      	bne.n	800a52a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	60bb      	str	r3, [r7, #8]
   return(result);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f023 0310 	bic.w	r3, r3, #16
 800a50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a516:	61ba      	str	r2, [r7, #24]
 800a518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6979      	ldr	r1, [r7, #20]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	613b      	str	r3, [r7, #16]
   return(result);
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e5      	bne.n	800a4f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a538:	bf00      	nop
 800a53a:	3754      	adds	r7, #84	@ 0x54
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bc80      	pop	{r7}
 800a540:	4770      	bx	lr

0800a542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7fb fcb7 	bl	8005ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b21      	cmp	r3, #33	@ 0x21
 800a57c:	d13e      	bne.n	800a5fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a586:	d114      	bne.n	800a5b2 <UART_Transmit_IT+0x48>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d110      	bne.n	800a5b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	1c9a      	adds	r2, r3, #2
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	621a      	str	r2, [r3, #32]
 800a5b0:	e008      	b.n	800a5c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	1c59      	adds	r1, r3, #1
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6211      	str	r1, [r2, #32]
 800a5bc:	781a      	ldrb	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10f      	bne.n	800a5f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e000      	b.n	800a5fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5fc:	2302      	movs	r3, #2
  }
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	bc80      	pop	{r7}
 800a606:	4770      	bx	lr

0800a608 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a61e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2220      	movs	r2, #32
 800a624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff fcb9 	bl	8009fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08c      	sub	sp, #48	@ 0x30
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b22      	cmp	r3, #34	@ 0x22
 800a64a:	f040 80ae 	bne.w	800a7aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a656:	d117      	bne.n	800a688 <UART_Receive_IT+0x50>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d113      	bne.n	800a688 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	b29b      	uxth	r3, r3
 800a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a676:	b29a      	uxth	r2, r3
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a680:	1c9a      	adds	r2, r3, #2
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	629a      	str	r2, [r3, #40]	@ 0x28
 800a686:	e026      	b.n	800a6d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a69a:	d007      	beq.n	800a6ac <UART_Receive_IT+0x74>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <UART_Receive_IT+0x82>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d106      	bne.n	800a6ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	701a      	strb	r2, [r3, #0]
 800a6b8:	e008      	b.n	800a6cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d15d      	bne.n	800a7a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0220 	bic.w	r2, r2, #32
 800a6f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68da      	ldr	r2, [r3, #12]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695a      	ldr	r2, [r3, #20]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0201 	bic.w	r2, r2, #1
 800a718:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d135      	bne.n	800a79c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	330c      	adds	r3, #12
 800a73c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	613b      	str	r3, [r7, #16]
   return(result);
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f023 0310 	bic.w	r3, r3, #16
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	330c      	adds	r3, #12
 800a754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a756:	623a      	str	r2, [r7, #32]
 800a758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	69f9      	ldr	r1, [r7, #28]
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	61bb      	str	r3, [r7, #24]
   return(result);
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e5      	bne.n	800a736 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0310 	and.w	r3, r3, #16
 800a774:	2b10      	cmp	r3, #16
 800a776:	d10a      	bne.n	800a78e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fc15 	bl	8009fc4 <HAL_UARTEx_RxEventCallback>
 800a79a:	e002      	b.n	800a7a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7fb fba1 	bl	8005ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e002      	b.n	800a7ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e000      	b.n	800a7ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a7aa:	2302      	movs	r3, #2
  }
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3730      	adds	r7, #48	@ 0x30
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a7ee:	f023 030c 	bic.w	r3, r3, #12
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	6812      	ldr	r2, [r2, #0]
 800a7f6:	68b9      	ldr	r1, [r7, #8]
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a2c      	ldr	r2, [pc, #176]	@ (800a8c8 <UART_SetConfig+0x114>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d103      	bne.n	800a824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a81c:	f7fe fcf8 	bl	8009210 <HAL_RCC_GetPCLK2Freq>
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	e002      	b.n	800a82a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a824:	f7fe fce0 	bl	80091e8 <HAL_RCC_GetPCLK1Freq>
 800a828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009a      	lsls	r2, r3, #2
 800a834:	441a      	add	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a840:	4a22      	ldr	r2, [pc, #136]	@ (800a8cc <UART_SetConfig+0x118>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	095b      	lsrs	r3, r3, #5
 800a848:	0119      	lsls	r1, r3, #4
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009a      	lsls	r2, r3, #2
 800a854:	441a      	add	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a860:	4b1a      	ldr	r3, [pc, #104]	@ (800a8cc <UART_SetConfig+0x118>)
 800a862:	fba3 0302 	umull	r0, r3, r3, r2
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	2064      	movs	r0, #100	@ 0x64
 800a86a:	fb00 f303 	mul.w	r3, r0, r3
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	3332      	adds	r3, #50	@ 0x32
 800a874:	4a15      	ldr	r2, [pc, #84]	@ (800a8cc <UART_SetConfig+0x118>)
 800a876:	fba2 2303 	umull	r2, r3, r2, r3
 800a87a:	095b      	lsrs	r3, r3, #5
 800a87c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a880:	4419      	add	r1, r3
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009a      	lsls	r2, r3, #2
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	fbb2 f2f3 	udiv	r2, r2, r3
 800a898:	4b0c      	ldr	r3, [pc, #48]	@ (800a8cc <UART_SetConfig+0x118>)
 800a89a:	fba3 0302 	umull	r0, r3, r3, r2
 800a89e:	095b      	lsrs	r3, r3, #5
 800a8a0:	2064      	movs	r0, #100	@ 0x64
 800a8a2:	fb00 f303 	mul.w	r3, r0, r3
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	3332      	adds	r3, #50	@ 0x32
 800a8ac:	4a07      	ldr	r2, [pc, #28]	@ (800a8cc <UART_SetConfig+0x118>)
 800a8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b2:	095b      	lsrs	r3, r3, #5
 800a8b4:	f003 020f 	and.w	r2, r3, #15
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	440a      	add	r2, r1
 800a8be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40013800 	.word	0x40013800
 800a8cc:	51eb851f 	.word	0x51eb851f

0800a8d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b09d      	sub	sp, #116	@ 0x74
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a8f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	78db      	ldrb	r3, [r3, #3]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d81f      	bhi.n	800a942 <USB_ActivateEndpoint+0x72>
 800a902:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <USB_ActivateEndpoint+0x38>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a935 	.word	0x0800a935
 800a910:	0800a94b 	.word	0x0800a94b
 800a914:	0800a927 	.word	0x0800a927
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a918:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a91c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a920:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a924:	e012      	b.n	800a94c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a926:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a92a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a92e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a932:	e00b      	b.n	800a94c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a934:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a938:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a93c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a940:	e004      	b.n	800a94c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a948:	e000      	b.n	800a94c <USB_ActivateEndpoint+0x7c>
      break;
 800a94a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	441a      	add	r2, r3
 800a956:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a95a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a95e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a984:	b29b      	uxth	r3, r3
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	7812      	ldrb	r2, [r2, #0]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	441a      	add	r2, r3
 800a99a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a99e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	7b1b      	ldrb	r3, [r3, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f040 8178 	bne.w	800acac <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 8084 	beq.w	800aace <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	61bb      	str	r3, [r7, #24]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	011a      	lsls	r2, r3, #4
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	88db      	ldrh	r3, [r3, #6]
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	827b      	strh	r3, [r7, #18]
 800aa08:	8a7b      	ldrh	r3, [r7, #18]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d01b      	beq.n	800aa4a <USB_ActivateEndpoint+0x17a>
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa28:	823b      	strh	r3, [r7, #16]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	441a      	add	r2, r3
 800aa34:	8a3b      	ldrh	r3, [r7, #16]
 800aa36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	78db      	ldrb	r3, [r3, #3]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d020      	beq.n	800aa94 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa68:	81bb      	strh	r3, [r7, #12]
 800aa6a:	89bb      	ldrh	r3, [r7, #12]
 800aa6c:	f083 0320 	eor.w	r3, r3, #32
 800aa70:	81bb      	strh	r3, [r7, #12]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	441a      	add	r2, r3
 800aa7c:	89bb      	ldrh	r3, [r7, #12]
 800aa7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	8013      	strh	r3, [r2, #0]
 800aa92:	e2d5      	b.n	800b040 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaaa:	81fb      	strh	r3, [r7, #14]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	441a      	add	r2, r3
 800aab6:	89fb      	ldrh	r3, [r7, #14]
 800aab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aabc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8013      	strh	r3, [r2, #0]
 800aacc:	e2b8      	b.n	800b040 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aad8:	b29b      	uxth	r3, r3
 800aada:	461a      	mov	r2, r3
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	4413      	add	r3, r2
 800aae0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	011a      	lsls	r2, r3, #4
 800aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	88db      	ldrh	r3, [r3, #6]
 800aaf6:	085b      	lsrs	r3, r3, #1
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab00:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	4413      	add	r3, r2
 800ab14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	011a      	lsls	r2, r3, #4
 800ab1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1e:	4413      	add	r3, r2
 800ab20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	801a      	strh	r2, [r3, #0]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab3c:	d91d      	bls.n	800ab7a <USB_ActivateEndpoint+0x2aa>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	095b      	lsrs	r3, r3, #5
 800ab44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f003 031f 	and.w	r3, r3, #31
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d102      	bne.n	800ab58 <USB_ActivateEndpoint+0x288>
 800ab52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab54:	3b01      	subs	r3, #1
 800ab56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	029b      	lsls	r3, r3, #10
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	801a      	strh	r2, [r3, #0]
 800ab78:	e026      	b.n	800abc8 <USB_ActivateEndpoint+0x2f8>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10a      	bne.n	800ab98 <USB_ActivateEndpoint+0x2c8>
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e017      	b.n	800abc8 <USB_ActivateEndpoint+0x2f8>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	085b      	lsrs	r3, r3, #1
 800ab9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <USB_ActivateEndpoint+0x2e2>
 800abac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abae:	3301      	adds	r3, #1
 800abb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abba:	b29b      	uxth	r3, r3
 800abbc:	029b      	lsls	r3, r3, #10
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4313      	orrs	r3, r2
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800abd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800abd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01b      	beq.n	800ac18 <USB_ActivateEndpoint+0x348>
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	b29b      	uxth	r3, r3
 800abee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf6:	843b      	strh	r3, [r7, #32]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	441a      	add	r2, r3
 800ac02:	8c3b      	ldrh	r3, [r7, #32]
 800ac04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d124      	bne.n	800ac6a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac36:	83bb      	strh	r3, [r7, #28]
 800ac38:	8bbb      	ldrh	r3, [r7, #28]
 800ac3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac3e:	83bb      	strh	r3, [r7, #28]
 800ac40:	8bbb      	ldrh	r3, [r7, #28]
 800ac42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac46:	83bb      	strh	r3, [r7, #28]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	441a      	add	r2, r3
 800ac52:	8bbb      	ldrh	r3, [r7, #28]
 800ac54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	8013      	strh	r3, [r2, #0]
 800ac68:	e1ea      	b.n	800b040 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac80:	83fb      	strh	r3, [r7, #30]
 800ac82:	8bfb      	ldrh	r3, [r7, #30]
 800ac84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac88:	83fb      	strh	r3, [r7, #30]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	441a      	add	r2, r3
 800ac94:	8bfb      	ldrh	r3, [r7, #30]
 800ac96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	8013      	strh	r3, [r2, #0]
 800acaa:	e1c9      	b.n	800b040 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	78db      	ldrb	r3, [r3, #3]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d11e      	bne.n	800acf2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	441a      	add	r2, r3
 800acd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800acdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ace0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ace4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ace8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acec:	b29b      	uxth	r3, r3
 800acee:	8013      	strh	r3, [r2, #0]
 800acf0:	e01d      	b.n	800ad2e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ad04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad08:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	441a      	add	r2, r3
 800ad16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ad1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad3e:	4413      	add	r3, r2
 800ad40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	011a      	lsls	r2, r3, #4
 800ad48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad50:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	891b      	ldrh	r3, [r3, #8]
 800ad56:	085b      	lsrs	r3, r3, #1
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad60:	801a      	strh	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad72:	4413      	add	r3, r2
 800ad74:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	011a      	lsls	r2, r3, #4
 800ad7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800ad84:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	895b      	ldrh	r3, [r3, #10]
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad94:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	785b      	ldrb	r3, [r3, #1]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f040 8093 	bne.w	800aec6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800adb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800adb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01b      	beq.n	800adf4 <USB_ActivateEndpoint+0x524>
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	b29b      	uxth	r3, r3
 800adca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	441a      	add	r2, r3
 800adde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ade0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ade4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ade8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800adec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ae02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01b      	beq.n	800ae44 <USB_ActivateEndpoint+0x574>
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	881b      	ldrh	r3, [r3, #0]
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae22:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	441a      	add	r2, r3
 800ae2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ae5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ae5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae62:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ae64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ae66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	441a      	add	r2, r3
 800ae76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ae78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	441a      	add	r2, r3
 800aeae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	8013      	strh	r3, [r2, #0]
 800aec4:	e0bc      	b.n	800b040 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800aed6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800aeda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d01d      	beq.n	800af1e <USB_ActivateEndpoint+0x64e>
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	441a      	add	r2, r3
 800af06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800af0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800af2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800af32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	d01d      	beq.n	800af76 <USB_ActivateEndpoint+0x6a6>
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	441a      	add	r2, r3
 800af5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800af62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af72:	b29b      	uxth	r3, r3
 800af74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d024      	beq.n	800afc8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800af98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800af9c:	f083 0320 	eor.w	r3, r3, #32
 800afa0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800afb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	8013      	strh	r3, [r2, #0]
 800afc6:	e01d      	b.n	800b004 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	441a      	add	r2, r3
 800afec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800affc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b000:	b29b      	uxth	r3, r3
 800b002:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b01a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	441a      	add	r2, r3
 800b028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b02c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b040:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b044:	4618      	mov	r0, r3
 800b046:	3774      	adds	r7, #116	@ 0x74
 800b048:	46bd      	mov	sp, r7
 800b04a:	bc80      	pop	{r7}
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop

0800b050 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b0c2      	sub	sp, #264	@ 0x108
 800b054:	af00      	add	r7, sp, #0
 800b056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b05a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b05e:	6018      	str	r0, [r3, #0]
 800b060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b068:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b06e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	785b      	ldrb	r3, [r3, #1]
 800b076:	2b01      	cmp	r3, #1
 800b078:	f040 86b7 	bne.w	800bdea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	699a      	ldr	r2, [r3, #24]
 800b088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	429a      	cmp	r2, r3
 800b096:	d908      	bls.n	800b0aa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b0a8:	e007      	b.n	800b0ba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	7b1b      	ldrb	r3, [r3, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d13a      	bne.n	800b140 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6959      	ldr	r1, [r3, #20]
 800b0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	88da      	ldrh	r2, [r3, #6]
 800b0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b0ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b0f0:	6800      	ldr	r0, [r0, #0]
 800b0f2:	f001 fc88 	bl	800ca06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b110:	b29b      	uxth	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4413      	add	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
 800b11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	011a      	lsls	r2, r3, #4
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	4413      	add	r3, r2
 800b12c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b130:	60fb      	str	r3, [r7, #12]
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	801a      	strh	r2, [r3, #0]
 800b13c:	f000 be1f 	b.w	800bd7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	78db      	ldrb	r3, [r3, #3]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	f040 8462 	bne.w	800ba16 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6a1a      	ldr	r2, [r3, #32]
 800b15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	f240 83df 	bls.w	800b92e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b196:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b19e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	441a      	add	r2, r3
 800b1b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b1b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1c0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b1c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6a1a      	ldr	r2, [r3, #32]
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1dc:	1ad2      	subs	r2, r2, r3
 800b1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	b29b      	uxth	r3, r3
 800b208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 81c7 	beq.w	800b5a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d177      	bne.n	800b31e <USB_EPStartXfer+0x2ce>
 800b22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b23a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b248:	b29b      	uxth	r3, r3
 800b24a:	461a      	mov	r2, r3
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	4413      	add	r3, r2
 800b250:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	011a      	lsls	r2, r3, #4
 800b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b262:	4413      	add	r3, r2
 800b264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b274:	b29a      	uxth	r2, r3
 800b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b278:	801a      	strh	r2, [r3, #0]
 800b27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b27e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b280:	d921      	bls.n	800b2c6 <USB_EPStartXfer+0x276>
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b286:	095b      	lsrs	r3, r3, #5
 800b288:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b290:	f003 031f 	and.w	r3, r3, #31
 800b294:	2b00      	cmp	r3, #0
 800b296:	d104      	bne.n	800b2a2 <USB_EPStartXfer+0x252>
 800b298:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b29c:	3b01      	subs	r3, #1
 800b29e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	029b      	lsls	r3, r3, #10
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c2:	801a      	strh	r2, [r3, #0]
 800b2c4:	e050      	b.n	800b368 <USB_EPStartXfer+0x318>
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <USB_EPStartXfer+0x294>
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	e041      	b.n	800b368 <USB_EPStartXfer+0x318>
 800b2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e8:	085b      	lsrs	r3, r3, #1
 800b2ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d004      	beq.n	800b304 <USB_EPStartXfer+0x2b4>
 800b2fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2fe:	3301      	adds	r3, #1
 800b300:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29a      	uxth	r2, r3
 800b30a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b30e:	b29b      	uxth	r3, r3
 800b310:	029b      	lsls	r3, r3, #10
 800b312:	b29b      	uxth	r3, r3
 800b314:	4313      	orrs	r3, r2
 800b316:	b29a      	uxth	r2, r3
 800b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31a:	801a      	strh	r2, [r3, #0]
 800b31c:	e024      	b.n	800b368 <USB_EPStartXfer+0x318>
 800b31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d11c      	bne.n	800b368 <USB_EPStartXfer+0x318>
 800b32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	4413      	add	r3, r2
 800b344:	633b      	str	r3, [r7, #48]	@ 0x30
 800b346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	011a      	lsls	r2, r3, #4
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	4413      	add	r3, r2
 800b358:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b362:	b29a      	uxth	r2, r3
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b36c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	895b      	ldrh	r3, [r3, #10]
 800b374:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6959      	ldr	r1, [r3, #20]
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b38e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b392:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	f001 fb35 	bl	800ca06 <USB_WritePMA>
            ep->xfer_buff += len;
 800b39c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	695a      	ldr	r2, [r3, #20]
 800b3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ac:	441a      	add	r2, r3
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6a1a      	ldr	r2, [r3, #32]
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d90f      	bls.n	800b3f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6a1a      	ldr	r2, [r3, #32]
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e6:	1ad2      	subs	r2, r2, r3
 800b3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	621a      	str	r2, [r3, #32]
 800b3f4:	e00e      	b.n	800b414 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2200      	movs	r2, #0
 800b412:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d177      	bne.n	800b514 <USB_EPStartXfer+0x4c4>
 800b424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	61bb      	str	r3, [r7, #24]
 800b430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b43e:	b29b      	uxth	r3, r3
 800b440:	461a      	mov	r2, r3
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	4413      	add	r3, r2
 800b446:	61bb      	str	r3, [r7, #24]
 800b448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	011a      	lsls	r2, r3, #4
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	4413      	add	r3, r2
 800b45a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	801a      	strh	r2, [r3, #0]
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b474:	2b3e      	cmp	r3, #62	@ 0x3e
 800b476:	d921      	bls.n	800b4bc <USB_EPStartXfer+0x46c>
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b47c:	095b      	lsrs	r3, r3, #5
 800b47e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b486:	f003 031f 	and.w	r3, r3, #31
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <USB_EPStartXfer+0x448>
 800b48e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b492:	3b01      	subs	r3, #1
 800b494:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	029b      	lsls	r3, r3, #10
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	801a      	strh	r2, [r3, #0]
 800b4ba:	e056      	b.n	800b56a <USB_EPStartXfer+0x51a>
 800b4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <USB_EPStartXfer+0x48a>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	801a      	strh	r2, [r3, #0]
 800b4d8:	e047      	b.n	800b56a <USB_EPStartXfer+0x51a>
 800b4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <USB_EPStartXfer+0x4aa>
 800b4f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b504:	b29b      	uxth	r3, r3
 800b506:	029b      	lsls	r3, r3, #10
 800b508:	b29b      	uxth	r3, r3
 800b50a:	4313      	orrs	r3, r2
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	e02a      	b.n	800b56a <USB_EPStartXfer+0x51a>
 800b514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d122      	bne.n	800b56a <USB_EPStartXfer+0x51a>
 800b524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	623b      	str	r3, [r7, #32]
 800b530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b53e:	b29b      	uxth	r3, r3
 800b540:	461a      	mov	r2, r3
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	4413      	add	r3, r2
 800b546:	623b      	str	r3, [r7, #32]
 800b548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b54c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	011a      	lsls	r2, r3, #4
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	4413      	add	r3, r2
 800b55a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b564:	b29a      	uxth	r2, r3
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b56e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	891b      	ldrh	r3, [r3, #8]
 800b576:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6959      	ldr	r1, [r3, #20]
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b590:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b594:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b598:	6800      	ldr	r0, [r0, #0]
 800b59a:	f001 fa34 	bl	800ca06 <USB_WritePMA>
 800b59e:	e3ee      	b.n	800bd7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d177      	bne.n	800b6a0 <USB_EPStartXfer+0x650>
 800b5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5d0:	4413      	add	r3, r2
 800b5d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	011a      	lsls	r2, r3, #4
 800b5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b600:	2b3e      	cmp	r3, #62	@ 0x3e
 800b602:	d921      	bls.n	800b648 <USB_EPStartXfer+0x5f8>
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b608:	095b      	lsrs	r3, r3, #5
 800b60a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b612:	f003 031f 	and.w	r3, r3, #31
 800b616:	2b00      	cmp	r3, #0
 800b618:	d104      	bne.n	800b624 <USB_EPStartXfer+0x5d4>
 800b61a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b61e:	3b01      	subs	r3, #1
 800b620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	b29a      	uxth	r2, r3
 800b62a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b62e:	b29b      	uxth	r3, r3
 800b630:	029b      	lsls	r3, r3, #10
 800b632:	b29b      	uxth	r3, r3
 800b634:	4313      	orrs	r3, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b640:	b29a      	uxth	r2, r3
 800b642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b644:	801a      	strh	r2, [r3, #0]
 800b646:	e056      	b.n	800b6f6 <USB_EPStartXfer+0x6a6>
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <USB_EPStartXfer+0x616>
 800b650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	b29b      	uxth	r3, r3
 800b656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b65e:	b29a      	uxth	r2, r3
 800b660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b662:	801a      	strh	r2, [r3, #0]
 800b664:	e047      	b.n	800b6f6 <USB_EPStartXfer+0x6a6>
 800b666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b66a:	085b      	lsrs	r3, r3, #1
 800b66c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d004      	beq.n	800b686 <USB_EPStartXfer+0x636>
 800b67c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b680:	3301      	adds	r3, #1
 800b682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b690:	b29b      	uxth	r3, r3
 800b692:	029b      	lsls	r3, r3, #10
 800b694:	b29b      	uxth	r3, r3
 800b696:	4313      	orrs	r3, r2
 800b698:	b29a      	uxth	r2, r3
 800b69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b69c:	801a      	strh	r2, [r3, #0]
 800b69e:	e02a      	b.n	800b6f6 <USB_EPStartXfer+0x6a6>
 800b6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d122      	bne.n	800b6f6 <USB_EPStartXfer+0x6a6>
 800b6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6d0:	4413      	add	r3, r2
 800b6d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	011a      	lsls	r2, r3, #4
 800b6e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b6ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	891b      	ldrh	r3, [r3, #8]
 800b702:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6959      	ldr	r1, [r3, #20]
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b716:	b29b      	uxth	r3, r3
 800b718:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b71c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b720:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b724:	6800      	ldr	r0, [r0, #0]
 800b726:	f001 f96e 	bl	800ca06 <USB_WritePMA>
            ep->xfer_buff += len;
 800b72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	695a      	ldr	r2, [r3, #20]
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73a:	441a      	add	r2, r3
 800b73c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b74c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6a1a      	ldr	r2, [r3, #32]
 800b754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	429a      	cmp	r2, r3
 800b762:	d90f      	bls.n	800b784 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6a1a      	ldr	r2, [r3, #32]
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b774:	1ad2      	subs	r2, r2, r3
 800b776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b77a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	621a      	str	r2, [r3, #32]
 800b782:	e00e      	b.n	800b7a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d177      	bne.n	800b8ae <USB_EPStartXfer+0x85e>
 800b7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7de:	4413      	add	r3, r2
 800b7e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	011a      	lsls	r2, r3, #4
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b804:	b29a      	uxth	r2, r3
 800b806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b808:	801a      	strh	r2, [r3, #0]
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b810:	d921      	bls.n	800b856 <USB_EPStartXfer+0x806>
 800b812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b816:	095b      	lsrs	r3, r3, #5
 800b818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	2b00      	cmp	r3, #0
 800b826:	d104      	bne.n	800b832 <USB_EPStartXfer+0x7e2>
 800b828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b82c:	3b01      	subs	r3, #1
 800b82e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29a      	uxth	r2, r3
 800b838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	029b      	lsls	r3, r3, #10
 800b840:	b29b      	uxth	r3, r3
 800b842:	4313      	orrs	r3, r2
 800b844:	b29b      	uxth	r3, r3
 800b846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b84a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b84e:	b29a      	uxth	r2, r3
 800b850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	e050      	b.n	800b8f8 <USB_EPStartXfer+0x8a8>
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10a      	bne.n	800b874 <USB_EPStartXfer+0x824>
 800b85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	b29b      	uxth	r3, r3
 800b864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b870:	801a      	strh	r2, [r3, #0]
 800b872:	e041      	b.n	800b8f8 <USB_EPStartXfer+0x8a8>
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b878:	085b      	lsrs	r3, r3, #1
 800b87a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d004      	beq.n	800b894 <USB_EPStartXfer+0x844>
 800b88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b88e:	3301      	adds	r3, #1
 800b890:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	029b      	lsls	r3, r3, #10
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8aa:	801a      	strh	r2, [r3, #0]
 800b8ac:	e024      	b.n	800b8f8 <USB_EPStartXfer+0x8a8>
 800b8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	785b      	ldrb	r3, [r3, #1]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d11c      	bne.n	800b8f8 <USB_EPStartXfer+0x8a8>
 800b8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8d2:	4413      	add	r3, r2
 800b8d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	011a      	lsls	r2, r3, #4
 800b8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	895b      	ldrh	r3, [r3, #10]
 800b904:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6959      	ldr	r1, [r3, #20]
 800b914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b91e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b922:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b926:	6800      	ldr	r0, [r0, #0]
 800b928:	f001 f86d 	bl	800ca06 <USB_WritePMA>
 800b92c:	e227      	b.n	800bd7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	881b      	ldrh	r3, [r3, #0]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b964:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	441a      	add	r2, r3
 800b982:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b98a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b98e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b996:	b29b      	uxth	r3, r3
 800b998:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b99e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ba:	4413      	add	r3, r2
 800b9bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	011a      	lsls	r2, r3, #4
 800b9cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b9d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	891b      	ldrh	r3, [r3, #8]
 800b9ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6959      	ldr	r1, [r3, #20]
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba0e:	6800      	ldr	r0, [r0, #0]
 800ba10:	f000 fff9 	bl	800ca06 <USB_WritePMA>
 800ba14:	e1b3      	b.n	800bd7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ba16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6a1a      	ldr	r2, [r3, #32]
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 80c6 	beq.w	800bbe8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	785b      	ldrb	r3, [r3, #1]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d177      	bne.n	800bb68 <USB_EPStartXfer+0xb18>
 800ba78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba98:	4413      	add	r3, r2
 800ba9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	011a      	lsls	r2, r3, #4
 800baaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baac:	4413      	add	r3, r2
 800baae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bab2:	667b      	str	r3, [r7, #100]	@ 0x64
 800bab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800babe:	b29a      	uxth	r2, r3
 800bac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bac2:	801a      	strh	r2, [r3, #0]
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac8:	2b3e      	cmp	r3, #62	@ 0x3e
 800baca:	d921      	bls.n	800bb10 <USB_EPStartXfer+0xac0>
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad0:	095b      	lsrs	r3, r3, #5
 800bad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bada:	f003 031f 	and.w	r3, r3, #31
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d104      	bne.n	800baec <USB_EPStartXfer+0xa9c>
 800bae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800baec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	029b      	lsls	r3, r3, #10
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	4313      	orrs	r3, r2
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb0c:	801a      	strh	r2, [r3, #0]
 800bb0e:	e050      	b.n	800bbb2 <USB_EPStartXfer+0xb62>
 800bb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10a      	bne.n	800bb2e <USB_EPStartXfer+0xade>
 800bb18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb2a:	801a      	strh	r2, [r3, #0]
 800bb2c:	e041      	b.n	800bbb2 <USB_EPStartXfer+0xb62>
 800bb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb32:	085b      	lsrs	r3, r3, #1
 800bb34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d004      	beq.n	800bb4e <USB_EPStartXfer+0xafe>
 800bb44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb48:	3301      	adds	r3, #1
 800bb4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	029b      	lsls	r3, r3, #10
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb64:	801a      	strh	r2, [r3, #0]
 800bb66:	e024      	b.n	800bbb2 <USB_EPStartXfer+0xb62>
 800bb68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	785b      	ldrb	r3, [r3, #1]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d11c      	bne.n	800bbb2 <USB_EPStartXfer+0xb62>
 800bb78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb8c:	4413      	add	r3, r2
 800bb8e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	011a      	lsls	r2, r3, #4
 800bb9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bba0:	4413      	add	r3, r2
 800bba2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	895b      	ldrh	r3, [r3, #10]
 800bbbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6959      	ldr	r1, [r3, #20]
 800bbce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bbd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bbdc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	f000 ff10 	bl	800ca06 <USB_WritePMA>
 800bbe6:	e0ca      	b.n	800bd7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d177      	bne.n	800bce8 <USB_EPStartXfer+0xc98>
 800bbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	461a      	mov	r2, r3
 800bc16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc18:	4413      	add	r3, r2
 800bc1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	011a      	lsls	r2, r3, #4
 800bc2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bc32:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc42:	801a      	strh	r2, [r3, #0]
 800bc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc48:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc4a:	d921      	bls.n	800bc90 <USB_EPStartXfer+0xc40>
 800bc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc50:	095b      	lsrs	r3, r3, #5
 800bc52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc5a:	f003 031f 	and.w	r3, r3, #31
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d104      	bne.n	800bc6c <USB_EPStartXfer+0xc1c>
 800bc62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc66:	3b01      	subs	r3, #1
 800bc68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	029b      	lsls	r3, r3, #10
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc8c:	801a      	strh	r2, [r3, #0]
 800bc8e:	e05c      	b.n	800bd4a <USB_EPStartXfer+0xcfa>
 800bc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <USB_EPStartXfer+0xc5e>
 800bc98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcaa:	801a      	strh	r2, [r3, #0]
 800bcac:	e04d      	b.n	800bd4a <USB_EPStartXfer+0xcfa>
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bcb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <USB_EPStartXfer+0xc7e>
 800bcc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bcc8:	3301      	adds	r3, #1
 800bcca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bcce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	029b      	lsls	r3, r3, #10
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bce4:	801a      	strh	r2, [r3, #0]
 800bce6:	e030      	b.n	800bd4a <USB_EPStartXfer+0xcfa>
 800bce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d128      	bne.n	800bd4a <USB_EPStartXfer+0xcfa>
 800bcf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	461a      	mov	r2, r3
 800bd18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	011a      	lsls	r2, r3, #4
 800bd30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd34:	4413      	add	r3, r2
 800bd36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bd3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	891b      	ldrh	r3, [r3, #8]
 800bd56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6959      	ldr	r1, [r3, #20]
 800bd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd78:	6800      	ldr	r0, [r0, #0]
 800bd7a:	f000 fe44 	bl	800ca06 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bda0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bda4:	817b      	strh	r3, [r7, #10]
 800bda6:	897b      	ldrh	r3, [r7, #10]
 800bda8:	f083 0310 	eor.w	r3, r3, #16
 800bdac:	817b      	strh	r3, [r7, #10]
 800bdae:	897b      	ldrh	r3, [r7, #10]
 800bdb0:	f083 0320 	eor.w	r3, r3, #32
 800bdb4:	817b      	strh	r3, [r7, #10]
 800bdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	441a      	add	r2, r3
 800bdd0:	897b      	ldrh	r3, [r7, #10]
 800bdd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	8013      	strh	r3, [r2, #0]
 800bde6:	f000 bcde 	b.w	800c7a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bdea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	7b1b      	ldrb	r3, [r3, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f040 80bb 	bne.w	800bf72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bdfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	699a      	ldr	r2, [r3, #24]
 800be08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	429a      	cmp	r2, r3
 800be16:	d917      	bls.n	800be48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800be18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800be28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	699a      	ldr	r2, [r3, #24]
 800be34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be38:	1ad2      	subs	r2, r2, r3
 800be3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	619a      	str	r2, [r3, #24]
 800be46:	e00e      	b.n	800be66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800be48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800be58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2200      	movs	r2, #0
 800be64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be82:	b29b      	uxth	r3, r3
 800be84:	461a      	mov	r2, r3
 800be86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be8a:	4413      	add	r3, r2
 800be8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	011a      	lsls	r2, r3, #4
 800be9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bea2:	4413      	add	r3, r2
 800bea4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800beac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800beb8:	b29a      	uxth	r2, r3
 800beba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bec6:	d924      	bls.n	800bf12 <USB_EPStartXfer+0xec2>
 800bec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800becc:	095b      	lsrs	r3, r3, #5
 800bece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d104      	bne.n	800bee8 <USB_EPStartXfer+0xe98>
 800bede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bee2:	3b01      	subs	r3, #1
 800bee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	b29a      	uxth	r2, r3
 800bef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	029b      	lsls	r3, r3, #10
 800bef8:	b29b      	uxth	r3, r3
 800befa:	4313      	orrs	r3, r2
 800befc:	b29b      	uxth	r3, r3
 800befe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf0c:	801a      	strh	r2, [r3, #0]
 800bf0e:	f000 bc10 	b.w	800c732 <USB_EPStartXfer+0x16e2>
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10c      	bne.n	800bf34 <USB_EPStartXfer+0xee4>
 800bf1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf30:	801a      	strh	r2, [r3, #0]
 800bf32:	e3fe      	b.n	800c732 <USB_EPStartXfer+0x16e2>
 800bf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d004      	beq.n	800bf54 <USB_EPStartXfer+0xf04>
 800bf4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf4e:	3301      	adds	r3, #1
 800bf50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	029b      	lsls	r3, r3, #10
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	4313      	orrs	r3, r2
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf6e:	801a      	strh	r2, [r3, #0]
 800bf70:	e3df      	b.n	800c732 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bf72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	78db      	ldrb	r3, [r3, #3]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	f040 8218 	bne.w	800c3b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f040 809d 	bne.w	800c0d0 <USB_EPStartXfer+0x1080>
 800bf96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfba:	4413      	add	r3, r2
 800bfbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	011a      	lsls	r2, r3, #4
 800bfce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bfd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bfdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfee:	801a      	strh	r2, [r3, #0]
 800bff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bffe:	d92b      	bls.n	800c058 <USB_EPStartXfer+0x1008>
 800c000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	095b      	lsrs	r3, r3, #5
 800c00e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	f003 031f 	and.w	r3, r3, #31
 800c022:	2b00      	cmp	r3, #0
 800c024:	d104      	bne.n	800c030 <USB_EPStartXfer+0xfe0>
 800c026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c02a:	3b01      	subs	r3, #1
 800c02c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	b29a      	uxth	r2, r3
 800c038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	029b      	lsls	r3, r3, #10
 800c040:	b29b      	uxth	r3, r3
 800c042:	4313      	orrs	r3, r2
 800c044:	b29b      	uxth	r3, r3
 800c046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c04a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c04e:	b29a      	uxth	r2, r3
 800c050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c054:	801a      	strh	r2, [r3, #0]
 800c056:	e070      	b.n	800c13a <USB_EPStartXfer+0x10ea>
 800c058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c05c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10c      	bne.n	800c082 <USB_EPStartXfer+0x1032>
 800c068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c078:	b29a      	uxth	r2, r3
 800c07a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c07e:	801a      	strh	r2, [r3, #0]
 800c080:	e05b      	b.n	800c13a <USB_EPStartXfer+0x10ea>
 800c082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	085b      	lsrs	r3, r3, #1
 800c090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d004      	beq.n	800c0b2 <USB_EPStartXfer+0x1062>
 800c0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c0b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	029b      	lsls	r3, r3, #10
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0cc:	801a      	strh	r2, [r3, #0]
 800c0ce:	e034      	b.n	800c13a <USB_EPStartXfer+0x10ea>
 800c0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d12c      	bne.n	800c13a <USB_EPStartXfer+0x10ea>
 800c0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	461a      	mov	r2, r3
 800c100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c104:	4413      	add	r3, r2
 800c106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	011a      	lsls	r2, r3, #4
 800c118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c11c:	4413      	add	r3, r2
 800c11e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	b29a      	uxth	r2, r3
 800c134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c138:	801a      	strh	r2, [r3, #0]
 800c13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c14c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	785b      	ldrb	r3, [r3, #1]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f040 809d 	bne.w	800c294 <USB_EPStartXfer+0x1244>
 800c15a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c15e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c16c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c176:	b29b      	uxth	r3, r3
 800c178:	461a      	mov	r2, r3
 800c17a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c17e:	4413      	add	r3, r2
 800c180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	011a      	lsls	r2, r3, #4
 800c192:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c196:	4413      	add	r3, r2
 800c198:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c19c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1b2:	801a      	strh	r2, [r3, #0]
 800c1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1c2:	d92b      	bls.n	800c21c <USB_EPStartXfer+0x11cc>
 800c1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	095b      	lsrs	r3, r3, #5
 800c1d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	f003 031f 	and.w	r3, r3, #31
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <USB_EPStartXfer+0x11a4>
 800c1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c200:	b29b      	uxth	r3, r3
 800c202:	029b      	lsls	r3, r3, #10
 800c204:	b29b      	uxth	r3, r3
 800c206:	4313      	orrs	r3, r2
 800c208:	b29b      	uxth	r3, r3
 800c20a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c212:	b29a      	uxth	r2, r3
 800c214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	e069      	b.n	800c2f0 <USB_EPStartXfer+0x12a0>
 800c21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10c      	bne.n	800c246 <USB_EPStartXfer+0x11f6>
 800c22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	b29b      	uxth	r3, r3
 800c234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c242:	801a      	strh	r2, [r3, #0]
 800c244:	e054      	b.n	800c2f0 <USB_EPStartXfer+0x12a0>
 800c246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	085b      	lsrs	r3, r3, #1
 800c254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d004      	beq.n	800c276 <USB_EPStartXfer+0x1226>
 800c26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c270:	3301      	adds	r3, #1
 800c272:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c276:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c282:	b29b      	uxth	r3, r3
 800c284:	029b      	lsls	r3, r3, #10
 800c286:	b29b      	uxth	r3, r3
 800c288:	4313      	orrs	r3, r2
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c290:	801a      	strh	r2, [r3, #0]
 800c292:	e02d      	b.n	800c2f0 <USB_EPStartXfer+0x12a0>
 800c294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	785b      	ldrb	r3, [r3, #1]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d125      	bne.n	800c2f0 <USB_EPStartXfer+0x12a0>
 800c2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	011a      	lsls	r2, r3, #4
 800c2ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c2d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2ee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 8218 	beq.w	800c732 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c322:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <USB_EPStartXfer+0x12ea>
 800c32e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10d      	bne.n	800c356 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c33a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c33e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c342:	2b00      	cmp	r3, #0
 800c344:	f040 81f5 	bne.w	800c732 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c348:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 81ee 	bne.w	800c732 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c35a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	b29b      	uxth	r3, r3
 800c374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c37c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	441a      	add	r2, r3
 800c39a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c39e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	8013      	strh	r3, [r2, #0]
 800c3b2:	e1be      	b.n	800c732 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	78db      	ldrb	r3, [r3, #3]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	f040 81b4 	bne.w	800c72e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	699a      	ldr	r2, [r3, #24]
 800c3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d917      	bls.n	800c412 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c402:	1ad2      	subs	r2, r2, r3
 800c404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	619a      	str	r2, [r3, #24]
 800c410:	e00e      	b.n	800c430 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2200      	movs	r2, #0
 800c42e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 8085 	bne.w	800c54c <USB_EPStartXfer+0x14fc>
 800c442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c45e:	b29b      	uxth	r3, r3
 800c460:	461a      	mov	r2, r3
 800c462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c466:	4413      	add	r3, r2
 800c468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	011a      	lsls	r2, r3, #4
 800c47a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c47e:	4413      	add	r3, r2
 800c480:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c484:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c494:	b29a      	uxth	r2, r3
 800c496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c49a:	801a      	strh	r2, [r3, #0]
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4a2:	d923      	bls.n	800c4ec <USB_EPStartXfer+0x149c>
 800c4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a8:	095b      	lsrs	r3, r3, #5
 800c4aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b2:	f003 031f 	and.w	r3, r3, #31
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d104      	bne.n	800c4c4 <USB_EPStartXfer+0x1474>
 800c4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	029b      	lsls	r3, r3, #10
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4e8:	801a      	strh	r2, [r3, #0]
 800c4ea:	e060      	b.n	800c5ae <USB_EPStartXfer+0x155e>
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10c      	bne.n	800c50e <USB_EPStartXfer+0x14be>
 800c4f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c504:	b29a      	uxth	r2, r3
 800c506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c50a:	801a      	strh	r2, [r3, #0]
 800c50c:	e04f      	b.n	800c5ae <USB_EPStartXfer+0x155e>
 800c50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c512:	085b      	lsrs	r3, r3, #1
 800c514:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d004      	beq.n	800c52e <USB_EPStartXfer+0x14de>
 800c524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c528:	3301      	adds	r3, #1
 800c52a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c52e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	b29a      	uxth	r2, r3
 800c536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	029b      	lsls	r3, r3, #10
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4313      	orrs	r3, r2
 800c542:	b29a      	uxth	r2, r3
 800c544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c548:	801a      	strh	r2, [r3, #0]
 800c54a:	e030      	b.n	800c5ae <USB_EPStartXfer+0x155e>
 800c54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	785b      	ldrb	r3, [r3, #1]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d128      	bne.n	800c5ae <USB_EPStartXfer+0x155e>
 800c55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c56e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c578:	b29b      	uxth	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c580:	4413      	add	r3, r2
 800c582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	011a      	lsls	r2, r3, #4
 800c594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c598:	4413      	add	r3, r2
 800c59a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c59e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c5ac:	801a      	strh	r2, [r3, #0]
 800c5ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f040 8085 	bne.w	800c6d8 <USB_EPStartXfer+0x1688>
 800c5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c5f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	011a      	lsls	r2, r3, #4
 800c606:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c60a:	4413      	add	r3, r2
 800c60c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c620:	b29a      	uxth	r2, r3
 800c622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c626:	801a      	strh	r2, [r3, #0]
 800c628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c62c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c62e:	d923      	bls.n	800c678 <USB_EPStartXfer+0x1628>
 800c630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c634:	095b      	lsrs	r3, r3, #5
 800c636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63e:	f003 031f 	and.w	r3, r3, #31
 800c642:	2b00      	cmp	r3, #0
 800c644:	d104      	bne.n	800c650 <USB_EPStartXfer+0x1600>
 800c646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c64a:	3b01      	subs	r3, #1
 800c64c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29a      	uxth	r2, r3
 800c658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	029b      	lsls	r3, r3, #10
 800c660:	b29b      	uxth	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b29b      	uxth	r3, r3
 800c666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c66e:	b29a      	uxth	r2, r3
 800c670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c674:	801a      	strh	r2, [r3, #0]
 800c676:	e05c      	b.n	800c732 <USB_EPStartXfer+0x16e2>
 800c678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10c      	bne.n	800c69a <USB_EPStartXfer+0x164a>
 800c680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	b29b      	uxth	r3, r3
 800c688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c690:	b29a      	uxth	r2, r3
 800c692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c696:	801a      	strh	r2, [r3, #0]
 800c698:	e04b      	b.n	800c732 <USB_EPStartXfer+0x16e2>
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69e:	085b      	lsrs	r3, r3, #1
 800c6a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d004      	beq.n	800c6ba <USB_EPStartXfer+0x166a>
 800c6b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c6ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	029b      	lsls	r3, r3, #10
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6d4:	801a      	strh	r2, [r3, #0]
 800c6d6:	e02c      	b.n	800c732 <USB_EPStartXfer+0x16e2>
 800c6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	785b      	ldrb	r3, [r3, #1]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d124      	bne.n	800c732 <USB_EPStartXfer+0x16e2>
 800c6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c6fe:	4413      	add	r3, r2
 800c700:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	011a      	lsls	r2, r3, #4
 800c712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c716:	4413      	add	r3, r2
 800c718:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c71c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c724:	b29a      	uxth	r2, r3
 800c726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c72a:	801a      	strh	r2, [r3, #0]
 800c72c:	e001      	b.n	800c732 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e03a      	b.n	800c7a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	b29b      	uxth	r3, r3
 800c750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c758:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c75c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c760:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c764:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c768:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c76c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c770:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	441a      	add	r2, r3
 800c78e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b085      	sub	sp, #20
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d020      	beq.n	800c806 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7da:	81bb      	strh	r3, [r7, #12]
 800c7dc:	89bb      	ldrh	r3, [r7, #12]
 800c7de:	f083 0310 	eor.w	r3, r3, #16
 800c7e2:	81bb      	strh	r3, [r7, #12]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	441a      	add	r2, r3
 800c7ee:	89bb      	ldrh	r3, [r7, #12]
 800c7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c800:	b29b      	uxth	r3, r3
 800c802:	8013      	strh	r3, [r2, #0]
 800c804:	e01f      	b.n	800c846 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	b29b      	uxth	r3, r3
 800c814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c81c:	81fb      	strh	r3, [r7, #14]
 800c81e:	89fb      	ldrh	r3, [r7, #14]
 800c820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c824:	81fb      	strh	r3, [r7, #14]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	441a      	add	r2, r3
 800c830:	89fb      	ldrh	r3, [r7, #14]
 800c832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c83a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c842:	b29b      	uxth	r3, r3
 800c844:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc80      	pop	{r7}
 800c850:	4770      	bx	lr

0800c852 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c852:	b480      	push	{r7}
 800c854:	b087      	sub	sp, #28
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	7b1b      	ldrb	r3, [r3, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f040 809d 	bne.w	800c9a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d04c      	beq.n	800c908 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	823b      	strh	r3, [r7, #16]
 800c87c:	8a3b      	ldrh	r3, [r7, #16]
 800c87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	d01b      	beq.n	800c8be <USB_EPClearStall+0x6c>
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	b29b      	uxth	r3, r3
 800c894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c89c:	81fb      	strh	r3, [r7, #14]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	441a      	add	r2, r3
 800c8a8:	89fb      	ldrh	r3, [r7, #14]
 800c8aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	78db      	ldrb	r3, [r3, #3]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d06c      	beq.n	800c9a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8dc:	81bb      	strh	r3, [r7, #12]
 800c8de:	89bb      	ldrh	r3, [r7, #12]
 800c8e0:	f083 0320 	eor.w	r3, r3, #32
 800c8e4:	81bb      	strh	r3, [r7, #12]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	441a      	add	r2, r3
 800c8f0:	89bb      	ldrh	r3, [r7, #12]
 800c8f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c902:	b29b      	uxth	r3, r3
 800c904:	8013      	strh	r3, [r2, #0]
 800c906:	e04b      	b.n	800c9a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	82fb      	strh	r3, [r7, #22]
 800c916:	8afb      	ldrh	r3, [r7, #22]
 800c918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d01b      	beq.n	800c958 <USB_EPClearStall+0x106>
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c936:	82bb      	strh	r3, [r7, #20]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	441a      	add	r2, r3
 800c942:	8abb      	ldrh	r3, [r7, #20]
 800c944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c94c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c954:	b29b      	uxth	r3, r3
 800c956:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	b29b      	uxth	r3, r3
 800c966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c96a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c96e:	827b      	strh	r3, [r7, #18]
 800c970:	8a7b      	ldrh	r3, [r7, #18]
 800c972:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c976:	827b      	strh	r3, [r7, #18]
 800c978:	8a7b      	ldrh	r3, [r7, #18]
 800c97a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c97e:	827b      	strh	r3, [r7, #18]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	441a      	add	r2, r3
 800c98a:	8a7b      	ldrh	r3, [r7, #18]
 800c98c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bc80      	pop	{r7}
 800c9aa:	4770      	bx	lr

0800c9ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c9b8:	78fb      	ldrb	r3, [r7, #3]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d103      	bne.n	800c9c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2280      	movs	r2, #128	@ 0x80
 800c9c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bc80      	pop	{r7}
 800c9d0:	4770      	bx	lr

0800c9d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bc80      	pop	{r7}
 800c9ee:	4770      	bx	lr

0800c9f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bc80      	pop	{r7}
 800ca04:	4770      	bx	lr

0800ca06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b08b      	sub	sp, #44	@ 0x2c
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	60b9      	str	r1, [r7, #8]
 800ca10:	4611      	mov	r1, r2
 800ca12:	461a      	mov	r2, r3
 800ca14:	460b      	mov	r3, r1
 800ca16:	80fb      	strh	r3, [r7, #6]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ca1c:	88bb      	ldrh	r3, [r7, #4]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	085b      	lsrs	r3, r3, #1
 800ca22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ca2c:	88fb      	ldrh	r3, [r7, #6]
 800ca2e:	005a      	lsls	r2, r3, #1
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca3e:	e01e      	b.n	800ca7e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	021b      	lsls	r3, r3, #8
 800ca4e:	b21a      	sxth	r2, r3
 800ca50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	b21b      	sxth	r3, r3
 800ca58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	8a7a      	ldrh	r2, [r7, #18]
 800ca5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	3302      	adds	r3, #2
 800ca64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	3302      	adds	r3, #2
 800ca6a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	3301      	adds	r3, #1
 800ca76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1dd      	bne.n	800ca40 <USB_WritePMA+0x3a>
  }
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	372c      	adds	r7, #44	@ 0x2c
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr

0800ca90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b08b      	sub	sp, #44	@ 0x2c
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	460b      	mov	r3, r1
 800caa0:	80fb      	strh	r3, [r7, #6]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800caa6:	88bb      	ldrh	r3, [r7, #4]
 800caa8:	085b      	lsrs	r3, r3, #1
 800caaa:	b29b      	uxth	r3, r3
 800caac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cab6:	88fb      	ldrh	r3, [r7, #6]
 800cab8:	005a      	lsls	r2, r3, #1
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	4413      	add	r3, r2
 800cabe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cac2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac8:	e01b      	b.n	800cb02 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	3302      	adds	r3, #2
 800cad6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	3301      	adds	r3, #1
 800cae4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	0a1b      	lsrs	r3, r3, #8
 800caea:	b2da      	uxtb	r2, r3
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	3301      	adds	r3, #1
 800caf4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	3302      	adds	r3, #2
 800cafa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800cafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafe:	3b01      	subs	r3, #1
 800cb00:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1e0      	bne.n	800caca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cb08:	88bb      	ldrh	r3, [r7, #4]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d007      	beq.n	800cb24 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800cb14:	6a3b      	ldr	r3, [r7, #32]
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	701a      	strb	r2, [r3, #0]
  }
}
 800cb24:	bf00      	nop
 800cb26:	372c      	adds	r7, #44	@ 0x2c
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bc80      	pop	{r7}
 800cb2c:	4770      	bx	lr

0800cb2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc80      	pop	{r7}
 800cb40:	4770      	bx	lr

0800cb42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cb4e:	2302      	movs	r3, #2
 800cb50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	78fa      	ldrb	r2, [r7, #3]
 800cb66:	4611      	mov	r1, r2
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	4798      	blx	r3
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	4611      	mov	r1, r2
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	4798      	blx	r3

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 fed8 	bl	800d96e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbcc:	461a      	mov	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cbda:	f003 031f 	and.w	r3, r3, #31
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d016      	beq.n	800cc10 <USBD_LL_SetupStage+0x6a>
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d81c      	bhi.n	800cc20 <USBD_LL_SetupStage+0x7a>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <USBD_LL_SetupStage+0x4a>
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d008      	beq.n	800cc00 <USBD_LL_SetupStage+0x5a>
 800cbee:	e017      	b.n	800cc20 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f9cb 	bl	800cf94 <USBD_StdDevReq>
      break;
 800cbfe:	e01a      	b.n	800cc36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fa2d 	bl	800d068 <USBD_StdItfReq>
      break;
 800cc0e:	e012      	b.n	800cc36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fa6d 	bl	800d0f8 <USBD_StdEPReq>
      break;
 800cc1e:	e00a      	b.n	800cc36 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cc26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 f80e 	bl	800dc50 <USBD_LL_StallEP>
      break;
 800cc34:	bf00      	nop
  }

  return USBD_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d14b      	bne.n	800ccec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cc5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d134      	bne.n	800ccd0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d919      	bls.n	800cca6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	68da      	ldr	r2, [r3, #12]
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	1ad2      	subs	r2, r2, r3
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d203      	bcs.n	800cc94 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	e002      	b.n	800cc9a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 fedd 	bl	800da5e <USBD_CtlContinueRx>
 800cca4:	e038      	b.n	800cd18 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00a      	beq.n	800ccc8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d105      	bne.n	800ccc8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f000 feda 	bl	800da82 <USBD_CtlSendStatus>
 800ccce:	e023      	b.n	800cd18 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccd6:	2b05      	cmp	r3, #5
 800ccd8:	d11e      	bne.n	800cd18 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cce2:	2100      	movs	r1, #0
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 ffb3 	bl	800dc50 <USBD_LL_StallEP>
 800ccea:	e015      	b.n	800cd18 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00d      	beq.n	800cd14 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d108      	bne.n	800cd14 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	7afa      	ldrb	r2, [r7, #11]
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	4798      	blx	r3
 800cd12:	e001      	b.n	800cd18 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cd14:	2302      	movs	r3, #2
 800cd16:	e000      	b.n	800cd1a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b086      	sub	sp, #24
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cd30:	7afb      	ldrb	r3, [r7, #11]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d17f      	bne.n	800ce36 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3314      	adds	r3, #20
 800cd3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d15c      	bne.n	800ce00 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	68da      	ldr	r2, [r3, #12]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d915      	bls.n	800cd7e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	461a      	mov	r2, r3
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f000 fe65 	bl	800da3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd70:	2300      	movs	r3, #0
 800cd72:	2200      	movs	r2, #0
 800cd74:	2100      	movs	r1, #0
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f001 f815 	bl	800dda6 <USBD_LL_PrepareReceive>
 800cd7c:	e04e      	b.n	800ce1c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	6912      	ldr	r2, [r2, #16]
 800cd86:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd8a:	fb01 f202 	mul.w	r2, r1, r2
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d11c      	bne.n	800cdce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	689a      	ldr	r2, [r3, #8]
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d316      	bcc.n	800cdce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d20f      	bcs.n	800cdce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 fe41 	bl	800da3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 ffed 	bl	800dda6 <USBD_LL_PrepareReceive>
 800cdcc:	e026      	b.n	800ce1c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d105      	bne.n	800cdf0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cdf0:	2180      	movs	r1, #128	@ 0x80
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f000 ff2c 	bl	800dc50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 fe55 	bl	800daa8 <USBD_CtlReceiveStatus>
 800cdfe:	e00d      	b.n	800ce1c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d004      	beq.n	800ce14 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d103      	bne.n	800ce1c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ce14:	2180      	movs	r1, #128	@ 0x80
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 ff1a 	bl	800dc50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d11d      	bne.n	800ce62 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff fe81 	bl	800cb2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ce34:	e015      	b.n	800ce62 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00d      	beq.n	800ce5e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	d108      	bne.n	800ce5e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce52:	695b      	ldr	r3, [r3, #20]
 800ce54:	7afa      	ldrb	r2, [r7, #11]
 800ce56:	4611      	mov	r1, r2
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	4798      	blx	r3
 800ce5c:	e001      	b.n	800ce62 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e000      	b.n	800ce64 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce74:	2340      	movs	r3, #64	@ 0x40
 800ce76:	2200      	movs	r2, #0
 800ce78:	2100      	movs	r1, #0
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fec2 	bl	800dc04 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2240      	movs	r2, #64	@ 0x40
 800ce8c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce90:	2340      	movs	r3, #64	@ 0x40
 800ce92:	2200      	movs	r2, #0
 800ce94:	2180      	movs	r1, #128	@ 0x80
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 feb4 	bl	800dc04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2240      	movs	r2, #64	@ 0x40
 800cea6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d009      	beq.n	800cee4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	6852      	ldr	r2, [r2, #4]
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	4611      	mov	r1, r2
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	4798      	blx	r3
  }

  return USBD_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	78fa      	ldrb	r2, [r7, #3]
 800cefe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bc80      	pop	{r7}
 800cf0a:	4770      	bx	lr

0800cf0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2204      	movs	r2, #4
 800cf24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf42:	2b04      	cmp	r3, #4
 800cf44:	d105      	bne.n	800cf52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bc80      	pop	{r7}
 800cf5c:	4770      	bx	lr

0800cf5e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d10b      	bne.n	800cf88 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d005      	beq.n	800cf88 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf82:	69db      	ldr	r3, [r3, #28]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfaa:	2b40      	cmp	r3, #64	@ 0x40
 800cfac:	d005      	beq.n	800cfba <USBD_StdDevReq+0x26>
 800cfae:	2b40      	cmp	r3, #64	@ 0x40
 800cfb0:	d84f      	bhi.n	800d052 <USBD_StdDevReq+0xbe>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d009      	beq.n	800cfca <USBD_StdDevReq+0x36>
 800cfb6:	2b20      	cmp	r3, #32
 800cfb8:	d14b      	bne.n	800d052 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	4798      	blx	r3
      break;
 800cfc8:	e048      	b.n	800d05c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	2b09      	cmp	r3, #9
 800cfd0:	d839      	bhi.n	800d046 <USBD_StdDevReq+0xb2>
 800cfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd8 <USBD_StdDevReq+0x44>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800d029 	.word	0x0800d029
 800cfdc:	0800d03d 	.word	0x0800d03d
 800cfe0:	0800d047 	.word	0x0800d047
 800cfe4:	0800d033 	.word	0x0800d033
 800cfe8:	0800d047 	.word	0x0800d047
 800cfec:	0800d00b 	.word	0x0800d00b
 800cff0:	0800d001 	.word	0x0800d001
 800cff4:	0800d047 	.word	0x0800d047
 800cff8:	0800d01f 	.word	0x0800d01f
 800cffc:	0800d015 	.word	0x0800d015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d000:	6839      	ldr	r1, [r7, #0]
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f9dc 	bl	800d3c0 <USBD_GetDescriptor>
          break;
 800d008:	e022      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fb3f 	bl	800d690 <USBD_SetAddress>
          break;
 800d012:	e01d      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fb7e 	bl	800d718 <USBD_SetConfig>
          break;
 800d01c:	e018      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fc07 	bl	800d834 <USBD_GetConfig>
          break;
 800d026:	e013      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fc37 	bl	800d89e <USBD_GetStatus>
          break;
 800d030:	e00e      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fc65 	bl	800d904 <USBD_SetFeature>
          break;
 800d03a:	e009      	b.n	800d050 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fc74 	bl	800d92c <USBD_ClrFeature>
          break;
 800d044:	e004      	b.n	800d050 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fcc9 	bl	800d9e0 <USBD_CtlError>
          break;
 800d04e:	bf00      	nop
      }
      break;
 800d050:	e004      	b.n	800d05c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fcc3 	bl	800d9e0 <USBD_CtlError>
      break;
 800d05a:	bf00      	nop
  }

  return ret;
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop

0800d068 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d07e:	2b40      	cmp	r3, #64	@ 0x40
 800d080:	d005      	beq.n	800d08e <USBD_StdItfReq+0x26>
 800d082:	2b40      	cmp	r3, #64	@ 0x40
 800d084:	d82e      	bhi.n	800d0e4 <USBD_StdItfReq+0x7c>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <USBD_StdItfReq+0x26>
 800d08a:	2b20      	cmp	r3, #32
 800d08c:	d12a      	bne.n	800d0e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d094:	3b01      	subs	r3, #1
 800d096:	2b02      	cmp	r3, #2
 800d098:	d81d      	bhi.n	800d0d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	889b      	ldrh	r3, [r3, #4]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d813      	bhi.n	800d0cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	4798      	blx	r3
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	88db      	ldrh	r3, [r3, #6]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d110      	bne.n	800d0e0 <USBD_StdItfReq+0x78>
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10d      	bne.n	800d0e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fcdc 	bl	800da82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0ca:	e009      	b.n	800d0e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fc86 	bl	800d9e0 <USBD_CtlError>
          break;
 800d0d4:	e004      	b.n	800d0e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fc81 	bl	800d9e0 <USBD_CtlError>
          break;
 800d0de:	e000      	b.n	800d0e2 <USBD_StdItfReq+0x7a>
          break;
 800d0e0:	bf00      	nop
      }
      break;
 800d0e2:	e004      	b.n	800d0ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fc7a 	bl	800d9e0 <USBD_CtlError>
      break;
 800d0ec:	bf00      	nop
  }

  return USBD_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d102:	2300      	movs	r3, #0
 800d104:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	889b      	ldrh	r3, [r3, #4]
 800d10a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d114:	2b40      	cmp	r3, #64	@ 0x40
 800d116:	d007      	beq.n	800d128 <USBD_StdEPReq+0x30>
 800d118:	2b40      	cmp	r3, #64	@ 0x40
 800d11a:	f200 8146 	bhi.w	800d3aa <USBD_StdEPReq+0x2b2>
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00a      	beq.n	800d138 <USBD_StdEPReq+0x40>
 800d122:	2b20      	cmp	r3, #32
 800d124:	f040 8141 	bne.w	800d3aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	4798      	blx	r3
      break;
 800d136:	e13d      	b.n	800d3b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d140:	2b20      	cmp	r3, #32
 800d142:	d10a      	bne.n	800d15a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	4798      	blx	r3
 800d152:	4603      	mov	r3, r0
 800d154:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d156:	7bfb      	ldrb	r3, [r7, #15]
 800d158:	e12d      	b.n	800d3b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	2b03      	cmp	r3, #3
 800d160:	d007      	beq.n	800d172 <USBD_StdEPReq+0x7a>
 800d162:	2b03      	cmp	r3, #3
 800d164:	f300 811b 	bgt.w	800d39e <USBD_StdEPReq+0x2a6>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d072      	beq.n	800d252 <USBD_StdEPReq+0x15a>
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d03a      	beq.n	800d1e6 <USBD_StdEPReq+0xee>
 800d170:	e115      	b.n	800d39e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d002      	beq.n	800d182 <USBD_StdEPReq+0x8a>
 800d17c:	2b03      	cmp	r3, #3
 800d17e:	d015      	beq.n	800d1ac <USBD_StdEPReq+0xb4>
 800d180:	e02b      	b.n	800d1da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00c      	beq.n	800d1a2 <USBD_StdEPReq+0xaa>
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	2b80      	cmp	r3, #128	@ 0x80
 800d18c:	d009      	beq.n	800d1a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 fd5c 	bl	800dc50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d198:	2180      	movs	r1, #128	@ 0x80
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fd58 	bl	800dc50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1a0:	e020      	b.n	800d1e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fc1b 	bl	800d9e0 <USBD_CtlError>
              break;
 800d1aa:	e01b      	b.n	800d1e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	885b      	ldrh	r3, [r3, #2]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10e      	bne.n	800d1d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <USBD_StdEPReq+0xda>
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
 800d1bc:	2b80      	cmp	r3, #128	@ 0x80
 800d1be:	d008      	beq.n	800d1d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	88db      	ldrh	r3, [r3, #6]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d104      	bne.n	800d1d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fd3f 	bl	800dc50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fc55 	bl	800da82 <USBD_CtlSendStatus>

              break;
 800d1d8:	e004      	b.n	800d1e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fbff 	bl	800d9e0 <USBD_CtlError>
              break;
 800d1e2:	bf00      	nop
          }
          break;
 800d1e4:	e0e0      	b.n	800d3a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d002      	beq.n	800d1f6 <USBD_StdEPReq+0xfe>
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d015      	beq.n	800d220 <USBD_StdEPReq+0x128>
 800d1f4:	e026      	b.n	800d244 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1f6:	7bbb      	ldrb	r3, [r7, #14]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00c      	beq.n	800d216 <USBD_StdEPReq+0x11e>
 800d1fc:	7bbb      	ldrb	r3, [r7, #14]
 800d1fe:	2b80      	cmp	r3, #128	@ 0x80
 800d200:	d009      	beq.n	800d216 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d202:	7bbb      	ldrb	r3, [r7, #14]
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fd22 	bl	800dc50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d20c:	2180      	movs	r1, #128	@ 0x80
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fd1e 	bl	800dc50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d214:	e01c      	b.n	800d250 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fbe1 	bl	800d9e0 <USBD_CtlError>
              break;
 800d21e:	e017      	b.n	800d250 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	885b      	ldrh	r3, [r3, #2]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d112      	bne.n	800d24e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d228:	7bbb      	ldrb	r3, [r7, #14]
 800d22a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d004      	beq.n	800d23c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d232:	7bbb      	ldrb	r3, [r7, #14]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fd29 	bl	800dc8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fc20 	bl	800da82 <USBD_CtlSendStatus>
              }
              break;
 800d242:	e004      	b.n	800d24e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fbca 	bl	800d9e0 <USBD_CtlError>
              break;
 800d24c:	e000      	b.n	800d250 <USBD_StdEPReq+0x158>
              break;
 800d24e:	bf00      	nop
          }
          break;
 800d250:	e0aa      	b.n	800d3a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d002      	beq.n	800d262 <USBD_StdEPReq+0x16a>
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	d032      	beq.n	800d2c6 <USBD_StdEPReq+0x1ce>
 800d260:	e097      	b.n	800d392 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d007      	beq.n	800d278 <USBD_StdEPReq+0x180>
 800d268:	7bbb      	ldrb	r3, [r7, #14]
 800d26a:	2b80      	cmp	r3, #128	@ 0x80
 800d26c:	d004      	beq.n	800d278 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fbb5 	bl	800d9e0 <USBD_CtlError>
                break;
 800d276:	e091      	b.n	800d39c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	da0b      	bge.n	800d298 <USBD_StdEPReq+0x1a0>
 800d280:	7bbb      	ldrb	r3, [r7, #14]
 800d282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	3310      	adds	r3, #16
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	4413      	add	r3, r2
 800d294:	3304      	adds	r3, #4
 800d296:	e00b      	b.n	800d2b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d298:	7bbb      	ldrb	r3, [r7, #14]
 800d29a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	4619      	mov	r1, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fb9f 	bl	800da02 <USBD_CtlSendData>
              break;
 800d2c4:	e06a      	b.n	800d39c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	da11      	bge.n	800d2f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
 800d2d0:	f003 020f 	and.w	r2, r3, #15
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	3318      	adds	r3, #24
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d117      	bne.n	800d318 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fb78 	bl	800d9e0 <USBD_CtlError>
                  break;
 800d2f0:	e054      	b.n	800d39c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2f2:	7bbb      	ldrb	r3, [r7, #14]
 800d2f4:	f003 020f 	and.w	r2, r3, #15
 800d2f8:	6879      	ldr	r1, [r7, #4]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	440b      	add	r3, r1
 800d304:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d104      	bne.n	800d318 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fb65 	bl	800d9e0 <USBD_CtlError>
                  break;
 800d316:	e041      	b.n	800d39c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	da0b      	bge.n	800d338 <USBD_StdEPReq+0x240>
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d326:	4613      	mov	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	3310      	adds	r3, #16
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	4413      	add	r3, r2
 800d334:	3304      	adds	r3, #4
 800d336:	e00b      	b.n	800d350 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d338:	7bbb      	ldrb	r3, [r7, #14]
 800d33a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	4413      	add	r3, r2
 800d34e:	3304      	adds	r3, #4
 800d350:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d352:	7bbb      	ldrb	r3, [r7, #14]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <USBD_StdEPReq+0x266>
 800d358:	7bbb      	ldrb	r3, [r7, #14]
 800d35a:	2b80      	cmp	r3, #128	@ 0x80
 800d35c:	d103      	bne.n	800d366 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	e00e      	b.n	800d384 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fcae 	bl	800dccc <USBD_LL_IsStallEP>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2201      	movs	r2, #1
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	e002      	b.n	800d384 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2202      	movs	r2, #2
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fb39 	bl	800da02 <USBD_CtlSendData>
              break;
 800d390:	e004      	b.n	800d39c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fb23 	bl	800d9e0 <USBD_CtlError>
              break;
 800d39a:	bf00      	nop
          }
          break;
 800d39c:	e004      	b.n	800d3a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fb1d 	bl	800d9e0 <USBD_CtlError>
          break;
 800d3a6:	bf00      	nop
      }
      break;
 800d3a8:	e004      	b.n	800d3b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fb17 	bl	800d9e0 <USBD_CtlError>
      break;
 800d3b2:	bf00      	nop
  }

  return ret;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	885b      	ldrh	r3, [r3, #2]
 800d3da:	0a1b      	lsrs	r3, r3, #8
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	2b06      	cmp	r3, #6
 800d3e2:	f200 8128 	bhi.w	800d636 <USBD_GetDescriptor+0x276>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <USBD_GetDescriptor+0x2c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d409 	.word	0x0800d409
 800d3f0:	0800d421 	.word	0x0800d421
 800d3f4:	0800d461 	.word	0x0800d461
 800d3f8:	0800d637 	.word	0x0800d637
 800d3fc:	0800d637 	.word	0x0800d637
 800d400:	0800d5d7 	.word	0x0800d5d7
 800d404:	0800d603 	.word	0x0800d603
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	7c12      	ldrb	r2, [r2, #16]
 800d414:	f107 0108 	add.w	r1, r7, #8
 800d418:	4610      	mov	r0, r2
 800d41a:	4798      	blx	r3
 800d41c:	60f8      	str	r0, [r7, #12]
      break;
 800d41e:	e112      	b.n	800d646 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7c1b      	ldrb	r3, [r3, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10d      	bne.n	800d444 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d430:	f107 0208 	add.w	r2, r7, #8
 800d434:	4610      	mov	r0, r2
 800d436:	4798      	blx	r3
 800d438:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3301      	adds	r3, #1
 800d43e:	2202      	movs	r2, #2
 800d440:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d442:	e100      	b.n	800d646 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d44c:	f107 0208 	add.w	r2, r7, #8
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
 800d454:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	2202      	movs	r2, #2
 800d45c:	701a      	strb	r2, [r3, #0]
      break;
 800d45e:	e0f2      	b.n	800d646 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	885b      	ldrh	r3, [r3, #2]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b05      	cmp	r3, #5
 800d468:	f200 80ac 	bhi.w	800d5c4 <USBD_GetDescriptor+0x204>
 800d46c:	a201      	add	r2, pc, #4	@ (adr r2, 800d474 <USBD_GetDescriptor+0xb4>)
 800d46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d472:	bf00      	nop
 800d474:	0800d48d 	.word	0x0800d48d
 800d478:	0800d4c1 	.word	0x0800d4c1
 800d47c:	0800d4f5 	.word	0x0800d4f5
 800d480:	0800d529 	.word	0x0800d529
 800d484:	0800d55d 	.word	0x0800d55d
 800d488:	0800d591 	.word	0x0800d591
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00b      	beq.n	800d4b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	7c12      	ldrb	r2, [r2, #16]
 800d4a4:	f107 0108 	add.w	r1, r7, #8
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	4798      	blx	r3
 800d4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ae:	e091      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fa94 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d4b8:	7afb      	ldrb	r3, [r7, #11]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d4be:	e089      	b.n	800d5d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00b      	beq.n	800d4e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	7c12      	ldrb	r2, [r2, #16]
 800d4d8:	f107 0108 	add.w	r1, r7, #8
 800d4dc:	4610      	mov	r0, r2
 800d4de:	4798      	blx	r3
 800d4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4e2:	e077      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fa7a 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d4ec:	7afb      	ldrb	r3, [r7, #11]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4f2:	e06f      	b.n	800d5d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	7c12      	ldrb	r2, [r2, #16]
 800d50c:	f107 0108 	add.w	r1, r7, #8
 800d510:	4610      	mov	r0, r2
 800d512:	4798      	blx	r3
 800d514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d516:	e05d      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fa60 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d520:	7afb      	ldrb	r3, [r7, #11]
 800d522:	3301      	adds	r3, #1
 800d524:	72fb      	strb	r3, [r7, #11]
          break;
 800d526:	e055      	b.n	800d5d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	7c12      	ldrb	r2, [r2, #16]
 800d540:	f107 0108 	add.w	r1, r7, #8
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
 800d548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d54a:	e043      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fa46 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	3301      	adds	r3, #1
 800d558:	72fb      	strb	r3, [r7, #11]
          break;
 800d55a:	e03b      	b.n	800d5d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d56e:	695b      	ldr	r3, [r3, #20]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	7c12      	ldrb	r2, [r2, #16]
 800d574:	f107 0108 	add.w	r1, r7, #8
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3
 800d57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d57e:	e029      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fa2c 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d588:	7afb      	ldrb	r3, [r7, #11]
 800d58a:	3301      	adds	r3, #1
 800d58c:	72fb      	strb	r3, [r7, #11]
          break;
 800d58e:	e021      	b.n	800d5d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	7c12      	ldrb	r2, [r2, #16]
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5b2:	e00f      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fa12 	bl	800d9e0 <USBD_CtlError>
            err++;
 800d5bc:	7afb      	ldrb	r3, [r7, #11]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5c2:	e007      	b.n	800d5d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa0a 	bl	800d9e0 <USBD_CtlError>
          err++;
 800d5cc:	7afb      	ldrb	r3, [r7, #11]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d5d2:	e038      	b.n	800d646 <USBD_GetDescriptor+0x286>
 800d5d4:	e037      	b.n	800d646 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7c1b      	ldrb	r3, [r3, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d109      	bne.n	800d5f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e6:	f107 0208 	add.w	r2, r7, #8
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	4798      	blx	r3
 800d5ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5f0:	e029      	b.n	800d646 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5f2:	6839      	ldr	r1, [r7, #0]
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f9f3 	bl	800d9e0 <USBD_CtlError>
        err++;
 800d5fa:	7afb      	ldrb	r3, [r7, #11]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d600:	e021      	b.n	800d646 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7c1b      	ldrb	r3, [r3, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10d      	bne.n	800d626 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d612:	f107 0208 	add.w	r2, r7, #8
 800d616:	4610      	mov	r0, r2
 800d618:	4798      	blx	r3
 800d61a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	3301      	adds	r3, #1
 800d620:	2207      	movs	r2, #7
 800d622:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d624:	e00f      	b.n	800d646 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d626:	6839      	ldr	r1, [r7, #0]
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f9d9 	bl	800d9e0 <USBD_CtlError>
        err++;
 800d62e:	7afb      	ldrb	r3, [r7, #11]
 800d630:	3301      	adds	r3, #1
 800d632:	72fb      	strb	r3, [r7, #11]
      break;
 800d634:	e007      	b.n	800d646 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f9d1 	bl	800d9e0 <USBD_CtlError>
      err++;
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	3301      	adds	r3, #1
 800d642:	72fb      	strb	r3, [r7, #11]
      break;
 800d644:	bf00      	nop
  }

  if (err != 0U)
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d11c      	bne.n	800d686 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d64c:	893b      	ldrh	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d011      	beq.n	800d676 <USBD_GetDescriptor+0x2b6>
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	88db      	ldrh	r3, [r3, #6]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00d      	beq.n	800d676 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	88da      	ldrh	r2, [r3, #6]
 800d65e:	893b      	ldrh	r3, [r7, #8]
 800d660:	4293      	cmp	r3, r2
 800d662:	bf28      	it	cs
 800d664:	4613      	movcs	r3, r2
 800d666:	b29b      	uxth	r3, r3
 800d668:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d66a:	893b      	ldrh	r3, [r7, #8]
 800d66c:	461a      	mov	r2, r3
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f9c6 	bl	800da02 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	88db      	ldrh	r3, [r3, #6]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d104      	bne.n	800d688 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f9ff 	bl	800da82 <USBD_CtlSendStatus>
 800d684:	e000      	b.n	800d688 <USBD_GetDescriptor+0x2c8>
    return;
 800d686:	bf00      	nop
    }
  }
}
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop

0800d690 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	889b      	ldrh	r3, [r3, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d130      	bne.n	800d704 <USBD_SetAddress+0x74>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	88db      	ldrh	r3, [r3, #6]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d12c      	bne.n	800d704 <USBD_SetAddress+0x74>
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	885b      	ldrh	r3, [r3, #2]
 800d6ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6b0:	d828      	bhi.n	800d704 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	885b      	ldrh	r3, [r3, #2]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c4:	2b03      	cmp	r3, #3
 800d6c6:	d104      	bne.n	800d6d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f988 	bl	800d9e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6d0:	e01d      	b.n	800d70e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	7bfa      	ldrb	r2, [r7, #15]
 800d6d6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fb1f 	bl	800dd22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f9cc 	bl	800da82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6f8:	e009      	b.n	800d70e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d702:	e004      	b.n	800d70e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f96a 	bl	800d9e0 <USBD_CtlError>
  }
}
 800d70c:	bf00      	nop
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
	...

0800d718 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	885b      	ldrh	r3, [r3, #2]
 800d726:	b2da      	uxtb	r2, r3
 800d728:	4b41      	ldr	r3, [pc, #260]	@ (800d830 <USBD_SetConfig+0x118>)
 800d72a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d72c:	4b40      	ldr	r3, [pc, #256]	@ (800d830 <USBD_SetConfig+0x118>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d904      	bls.n	800d73e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f952 	bl	800d9e0 <USBD_CtlError>
 800d73c:	e075      	b.n	800d82a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d744:	2b02      	cmp	r3, #2
 800d746:	d002      	beq.n	800d74e <USBD_SetConfig+0x36>
 800d748:	2b03      	cmp	r3, #3
 800d74a:	d023      	beq.n	800d794 <USBD_SetConfig+0x7c>
 800d74c:	e062      	b.n	800d814 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d74e:	4b38      	ldr	r3, [pc, #224]	@ (800d830 <USBD_SetConfig+0x118>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d01a      	beq.n	800d78c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d756:	4b36      	ldr	r3, [pc, #216]	@ (800d830 <USBD_SetConfig+0x118>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2203      	movs	r2, #3
 800d764:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d768:	4b31      	ldr	r3, [pc, #196]	@ (800d830 <USBD_SetConfig+0x118>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff f9e7 	bl	800cb42 <USBD_SetClassConfig>
 800d774:	4603      	mov	r3, r0
 800d776:	2b02      	cmp	r3, #2
 800d778:	d104      	bne.n	800d784 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f92f 	bl	800d9e0 <USBD_CtlError>
            return;
 800d782:	e052      	b.n	800d82a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f97c 	bl	800da82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d78a:	e04e      	b.n	800d82a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f978 	bl	800da82 <USBD_CtlSendStatus>
        break;
 800d792:	e04a      	b.n	800d82a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d794:	4b26      	ldr	r3, [pc, #152]	@ (800d830 <USBD_SetConfig+0x118>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d112      	bne.n	800d7c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2202      	movs	r2, #2
 800d7a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d7a4:	4b22      	ldr	r3, [pc, #136]	@ (800d830 <USBD_SetConfig+0x118>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d7ae:	4b20      	ldr	r3, [pc, #128]	@ (800d830 <USBD_SetConfig+0x118>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff f9e3 	bl	800cb80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f961 	bl	800da82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d7c0:	e033      	b.n	800d82a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d7c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d830 <USBD_SetConfig+0x118>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d01d      	beq.n	800d80c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7ff f9d1 	bl	800cb80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d7de:	4b14      	ldr	r3, [pc, #80]	@ (800d830 <USBD_SetConfig+0x118>)
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d7e8:	4b11      	ldr	r3, [pc, #68]	@ (800d830 <USBD_SetConfig+0x118>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff f9a7 	bl	800cb42 <USBD_SetClassConfig>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d104      	bne.n	800d804 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f8ef 	bl	800d9e0 <USBD_CtlError>
            return;
 800d802:	e012      	b.n	800d82a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f93c 	bl	800da82 <USBD_CtlSendStatus>
        break;
 800d80a:	e00e      	b.n	800d82a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f938 	bl	800da82 <USBD_CtlSendStatus>
        break;
 800d812:	e00a      	b.n	800d82a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d814:	6839      	ldr	r1, [r7, #0]
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f8e2 	bl	800d9e0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d81c:	4b04      	ldr	r3, [pc, #16]	@ (800d830 <USBD_SetConfig+0x118>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff f9ac 	bl	800cb80 <USBD_ClrClassConfig>
        break;
 800d828:	bf00      	nop
    }
  }
}
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20000680 	.word	0x20000680

0800d834 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	88db      	ldrh	r3, [r3, #6]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d004      	beq.n	800d850 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f8c9 	bl	800d9e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d84e:	e022      	b.n	800d896 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d856:	2b02      	cmp	r3, #2
 800d858:	dc02      	bgt.n	800d860 <USBD_GetConfig+0x2c>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	dc03      	bgt.n	800d866 <USBD_GetConfig+0x32>
 800d85e:	e015      	b.n	800d88c <USBD_GetConfig+0x58>
 800d860:	2b03      	cmp	r3, #3
 800d862:	d00b      	beq.n	800d87c <USBD_GetConfig+0x48>
 800d864:	e012      	b.n	800d88c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	3308      	adds	r3, #8
 800d870:	2201      	movs	r2, #1
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f8c4 	bl	800da02 <USBD_CtlSendData>
        break;
 800d87a:	e00c      	b.n	800d896 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	3304      	adds	r3, #4
 800d880:	2201      	movs	r2, #1
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f8bc 	bl	800da02 <USBD_CtlSendData>
        break;
 800d88a:	e004      	b.n	800d896 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f8a6 	bl	800d9e0 <USBD_CtlError>
        break;
 800d894:	bf00      	nop
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
 800d8a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d81e      	bhi.n	800d8f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	88db      	ldrh	r3, [r3, #6]
 800d8b8:	2b02      	cmp	r3, #2
 800d8ba:	d004      	beq.n	800d8c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d8bc:	6839      	ldr	r1, [r7, #0]
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f88e 	bl	800d9e0 <USBD_CtlError>
        break;
 800d8c4:	e01a      	b.n	800d8fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d005      	beq.n	800d8e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	f043 0202 	orr.w	r2, r3, #2
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	330c      	adds	r3, #12
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f889 	bl	800da02 <USBD_CtlSendData>
      break;
 800d8f0:	e004      	b.n	800d8fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f873 	bl	800d9e0 <USBD_CtlError>
      break;
 800d8fa:	bf00      	nop
  }
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	885b      	ldrh	r3, [r3, #2]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d106      	bne.n	800d924 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2201      	movs	r2, #1
 800d91a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f8af 	bl	800da82 <USBD_CtlSendStatus>
  }
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d93c:	3b01      	subs	r3, #1
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d80b      	bhi.n	800d95a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	885b      	ldrh	r3, [r3, #2]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d10c      	bne.n	800d964 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f895 	bl	800da82 <USBD_CtlSendStatus>
      }
      break;
 800d958:	e004      	b.n	800d964 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f83f 	bl	800d9e0 <USBD_CtlError>
      break;
 800d962:	e000      	b.n	800d966 <USBD_ClrFeature+0x3a>
      break;
 800d964:	bf00      	nop
  }
}
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	781a      	ldrb	r2, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	785a      	ldrb	r2, [r3, #1]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	3302      	adds	r3, #2
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	3303      	adds	r3, #3
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	b29b      	uxth	r3, r3
 800d99a:	4413      	add	r3, r2
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	3304      	adds	r3, #4
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	3305      	adds	r3, #5
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	021b      	lsls	r3, r3, #8
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	4413      	add	r3, r2
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	3306      	adds	r3, #6
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	3307      	adds	r3, #7
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	021b      	lsls	r3, r3, #8
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4413      	add	r3, r2
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	80da      	strh	r2, [r3, #6]

}
 800d9d6:	bf00      	nop
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bc80      	pop	{r7}
 800d9de:	4770      	bx	lr

0800d9e0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d9ea:	2180      	movs	r1, #128	@ 0x80
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 f92f 	bl	800dc50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f92b 	bl	800dc50 <USBD_LL_StallEP>
}
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	60b9      	str	r1, [r7, #8]
 800da0c:	4613      	mov	r3, r2
 800da0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2202      	movs	r2, #2
 800da14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da18:	88fa      	ldrh	r2, [r7, #6]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800da1e:	88fa      	ldrh	r2, [r7, #6]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da24:	88fb      	ldrh	r3, [r7, #6]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	2100      	movs	r1, #0
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 f998 	bl	800dd60 <USBD_LL_Transmit>

  return USBD_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	60f8      	str	r0, [r7, #12]
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	4613      	mov	r3, r2
 800da46:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da48:	88fb      	ldrh	r3, [r7, #6]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	2100      	movs	r1, #0
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 f986 	bl	800dd60 <USBD_LL_Transmit>

  return USBD_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	4613      	mov	r3, r2
 800da6a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da6c:	88fb      	ldrh	r3, [r7, #6]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	2100      	movs	r1, #0
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f000 f997 	bl	800dda6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da78:	2300      	movs	r3, #0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2204      	movs	r2, #4
 800da8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da92:	2300      	movs	r3, #0
 800da94:	2200      	movs	r2, #0
 800da96:	2100      	movs	r1, #0
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f961 	bl	800dd60 <USBD_LL_Transmit>

  return USBD_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2205      	movs	r2, #5
 800dab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dab8:	2300      	movs	r3, #0
 800daba:	2200      	movs	r2, #0
 800dabc:	2100      	movs	r1, #0
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f971 	bl	800dda6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b082      	sub	sp, #8
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800dae2:	4619      	mov	r1, r3
 800dae4:	4610      	mov	r0, r2
 800dae6:	f7ff f85e 	bl	800cba6 <USBD_LL_SetupStage>
}
 800daea:	bf00      	nop
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800db04:	78fa      	ldrb	r2, [r7, #3]
 800db06:	6879      	ldr	r1, [r7, #4]
 800db08:	4613      	mov	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	440b      	add	r3, r1
 800db12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	4619      	mov	r1, r3
 800db1c:	f7ff f890 	bl	800cc40 <USBD_LL_DataOutStage>
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800db3a:	78fa      	ldrb	r2, [r7, #3]
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	4613      	mov	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	440b      	add	r3, r1
 800db48:	3324      	adds	r3, #36	@ 0x24
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	78fb      	ldrb	r3, [r7, #3]
 800db4e:	4619      	mov	r1, r3
 800db50:	f7ff f8e7 	bl	800cd22 <USBD_LL_DataInStage>
}
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd) // usb는 통신할때 항상 1ms 단위로 callback이 호출된다.
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7ff f9f7 	bl	800cf5e <USBD_LL_SOF>
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db80:	2301      	movs	r3, #1
 800db82:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	799b      	ldrb	r3, [r3, #6]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d001      	beq.n	800db90 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db8c:	f7f7 fc24 	bl	80053d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db96:	7bfa      	ldrb	r2, [r7, #15]
 800db98:	4611      	mov	r1, r2
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff f9a7 	bl	800ceee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff f960 	bl	800ce6c <USBD_LL_Reset>
}
 800dbac:	bf00      	nop
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff f9a2 	bl	800cf0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7a9b      	ldrb	r3, [r3, #10]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d005      	beq.n	800dbdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbd0:	4b04      	ldr	r3, [pc, #16]	@ (800dbe4 <HAL_PCD_SuspendCallback+0x30>)
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	4a03      	ldr	r2, [pc, #12]	@ (800dbe4 <HAL_PCD_SuspendCallback+0x30>)
 800dbd6:	f043 0306 	orr.w	r3, r3, #6
 800dbda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	e000ed00 	.word	0xe000ed00

0800dbe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7ff f99c 	bl	800cf34 <USBD_LL_Resume>
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	4611      	mov	r1, r2
 800dc10:	461a      	mov	r2, r3
 800dc12:	4603      	mov	r3, r0
 800dc14:	70fb      	strb	r3, [r7, #3]
 800dc16:	460b      	mov	r3, r1
 800dc18:	70bb      	strb	r3, [r7, #2]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800dc2c:	78bb      	ldrb	r3, [r7, #2]
 800dc2e:	883a      	ldrh	r2, [r7, #0]
 800dc30:	78f9      	ldrb	r1, [r7, #3]
 800dc32:	f7f9 fcb4 	bl	800759e <HAL_PCD_EP_Open>
 800dc36:	4603      	mov	r3, r0
 800dc38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 f8d5 	bl	800ddec <USBD_Get_USB_Status>
 800dc42:	4603      	mov	r3, r0
 800dc44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc46:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dc6a:	78fa      	ldrb	r2, [r7, #3]
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f9 fd5a 	bl	8007728 <HAL_PCD_EP_SetStall>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 f8b6 	bl	800ddec <USBD_Get_USB_Status>
 800dc80:	4603      	mov	r3, r0
 800dc82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc84:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b084      	sub	sp, #16
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	460b      	mov	r3, r1
 800dc98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dca8:	78fa      	ldrb	r2, [r7, #3]
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7f9 fd9b 	bl	80077e8 <HAL_PCD_EP_ClrStall>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 f897 	bl	800ddec <USBD_Get_USB_Status>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dcde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da0b      	bge.n	800dd00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	00db      	lsls	r3, r3, #3
 800dcf8:	440b      	add	r3, r1
 800dcfa:	3312      	adds	r3, #18
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	e00b      	b.n	800dd18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd00:	78fb      	ldrb	r3, [r7, #3]
 800dd02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd06:	68f9      	ldr	r1, [r7, #12]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	440b      	add	r3, r1
 800dd12:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800dd16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bc80      	pop	{r7}
 800dd20:	4770      	bx	lr

0800dd22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd3c:	78fa      	ldrb	r2, [r7, #3]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f9 fc08 	bl	8007556 <HAL_PCD_SetAddress>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f84d 	bl	800ddec <USBD_Get_USB_Status>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	607a      	str	r2, [r7, #4]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	72fb      	strb	r3, [r7, #11]
 800dd70:	4613      	mov	r3, r2
 800dd72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800dd82:	893b      	ldrh	r3, [r7, #8]
 800dd84:	7af9      	ldrb	r1, [r7, #11]
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	f7f9 fc97 	bl	80076ba <HAL_PCD_EP_Transmit>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd90:	7dfb      	ldrb	r3, [r7, #23]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 f82a 	bl	800ddec <USBD_Get_USB_Status>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b086      	sub	sp, #24
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	72fb      	strb	r3, [r7, #11]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ddc8:	893b      	ldrh	r3, [r7, #8]
 800ddca:	7af9      	ldrb	r1, [r7, #11]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	f7f9 fc43 	bl	8007658 <HAL_PCD_EP_Receive>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 f807 	bl	800ddec <USBD_Get_USB_Status>
 800ddde:	4603      	mov	r3, r0
 800dde0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dde2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d817      	bhi.n	800de30 <USBD_Get_USB_Status+0x44>
 800de00:	a201      	add	r2, pc, #4	@ (adr r2, 800de08 <USBD_Get_USB_Status+0x1c>)
 800de02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de06:	bf00      	nop
 800de08:	0800de19 	.word	0x0800de19
 800de0c:	0800de1f 	.word	0x0800de1f
 800de10:	0800de25 	.word	0x0800de25
 800de14:	0800de2b 	.word	0x0800de2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
    break;
 800de1c:	e00b      	b.n	800de36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de1e:	2302      	movs	r3, #2
 800de20:	73fb      	strb	r3, [r7, #15]
    break;
 800de22:	e008      	b.n	800de36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de24:	2301      	movs	r3, #1
 800de26:	73fb      	strb	r3, [r7, #15]
    break;
 800de28:	e005      	b.n	800de36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de2a:	2302      	movs	r3, #2
 800de2c:	73fb      	strb	r3, [r7, #15]
    break;
 800de2e:	e002      	b.n	800de36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de30:	2302      	movs	r3, #2
 800de32:	73fb      	strb	r3, [r7, #15]
    break;
 800de34:	bf00      	nop
  }
  return usb_status;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bc80      	pop	{r7}
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop

0800de44 <main>:




int main(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
  hwInit();
 800de48:	f7f8 f910 	bl	800606c <hwInit>
  apInit();
 800de4c:	f7f7 f97e 	bl	800514c <apInit>

  apMain();
 800de50:	f7f7 f98a 	bl	8005168 <apMain>

  return 0;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <std>:
 800de5c:	2300      	movs	r3, #0
 800de5e:	b510      	push	{r4, lr}
 800de60:	4604      	mov	r4, r0
 800de62:	e9c0 3300 	strd	r3, r3, [r0]
 800de66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de6a:	6083      	str	r3, [r0, #8]
 800de6c:	8181      	strh	r1, [r0, #12]
 800de6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800de70:	81c2      	strh	r2, [r0, #14]
 800de72:	6183      	str	r3, [r0, #24]
 800de74:	4619      	mov	r1, r3
 800de76:	2208      	movs	r2, #8
 800de78:	305c      	adds	r0, #92	@ 0x5c
 800de7a:	f000 f9f9 	bl	800e270 <memset>
 800de7e:	4b0d      	ldr	r3, [pc, #52]	@ (800deb4 <std+0x58>)
 800de80:	6224      	str	r4, [r4, #32]
 800de82:	6263      	str	r3, [r4, #36]	@ 0x24
 800de84:	4b0c      	ldr	r3, [pc, #48]	@ (800deb8 <std+0x5c>)
 800de86:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de88:	4b0c      	ldr	r3, [pc, #48]	@ (800debc <std+0x60>)
 800de8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de8c:	4b0c      	ldr	r3, [pc, #48]	@ (800dec0 <std+0x64>)
 800de8e:	6323      	str	r3, [r4, #48]	@ 0x30
 800de90:	4b0c      	ldr	r3, [pc, #48]	@ (800dec4 <std+0x68>)
 800de92:	429c      	cmp	r4, r3
 800de94:	d006      	beq.n	800dea4 <std+0x48>
 800de96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de9a:	4294      	cmp	r4, r2
 800de9c:	d002      	beq.n	800dea4 <std+0x48>
 800de9e:	33d0      	adds	r3, #208	@ 0xd0
 800dea0:	429c      	cmp	r4, r3
 800dea2:	d105      	bne.n	800deb0 <std+0x54>
 800dea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deac:	f000 ba58 	b.w	800e360 <__retarget_lock_init_recursive>
 800deb0:	bd10      	pop	{r4, pc}
 800deb2:	bf00      	nop
 800deb4:	0800e0c1 	.word	0x0800e0c1
 800deb8:	0800e0e3 	.word	0x0800e0e3
 800debc:	0800e11b 	.word	0x0800e11b
 800dec0:	0800e13f 	.word	0x0800e13f
 800dec4:	2000095c 	.word	0x2000095c

0800dec8 <stdio_exit_handler>:
 800dec8:	4a02      	ldr	r2, [pc, #8]	@ (800ded4 <stdio_exit_handler+0xc>)
 800deca:	4903      	ldr	r1, [pc, #12]	@ (800ded8 <stdio_exit_handler+0x10>)
 800decc:	4803      	ldr	r0, [pc, #12]	@ (800dedc <stdio_exit_handler+0x14>)
 800dece:	f000 b869 	b.w	800dfa4 <_fwalk_sglue>
 800ded2:	bf00      	nop
 800ded4:	20000014 	.word	0x20000014
 800ded8:	0800ebf9 	.word	0x0800ebf9
 800dedc:	20000024 	.word	0x20000024

0800dee0 <cleanup_stdio>:
 800dee0:	6841      	ldr	r1, [r0, #4]
 800dee2:	4b0c      	ldr	r3, [pc, #48]	@ (800df14 <cleanup_stdio+0x34>)
 800dee4:	b510      	push	{r4, lr}
 800dee6:	4299      	cmp	r1, r3
 800dee8:	4604      	mov	r4, r0
 800deea:	d001      	beq.n	800def0 <cleanup_stdio+0x10>
 800deec:	f000 fe84 	bl	800ebf8 <_fflush_r>
 800def0:	68a1      	ldr	r1, [r4, #8]
 800def2:	4b09      	ldr	r3, [pc, #36]	@ (800df18 <cleanup_stdio+0x38>)
 800def4:	4299      	cmp	r1, r3
 800def6:	d002      	beq.n	800defe <cleanup_stdio+0x1e>
 800def8:	4620      	mov	r0, r4
 800defa:	f000 fe7d 	bl	800ebf8 <_fflush_r>
 800defe:	68e1      	ldr	r1, [r4, #12]
 800df00:	4b06      	ldr	r3, [pc, #24]	@ (800df1c <cleanup_stdio+0x3c>)
 800df02:	4299      	cmp	r1, r3
 800df04:	d004      	beq.n	800df10 <cleanup_stdio+0x30>
 800df06:	4620      	mov	r0, r4
 800df08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df0c:	f000 be74 	b.w	800ebf8 <_fflush_r>
 800df10:	bd10      	pop	{r4, pc}
 800df12:	bf00      	nop
 800df14:	2000095c 	.word	0x2000095c
 800df18:	200009c4 	.word	0x200009c4
 800df1c:	20000a2c 	.word	0x20000a2c

0800df20 <global_stdio_init.part.0>:
 800df20:	b510      	push	{r4, lr}
 800df22:	4b0b      	ldr	r3, [pc, #44]	@ (800df50 <global_stdio_init.part.0+0x30>)
 800df24:	4c0b      	ldr	r4, [pc, #44]	@ (800df54 <global_stdio_init.part.0+0x34>)
 800df26:	4a0c      	ldr	r2, [pc, #48]	@ (800df58 <global_stdio_init.part.0+0x38>)
 800df28:	4620      	mov	r0, r4
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	2104      	movs	r1, #4
 800df2e:	2200      	movs	r2, #0
 800df30:	f7ff ff94 	bl	800de5c <std>
 800df34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df38:	2201      	movs	r2, #1
 800df3a:	2109      	movs	r1, #9
 800df3c:	f7ff ff8e 	bl	800de5c <std>
 800df40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df44:	2202      	movs	r2, #2
 800df46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df4a:	2112      	movs	r1, #18
 800df4c:	f7ff bf86 	b.w	800de5c <std>
 800df50:	20000a94 	.word	0x20000a94
 800df54:	2000095c 	.word	0x2000095c
 800df58:	0800dec9 	.word	0x0800dec9

0800df5c <__sfp_lock_acquire>:
 800df5c:	4801      	ldr	r0, [pc, #4]	@ (800df64 <__sfp_lock_acquire+0x8>)
 800df5e:	f000 ba00 	b.w	800e362 <__retarget_lock_acquire_recursive>
 800df62:	bf00      	nop
 800df64:	20000a9d 	.word	0x20000a9d

0800df68 <__sfp_lock_release>:
 800df68:	4801      	ldr	r0, [pc, #4]	@ (800df70 <__sfp_lock_release+0x8>)
 800df6a:	f000 b9fb 	b.w	800e364 <__retarget_lock_release_recursive>
 800df6e:	bf00      	nop
 800df70:	20000a9d 	.word	0x20000a9d

0800df74 <__sinit>:
 800df74:	b510      	push	{r4, lr}
 800df76:	4604      	mov	r4, r0
 800df78:	f7ff fff0 	bl	800df5c <__sfp_lock_acquire>
 800df7c:	6a23      	ldr	r3, [r4, #32]
 800df7e:	b11b      	cbz	r3, 800df88 <__sinit+0x14>
 800df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df84:	f7ff bff0 	b.w	800df68 <__sfp_lock_release>
 800df88:	4b04      	ldr	r3, [pc, #16]	@ (800df9c <__sinit+0x28>)
 800df8a:	6223      	str	r3, [r4, #32]
 800df8c:	4b04      	ldr	r3, [pc, #16]	@ (800dfa0 <__sinit+0x2c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1f5      	bne.n	800df80 <__sinit+0xc>
 800df94:	f7ff ffc4 	bl	800df20 <global_stdio_init.part.0>
 800df98:	e7f2      	b.n	800df80 <__sinit+0xc>
 800df9a:	bf00      	nop
 800df9c:	0800dee1 	.word	0x0800dee1
 800dfa0:	20000a94 	.word	0x20000a94

0800dfa4 <_fwalk_sglue>:
 800dfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	4688      	mov	r8, r1
 800dfac:	4614      	mov	r4, r2
 800dfae:	2600      	movs	r6, #0
 800dfb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfb4:	f1b9 0901 	subs.w	r9, r9, #1
 800dfb8:	d505      	bpl.n	800dfc6 <_fwalk_sglue+0x22>
 800dfba:	6824      	ldr	r4, [r4, #0]
 800dfbc:	2c00      	cmp	r4, #0
 800dfbe:	d1f7      	bne.n	800dfb0 <_fwalk_sglue+0xc>
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d907      	bls.n	800dfdc <_fwalk_sglue+0x38>
 800dfcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	d003      	beq.n	800dfdc <_fwalk_sglue+0x38>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4638      	mov	r0, r7
 800dfd8:	47c0      	blx	r8
 800dfda:	4306      	orrs	r6, r0
 800dfdc:	3568      	adds	r5, #104	@ 0x68
 800dfde:	e7e9      	b.n	800dfb4 <_fwalk_sglue+0x10>

0800dfe0 <iprintf>:
 800dfe0:	b40f      	push	{r0, r1, r2, r3}
 800dfe2:	b507      	push	{r0, r1, r2, lr}
 800dfe4:	4906      	ldr	r1, [pc, #24]	@ (800e000 <iprintf+0x20>)
 800dfe6:	ab04      	add	r3, sp, #16
 800dfe8:	6808      	ldr	r0, [r1, #0]
 800dfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfee:	6881      	ldr	r1, [r0, #8]
 800dff0:	9301      	str	r3, [sp, #4]
 800dff2:	f000 fad7 	bl	800e5a4 <_vfiprintf_r>
 800dff6:	b003      	add	sp, #12
 800dff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dffc:	b004      	add	sp, #16
 800dffe:	4770      	bx	lr
 800e000:	20000020 	.word	0x20000020

0800e004 <_puts_r>:
 800e004:	6a03      	ldr	r3, [r0, #32]
 800e006:	b570      	push	{r4, r5, r6, lr}
 800e008:	4605      	mov	r5, r0
 800e00a:	460e      	mov	r6, r1
 800e00c:	6884      	ldr	r4, [r0, #8]
 800e00e:	b90b      	cbnz	r3, 800e014 <_puts_r+0x10>
 800e010:	f7ff ffb0 	bl	800df74 <__sinit>
 800e014:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e016:	07db      	lsls	r3, r3, #31
 800e018:	d405      	bmi.n	800e026 <_puts_r+0x22>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	0598      	lsls	r0, r3, #22
 800e01e:	d402      	bmi.n	800e026 <_puts_r+0x22>
 800e020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e022:	f000 f99e 	bl	800e362 <__retarget_lock_acquire_recursive>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	0719      	lsls	r1, r3, #28
 800e02a:	d502      	bpl.n	800e032 <_puts_r+0x2e>
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d135      	bne.n	800e09e <_puts_r+0x9a>
 800e032:	4621      	mov	r1, r4
 800e034:	4628      	mov	r0, r5
 800e036:	f000 f8c5 	bl	800e1c4 <__swsetup_r>
 800e03a:	b380      	cbz	r0, 800e09e <_puts_r+0x9a>
 800e03c:	f04f 35ff 	mov.w	r5, #4294967295
 800e040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e042:	07da      	lsls	r2, r3, #31
 800e044:	d405      	bmi.n	800e052 <_puts_r+0x4e>
 800e046:	89a3      	ldrh	r3, [r4, #12]
 800e048:	059b      	lsls	r3, r3, #22
 800e04a:	d402      	bmi.n	800e052 <_puts_r+0x4e>
 800e04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e04e:	f000 f989 	bl	800e364 <__retarget_lock_release_recursive>
 800e052:	4628      	mov	r0, r5
 800e054:	bd70      	pop	{r4, r5, r6, pc}
 800e056:	2b00      	cmp	r3, #0
 800e058:	da04      	bge.n	800e064 <_puts_r+0x60>
 800e05a:	69a2      	ldr	r2, [r4, #24]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	dc17      	bgt.n	800e090 <_puts_r+0x8c>
 800e060:	290a      	cmp	r1, #10
 800e062:	d015      	beq.n	800e090 <_puts_r+0x8c>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	6022      	str	r2, [r4, #0]
 800e06a:	7019      	strb	r1, [r3, #0]
 800e06c:	68a3      	ldr	r3, [r4, #8]
 800e06e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e072:	3b01      	subs	r3, #1
 800e074:	60a3      	str	r3, [r4, #8]
 800e076:	2900      	cmp	r1, #0
 800e078:	d1ed      	bne.n	800e056 <_puts_r+0x52>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	da11      	bge.n	800e0a2 <_puts_r+0x9e>
 800e07e:	4622      	mov	r2, r4
 800e080:	210a      	movs	r1, #10
 800e082:	4628      	mov	r0, r5
 800e084:	f000 f85f 	bl	800e146 <__swbuf_r>
 800e088:	3001      	adds	r0, #1
 800e08a:	d0d7      	beq.n	800e03c <_puts_r+0x38>
 800e08c:	250a      	movs	r5, #10
 800e08e:	e7d7      	b.n	800e040 <_puts_r+0x3c>
 800e090:	4622      	mov	r2, r4
 800e092:	4628      	mov	r0, r5
 800e094:	f000 f857 	bl	800e146 <__swbuf_r>
 800e098:	3001      	adds	r0, #1
 800e09a:	d1e7      	bne.n	800e06c <_puts_r+0x68>
 800e09c:	e7ce      	b.n	800e03c <_puts_r+0x38>
 800e09e:	3e01      	subs	r6, #1
 800e0a0:	e7e4      	b.n	800e06c <_puts_r+0x68>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	6022      	str	r2, [r4, #0]
 800e0a8:	220a      	movs	r2, #10
 800e0aa:	701a      	strb	r2, [r3, #0]
 800e0ac:	e7ee      	b.n	800e08c <_puts_r+0x88>
	...

0800e0b0 <puts>:
 800e0b0:	4b02      	ldr	r3, [pc, #8]	@ (800e0bc <puts+0xc>)
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	f7ff bfa5 	b.w	800e004 <_puts_r>
 800e0ba:	bf00      	nop
 800e0bc:	20000020 	.word	0x20000020

0800e0c0 <__sread>:
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c8:	f000 f8fc 	bl	800e2c4 <_read_r>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	bfab      	itete	ge
 800e0d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0d4:	181b      	addge	r3, r3, r0
 800e0d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0da:	bfac      	ite	ge
 800e0dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0de:	81a3      	strhlt	r3, [r4, #12]
 800e0e0:	bd10      	pop	{r4, pc}

0800e0e2 <__swrite>:
 800e0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e6:	461f      	mov	r7, r3
 800e0e8:	898b      	ldrh	r3, [r1, #12]
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	05db      	lsls	r3, r3, #23
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	4616      	mov	r6, r2
 800e0f2:	d505      	bpl.n	800e100 <__swrite+0x1e>
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0fc:	f000 f8d0 	bl	800e2a0 <_lseek_r>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	4632      	mov	r2, r6
 800e104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e108:	81a3      	strh	r3, [r4, #12]
 800e10a:	4628      	mov	r0, r5
 800e10c:	463b      	mov	r3, r7
 800e10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e116:	f000 b8e7 	b.w	800e2e8 <_write_r>

0800e11a <__sseek>:
 800e11a:	b510      	push	{r4, lr}
 800e11c:	460c      	mov	r4, r1
 800e11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e122:	f000 f8bd 	bl	800e2a0 <_lseek_r>
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	bf15      	itete	ne
 800e12c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e12e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e136:	81a3      	strheq	r3, [r4, #12]
 800e138:	bf18      	it	ne
 800e13a:	81a3      	strhne	r3, [r4, #12]
 800e13c:	bd10      	pop	{r4, pc}

0800e13e <__sclose>:
 800e13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e142:	f000 b89d 	b.w	800e280 <_close_r>

0800e146 <__swbuf_r>:
 800e146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e148:	460e      	mov	r6, r1
 800e14a:	4614      	mov	r4, r2
 800e14c:	4605      	mov	r5, r0
 800e14e:	b118      	cbz	r0, 800e158 <__swbuf_r+0x12>
 800e150:	6a03      	ldr	r3, [r0, #32]
 800e152:	b90b      	cbnz	r3, 800e158 <__swbuf_r+0x12>
 800e154:	f7ff ff0e 	bl	800df74 <__sinit>
 800e158:	69a3      	ldr	r3, [r4, #24]
 800e15a:	60a3      	str	r3, [r4, #8]
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	071a      	lsls	r2, r3, #28
 800e160:	d501      	bpl.n	800e166 <__swbuf_r+0x20>
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	b943      	cbnz	r3, 800e178 <__swbuf_r+0x32>
 800e166:	4621      	mov	r1, r4
 800e168:	4628      	mov	r0, r5
 800e16a:	f000 f82b 	bl	800e1c4 <__swsetup_r>
 800e16e:	b118      	cbz	r0, 800e178 <__swbuf_r+0x32>
 800e170:	f04f 37ff 	mov.w	r7, #4294967295
 800e174:	4638      	mov	r0, r7
 800e176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	6922      	ldr	r2, [r4, #16]
 800e17c:	b2f6      	uxtb	r6, r6
 800e17e:	1a98      	subs	r0, r3, r2
 800e180:	6963      	ldr	r3, [r4, #20]
 800e182:	4637      	mov	r7, r6
 800e184:	4283      	cmp	r3, r0
 800e186:	dc05      	bgt.n	800e194 <__swbuf_r+0x4e>
 800e188:	4621      	mov	r1, r4
 800e18a:	4628      	mov	r0, r5
 800e18c:	f000 fd34 	bl	800ebf8 <_fflush_r>
 800e190:	2800      	cmp	r0, #0
 800e192:	d1ed      	bne.n	800e170 <__swbuf_r+0x2a>
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	3b01      	subs	r3, #1
 800e198:	60a3      	str	r3, [r4, #8]
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	6022      	str	r2, [r4, #0]
 800e1a0:	701e      	strb	r6, [r3, #0]
 800e1a2:	6962      	ldr	r2, [r4, #20]
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d004      	beq.n	800e1b4 <__swbuf_r+0x6e>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	07db      	lsls	r3, r3, #31
 800e1ae:	d5e1      	bpl.n	800e174 <__swbuf_r+0x2e>
 800e1b0:	2e0a      	cmp	r6, #10
 800e1b2:	d1df      	bne.n	800e174 <__swbuf_r+0x2e>
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f000 fd1e 	bl	800ebf8 <_fflush_r>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d0d9      	beq.n	800e174 <__swbuf_r+0x2e>
 800e1c0:	e7d6      	b.n	800e170 <__swbuf_r+0x2a>
	...

0800e1c4 <__swsetup_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4b29      	ldr	r3, [pc, #164]	@ (800e26c <__swsetup_r+0xa8>)
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	6818      	ldr	r0, [r3, #0]
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	b118      	cbz	r0, 800e1d8 <__swsetup_r+0x14>
 800e1d0:	6a03      	ldr	r3, [r0, #32]
 800e1d2:	b90b      	cbnz	r3, 800e1d8 <__swsetup_r+0x14>
 800e1d4:	f7ff fece 	bl	800df74 <__sinit>
 800e1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1dc:	0719      	lsls	r1, r3, #28
 800e1de:	d422      	bmi.n	800e226 <__swsetup_r+0x62>
 800e1e0:	06da      	lsls	r2, r3, #27
 800e1e2:	d407      	bmi.n	800e1f4 <__swsetup_r+0x30>
 800e1e4:	2209      	movs	r2, #9
 800e1e6:	602a      	str	r2, [r5, #0]
 800e1e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	e033      	b.n	800e25c <__swsetup_r+0x98>
 800e1f4:	0758      	lsls	r0, r3, #29
 800e1f6:	d512      	bpl.n	800e21e <__swsetup_r+0x5a>
 800e1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1fa:	b141      	cbz	r1, 800e20e <__swsetup_r+0x4a>
 800e1fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e200:	4299      	cmp	r1, r3
 800e202:	d002      	beq.n	800e20a <__swsetup_r+0x46>
 800e204:	4628      	mov	r0, r5
 800e206:	f000 f8af 	bl	800e368 <_free_r>
 800e20a:	2300      	movs	r3, #0
 800e20c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e214:	81a3      	strh	r3, [r4, #12]
 800e216:	2300      	movs	r3, #0
 800e218:	6063      	str	r3, [r4, #4]
 800e21a:	6923      	ldr	r3, [r4, #16]
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	f043 0308 	orr.w	r3, r3, #8
 800e224:	81a3      	strh	r3, [r4, #12]
 800e226:	6923      	ldr	r3, [r4, #16]
 800e228:	b94b      	cbnz	r3, 800e23e <__swsetup_r+0x7a>
 800e22a:	89a3      	ldrh	r3, [r4, #12]
 800e22c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e234:	d003      	beq.n	800e23e <__swsetup_r+0x7a>
 800e236:	4621      	mov	r1, r4
 800e238:	4628      	mov	r0, r5
 800e23a:	f000 fd2a 	bl	800ec92 <__smakebuf_r>
 800e23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e242:	f013 0201 	ands.w	r2, r3, #1
 800e246:	d00a      	beq.n	800e25e <__swsetup_r+0x9a>
 800e248:	2200      	movs	r2, #0
 800e24a:	60a2      	str	r2, [r4, #8]
 800e24c:	6962      	ldr	r2, [r4, #20]
 800e24e:	4252      	negs	r2, r2
 800e250:	61a2      	str	r2, [r4, #24]
 800e252:	6922      	ldr	r2, [r4, #16]
 800e254:	b942      	cbnz	r2, 800e268 <__swsetup_r+0xa4>
 800e256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e25a:	d1c5      	bne.n	800e1e8 <__swsetup_r+0x24>
 800e25c:	bd38      	pop	{r3, r4, r5, pc}
 800e25e:	0799      	lsls	r1, r3, #30
 800e260:	bf58      	it	pl
 800e262:	6962      	ldrpl	r2, [r4, #20]
 800e264:	60a2      	str	r2, [r4, #8]
 800e266:	e7f4      	b.n	800e252 <__swsetup_r+0x8e>
 800e268:	2000      	movs	r0, #0
 800e26a:	e7f7      	b.n	800e25c <__swsetup_r+0x98>
 800e26c:	20000020 	.word	0x20000020

0800e270 <memset>:
 800e270:	4603      	mov	r3, r0
 800e272:	4402      	add	r2, r0
 800e274:	4293      	cmp	r3, r2
 800e276:	d100      	bne.n	800e27a <memset+0xa>
 800e278:	4770      	bx	lr
 800e27a:	f803 1b01 	strb.w	r1, [r3], #1
 800e27e:	e7f9      	b.n	800e274 <memset+0x4>

0800e280 <_close_r>:
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	2300      	movs	r3, #0
 800e284:	4d05      	ldr	r5, [pc, #20]	@ (800e29c <_close_r+0x1c>)
 800e286:	4604      	mov	r4, r0
 800e288:	4608      	mov	r0, r1
 800e28a:	602b      	str	r3, [r5, #0]
 800e28c:	f7f7 f95f 	bl	800554e <_close>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_close_r+0x1a>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_close_r+0x1a>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	20000a98 	.word	0x20000a98

0800e2a0 <_lseek_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	4608      	mov	r0, r1
 800e2a6:	4611      	mov	r1, r2
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4d05      	ldr	r5, [pc, #20]	@ (800e2c0 <_lseek_r+0x20>)
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7f7 f971 	bl	8005596 <_lseek>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_lseek_r+0x1e>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_lseek_r+0x1e>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	20000a98 	.word	0x20000a98

0800e2c4 <_read_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	4d05      	ldr	r5, [pc, #20]	@ (800e2e4 <_read_r+0x20>)
 800e2d0:	602a      	str	r2, [r5, #0]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f7f7 f902 	bl	80054dc <_read>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_read_r+0x1e>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_read_r+0x1e>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20000a98 	.word	0x20000a98

0800e2e8 <_write_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	4d05      	ldr	r5, [pc, #20]	@ (800e308 <_write_r+0x20>)
 800e2f4:	602a      	str	r2, [r5, #0]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	f7f7 f90d 	bl	8005516 <_write>
 800e2fc:	1c43      	adds	r3, r0, #1
 800e2fe:	d102      	bne.n	800e306 <_write_r+0x1e>
 800e300:	682b      	ldr	r3, [r5, #0]
 800e302:	b103      	cbz	r3, 800e306 <_write_r+0x1e>
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	bd38      	pop	{r3, r4, r5, pc}
 800e308:	20000a98 	.word	0x20000a98

0800e30c <__errno>:
 800e30c:	4b01      	ldr	r3, [pc, #4]	@ (800e314 <__errno+0x8>)
 800e30e:	6818      	ldr	r0, [r3, #0]
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	20000020 	.word	0x20000020

0800e318 <__libc_init_array>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	2600      	movs	r6, #0
 800e31c:	4d0c      	ldr	r5, [pc, #48]	@ (800e350 <__libc_init_array+0x38>)
 800e31e:	4c0d      	ldr	r4, [pc, #52]	@ (800e354 <__libc_init_array+0x3c>)
 800e320:	1b64      	subs	r4, r4, r5
 800e322:	10a4      	asrs	r4, r4, #2
 800e324:	42a6      	cmp	r6, r4
 800e326:	d109      	bne.n	800e33c <__libc_init_array+0x24>
 800e328:	f000 fd30 	bl	800ed8c <_init>
 800e32c:	2600      	movs	r6, #0
 800e32e:	4d0a      	ldr	r5, [pc, #40]	@ (800e358 <__libc_init_array+0x40>)
 800e330:	4c0a      	ldr	r4, [pc, #40]	@ (800e35c <__libc_init_array+0x44>)
 800e332:	1b64      	subs	r4, r4, r5
 800e334:	10a4      	asrs	r4, r4, #2
 800e336:	42a6      	cmp	r6, r4
 800e338:	d105      	bne.n	800e346 <__libc_init_array+0x2e>
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e340:	4798      	blx	r3
 800e342:	3601      	adds	r6, #1
 800e344:	e7ee      	b.n	800e324 <__libc_init_array+0xc>
 800e346:	f855 3b04 	ldr.w	r3, [r5], #4
 800e34a:	4798      	blx	r3
 800e34c:	3601      	adds	r6, #1
 800e34e:	e7f2      	b.n	800e336 <__libc_init_array+0x1e>
 800e350:	0800ee7c 	.word	0x0800ee7c
 800e354:	0800ee7c 	.word	0x0800ee7c
 800e358:	0800ee7c 	.word	0x0800ee7c
 800e35c:	0800ee80 	.word	0x0800ee80

0800e360 <__retarget_lock_init_recursive>:
 800e360:	4770      	bx	lr

0800e362 <__retarget_lock_acquire_recursive>:
 800e362:	4770      	bx	lr

0800e364 <__retarget_lock_release_recursive>:
 800e364:	4770      	bx	lr
	...

0800e368 <_free_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4605      	mov	r5, r0
 800e36c:	2900      	cmp	r1, #0
 800e36e:	d040      	beq.n	800e3f2 <_free_r+0x8a>
 800e370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e374:	1f0c      	subs	r4, r1, #4
 800e376:	2b00      	cmp	r3, #0
 800e378:	bfb8      	it	lt
 800e37a:	18e4      	addlt	r4, r4, r3
 800e37c:	f000 f8de 	bl	800e53c <__malloc_lock>
 800e380:	4a1c      	ldr	r2, [pc, #112]	@ (800e3f4 <_free_r+0x8c>)
 800e382:	6813      	ldr	r3, [r2, #0]
 800e384:	b933      	cbnz	r3, 800e394 <_free_r+0x2c>
 800e386:	6063      	str	r3, [r4, #4]
 800e388:	6014      	str	r4, [r2, #0]
 800e38a:	4628      	mov	r0, r5
 800e38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e390:	f000 b8da 	b.w	800e548 <__malloc_unlock>
 800e394:	42a3      	cmp	r3, r4
 800e396:	d908      	bls.n	800e3aa <_free_r+0x42>
 800e398:	6820      	ldr	r0, [r4, #0]
 800e39a:	1821      	adds	r1, r4, r0
 800e39c:	428b      	cmp	r3, r1
 800e39e:	bf01      	itttt	eq
 800e3a0:	6819      	ldreq	r1, [r3, #0]
 800e3a2:	685b      	ldreq	r3, [r3, #4]
 800e3a4:	1809      	addeq	r1, r1, r0
 800e3a6:	6021      	streq	r1, [r4, #0]
 800e3a8:	e7ed      	b.n	800e386 <_free_r+0x1e>
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	b10b      	cbz	r3, 800e3b4 <_free_r+0x4c>
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	d9fa      	bls.n	800e3aa <_free_r+0x42>
 800e3b4:	6811      	ldr	r1, [r2, #0]
 800e3b6:	1850      	adds	r0, r2, r1
 800e3b8:	42a0      	cmp	r0, r4
 800e3ba:	d10b      	bne.n	800e3d4 <_free_r+0x6c>
 800e3bc:	6820      	ldr	r0, [r4, #0]
 800e3be:	4401      	add	r1, r0
 800e3c0:	1850      	adds	r0, r2, r1
 800e3c2:	4283      	cmp	r3, r0
 800e3c4:	6011      	str	r1, [r2, #0]
 800e3c6:	d1e0      	bne.n	800e38a <_free_r+0x22>
 800e3c8:	6818      	ldr	r0, [r3, #0]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	4408      	add	r0, r1
 800e3ce:	6010      	str	r0, [r2, #0]
 800e3d0:	6053      	str	r3, [r2, #4]
 800e3d2:	e7da      	b.n	800e38a <_free_r+0x22>
 800e3d4:	d902      	bls.n	800e3dc <_free_r+0x74>
 800e3d6:	230c      	movs	r3, #12
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	e7d6      	b.n	800e38a <_free_r+0x22>
 800e3dc:	6820      	ldr	r0, [r4, #0]
 800e3de:	1821      	adds	r1, r4, r0
 800e3e0:	428b      	cmp	r3, r1
 800e3e2:	bf01      	itttt	eq
 800e3e4:	6819      	ldreq	r1, [r3, #0]
 800e3e6:	685b      	ldreq	r3, [r3, #4]
 800e3e8:	1809      	addeq	r1, r1, r0
 800e3ea:	6021      	streq	r1, [r4, #0]
 800e3ec:	6063      	str	r3, [r4, #4]
 800e3ee:	6054      	str	r4, [r2, #4]
 800e3f0:	e7cb      	b.n	800e38a <_free_r+0x22>
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	20000aa4 	.word	0x20000aa4

0800e3f8 <sbrk_aligned>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	4e0f      	ldr	r6, [pc, #60]	@ (800e438 <sbrk_aligned+0x40>)
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	6831      	ldr	r1, [r6, #0]
 800e400:	4605      	mov	r5, r0
 800e402:	b911      	cbnz	r1, 800e40a <sbrk_aligned+0x12>
 800e404:	f000 fca4 	bl	800ed50 <_sbrk_r>
 800e408:	6030      	str	r0, [r6, #0]
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f000 fc9f 	bl	800ed50 <_sbrk_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d103      	bne.n	800e41e <sbrk_aligned+0x26>
 800e416:	f04f 34ff 	mov.w	r4, #4294967295
 800e41a:	4620      	mov	r0, r4
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
 800e41e:	1cc4      	adds	r4, r0, #3
 800e420:	f024 0403 	bic.w	r4, r4, #3
 800e424:	42a0      	cmp	r0, r4
 800e426:	d0f8      	beq.n	800e41a <sbrk_aligned+0x22>
 800e428:	1a21      	subs	r1, r4, r0
 800e42a:	4628      	mov	r0, r5
 800e42c:	f000 fc90 	bl	800ed50 <_sbrk_r>
 800e430:	3001      	adds	r0, #1
 800e432:	d1f2      	bne.n	800e41a <sbrk_aligned+0x22>
 800e434:	e7ef      	b.n	800e416 <sbrk_aligned+0x1e>
 800e436:	bf00      	nop
 800e438:	20000aa0 	.word	0x20000aa0

0800e43c <_malloc_r>:
 800e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e440:	1ccd      	adds	r5, r1, #3
 800e442:	f025 0503 	bic.w	r5, r5, #3
 800e446:	3508      	adds	r5, #8
 800e448:	2d0c      	cmp	r5, #12
 800e44a:	bf38      	it	cc
 800e44c:	250c      	movcc	r5, #12
 800e44e:	2d00      	cmp	r5, #0
 800e450:	4606      	mov	r6, r0
 800e452:	db01      	blt.n	800e458 <_malloc_r+0x1c>
 800e454:	42a9      	cmp	r1, r5
 800e456:	d904      	bls.n	800e462 <_malloc_r+0x26>
 800e458:	230c      	movs	r3, #12
 800e45a:	6033      	str	r3, [r6, #0]
 800e45c:	2000      	movs	r0, #0
 800e45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e538 <_malloc_r+0xfc>
 800e466:	f000 f869 	bl	800e53c <__malloc_lock>
 800e46a:	f8d8 3000 	ldr.w	r3, [r8]
 800e46e:	461c      	mov	r4, r3
 800e470:	bb44      	cbnz	r4, 800e4c4 <_malloc_r+0x88>
 800e472:	4629      	mov	r1, r5
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff ffbf 	bl	800e3f8 <sbrk_aligned>
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	4604      	mov	r4, r0
 800e47e:	d158      	bne.n	800e532 <_malloc_r+0xf6>
 800e480:	f8d8 4000 	ldr.w	r4, [r8]
 800e484:	4627      	mov	r7, r4
 800e486:	2f00      	cmp	r7, #0
 800e488:	d143      	bne.n	800e512 <_malloc_r+0xd6>
 800e48a:	2c00      	cmp	r4, #0
 800e48c:	d04b      	beq.n	800e526 <_malloc_r+0xea>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	4639      	mov	r1, r7
 800e492:	4630      	mov	r0, r6
 800e494:	eb04 0903 	add.w	r9, r4, r3
 800e498:	f000 fc5a 	bl	800ed50 <_sbrk_r>
 800e49c:	4581      	cmp	r9, r0
 800e49e:	d142      	bne.n	800e526 <_malloc_r+0xea>
 800e4a0:	6821      	ldr	r1, [r4, #0]
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	1a6d      	subs	r5, r5, r1
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	f7ff ffa6 	bl	800e3f8 <sbrk_aligned>
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	d03a      	beq.n	800e526 <_malloc_r+0xea>
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	442b      	add	r3, r5
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	bb62      	cbnz	r2, 800e518 <_malloc_r+0xdc>
 800e4be:	f8c8 7000 	str.w	r7, [r8]
 800e4c2:	e00f      	b.n	800e4e4 <_malloc_r+0xa8>
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	1b52      	subs	r2, r2, r5
 800e4c8:	d420      	bmi.n	800e50c <_malloc_r+0xd0>
 800e4ca:	2a0b      	cmp	r2, #11
 800e4cc:	d917      	bls.n	800e4fe <_malloc_r+0xc2>
 800e4ce:	1961      	adds	r1, r4, r5
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	6025      	str	r5, [r4, #0]
 800e4d4:	bf18      	it	ne
 800e4d6:	6059      	strne	r1, [r3, #4]
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	bf08      	it	eq
 800e4dc:	f8c8 1000 	streq.w	r1, [r8]
 800e4e0:	5162      	str	r2, [r4, r5]
 800e4e2:	604b      	str	r3, [r1, #4]
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f000 f82f 	bl	800e548 <__malloc_unlock>
 800e4ea:	f104 000b 	add.w	r0, r4, #11
 800e4ee:	1d23      	adds	r3, r4, #4
 800e4f0:	f020 0007 	bic.w	r0, r0, #7
 800e4f4:	1ac2      	subs	r2, r0, r3
 800e4f6:	bf1c      	itt	ne
 800e4f8:	1a1b      	subne	r3, r3, r0
 800e4fa:	50a3      	strne	r3, [r4, r2]
 800e4fc:	e7af      	b.n	800e45e <_malloc_r+0x22>
 800e4fe:	6862      	ldr	r2, [r4, #4]
 800e500:	42a3      	cmp	r3, r4
 800e502:	bf0c      	ite	eq
 800e504:	f8c8 2000 	streq.w	r2, [r8]
 800e508:	605a      	strne	r2, [r3, #4]
 800e50a:	e7eb      	b.n	800e4e4 <_malloc_r+0xa8>
 800e50c:	4623      	mov	r3, r4
 800e50e:	6864      	ldr	r4, [r4, #4]
 800e510:	e7ae      	b.n	800e470 <_malloc_r+0x34>
 800e512:	463c      	mov	r4, r7
 800e514:	687f      	ldr	r7, [r7, #4]
 800e516:	e7b6      	b.n	800e486 <_malloc_r+0x4a>
 800e518:	461a      	mov	r2, r3
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	d1fb      	bne.n	800e518 <_malloc_r+0xdc>
 800e520:	2300      	movs	r3, #0
 800e522:	6053      	str	r3, [r2, #4]
 800e524:	e7de      	b.n	800e4e4 <_malloc_r+0xa8>
 800e526:	230c      	movs	r3, #12
 800e528:	4630      	mov	r0, r6
 800e52a:	6033      	str	r3, [r6, #0]
 800e52c:	f000 f80c 	bl	800e548 <__malloc_unlock>
 800e530:	e794      	b.n	800e45c <_malloc_r+0x20>
 800e532:	6005      	str	r5, [r0, #0]
 800e534:	e7d6      	b.n	800e4e4 <_malloc_r+0xa8>
 800e536:	bf00      	nop
 800e538:	20000aa4 	.word	0x20000aa4

0800e53c <__malloc_lock>:
 800e53c:	4801      	ldr	r0, [pc, #4]	@ (800e544 <__malloc_lock+0x8>)
 800e53e:	f7ff bf10 	b.w	800e362 <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20000a9c 	.word	0x20000a9c

0800e548 <__malloc_unlock>:
 800e548:	4801      	ldr	r0, [pc, #4]	@ (800e550 <__malloc_unlock+0x8>)
 800e54a:	f7ff bf0b 	b.w	800e364 <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20000a9c 	.word	0x20000a9c

0800e554 <__sfputc_r>:
 800e554:	6893      	ldr	r3, [r2, #8]
 800e556:	b410      	push	{r4}
 800e558:	3b01      	subs	r3, #1
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	6093      	str	r3, [r2, #8]
 800e55e:	da07      	bge.n	800e570 <__sfputc_r+0x1c>
 800e560:	6994      	ldr	r4, [r2, #24]
 800e562:	42a3      	cmp	r3, r4
 800e564:	db01      	blt.n	800e56a <__sfputc_r+0x16>
 800e566:	290a      	cmp	r1, #10
 800e568:	d102      	bne.n	800e570 <__sfputc_r+0x1c>
 800e56a:	bc10      	pop	{r4}
 800e56c:	f7ff bdeb 	b.w	800e146 <__swbuf_r>
 800e570:	6813      	ldr	r3, [r2, #0]
 800e572:	1c58      	adds	r0, r3, #1
 800e574:	6010      	str	r0, [r2, #0]
 800e576:	7019      	strb	r1, [r3, #0]
 800e578:	4608      	mov	r0, r1
 800e57a:	bc10      	pop	{r4}
 800e57c:	4770      	bx	lr

0800e57e <__sfputs_r>:
 800e57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	4614      	mov	r4, r2
 800e586:	18d5      	adds	r5, r2, r3
 800e588:	42ac      	cmp	r4, r5
 800e58a:	d101      	bne.n	800e590 <__sfputs_r+0x12>
 800e58c:	2000      	movs	r0, #0
 800e58e:	e007      	b.n	800e5a0 <__sfputs_r+0x22>
 800e590:	463a      	mov	r2, r7
 800e592:	4630      	mov	r0, r6
 800e594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e598:	f7ff ffdc 	bl	800e554 <__sfputc_r>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d1f3      	bne.n	800e588 <__sfputs_r+0xa>
 800e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5a4 <_vfiprintf_r>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	460d      	mov	r5, r1
 800e5aa:	4614      	mov	r4, r2
 800e5ac:	4698      	mov	r8, r3
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	b09d      	sub	sp, #116	@ 0x74
 800e5b2:	b118      	cbz	r0, 800e5bc <_vfiprintf_r+0x18>
 800e5b4:	6a03      	ldr	r3, [r0, #32]
 800e5b6:	b90b      	cbnz	r3, 800e5bc <_vfiprintf_r+0x18>
 800e5b8:	f7ff fcdc 	bl	800df74 <__sinit>
 800e5bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5be:	07d9      	lsls	r1, r3, #31
 800e5c0:	d405      	bmi.n	800e5ce <_vfiprintf_r+0x2a>
 800e5c2:	89ab      	ldrh	r3, [r5, #12]
 800e5c4:	059a      	lsls	r2, r3, #22
 800e5c6:	d402      	bmi.n	800e5ce <_vfiprintf_r+0x2a>
 800e5c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ca:	f7ff feca 	bl	800e362 <__retarget_lock_acquire_recursive>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	071b      	lsls	r3, r3, #28
 800e5d2:	d501      	bpl.n	800e5d8 <_vfiprintf_r+0x34>
 800e5d4:	692b      	ldr	r3, [r5, #16]
 800e5d6:	b99b      	cbnz	r3, 800e600 <_vfiprintf_r+0x5c>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f7ff fdf2 	bl	800e1c4 <__swsetup_r>
 800e5e0:	b170      	cbz	r0, 800e600 <_vfiprintf_r+0x5c>
 800e5e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5e4:	07dc      	lsls	r4, r3, #31
 800e5e6:	d504      	bpl.n	800e5f2 <_vfiprintf_r+0x4e>
 800e5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ec:	b01d      	add	sp, #116	@ 0x74
 800e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	0598      	lsls	r0, r3, #22
 800e5f6:	d4f7      	bmi.n	800e5e8 <_vfiprintf_r+0x44>
 800e5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5fa:	f7ff feb3 	bl	800e364 <__retarget_lock_release_recursive>
 800e5fe:	e7f3      	b.n	800e5e8 <_vfiprintf_r+0x44>
 800e600:	2300      	movs	r3, #0
 800e602:	9309      	str	r3, [sp, #36]	@ 0x24
 800e604:	2320      	movs	r3, #32
 800e606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e60a:	2330      	movs	r3, #48	@ 0x30
 800e60c:	f04f 0901 	mov.w	r9, #1
 800e610:	f8cd 800c 	str.w	r8, [sp, #12]
 800e614:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e7c0 <_vfiprintf_r+0x21c>
 800e618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e61c:	4623      	mov	r3, r4
 800e61e:	469a      	mov	sl, r3
 800e620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e624:	b10a      	cbz	r2, 800e62a <_vfiprintf_r+0x86>
 800e626:	2a25      	cmp	r2, #37	@ 0x25
 800e628:	d1f9      	bne.n	800e61e <_vfiprintf_r+0x7a>
 800e62a:	ebba 0b04 	subs.w	fp, sl, r4
 800e62e:	d00b      	beq.n	800e648 <_vfiprintf_r+0xa4>
 800e630:	465b      	mov	r3, fp
 800e632:	4622      	mov	r2, r4
 800e634:	4629      	mov	r1, r5
 800e636:	4630      	mov	r0, r6
 800e638:	f7ff ffa1 	bl	800e57e <__sfputs_r>
 800e63c:	3001      	adds	r0, #1
 800e63e:	f000 80a7 	beq.w	800e790 <_vfiprintf_r+0x1ec>
 800e642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e644:	445a      	add	r2, fp
 800e646:	9209      	str	r2, [sp, #36]	@ 0x24
 800e648:	f89a 3000 	ldrb.w	r3, [sl]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 809f 	beq.w	800e790 <_vfiprintf_r+0x1ec>
 800e652:	2300      	movs	r3, #0
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e65c:	f10a 0a01 	add.w	sl, sl, #1
 800e660:	9304      	str	r3, [sp, #16]
 800e662:	9307      	str	r3, [sp, #28]
 800e664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e668:	931a      	str	r3, [sp, #104]	@ 0x68
 800e66a:	4654      	mov	r4, sl
 800e66c:	2205      	movs	r2, #5
 800e66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e672:	4853      	ldr	r0, [pc, #332]	@ (800e7c0 <_vfiprintf_r+0x21c>)
 800e674:	f000 fb7c 	bl	800ed70 <memchr>
 800e678:	9a04      	ldr	r2, [sp, #16]
 800e67a:	b9d8      	cbnz	r0, 800e6b4 <_vfiprintf_r+0x110>
 800e67c:	06d1      	lsls	r1, r2, #27
 800e67e:	bf44      	itt	mi
 800e680:	2320      	movmi	r3, #32
 800e682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e686:	0713      	lsls	r3, r2, #28
 800e688:	bf44      	itt	mi
 800e68a:	232b      	movmi	r3, #43	@ 0x2b
 800e68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e690:	f89a 3000 	ldrb.w	r3, [sl]
 800e694:	2b2a      	cmp	r3, #42	@ 0x2a
 800e696:	d015      	beq.n	800e6c4 <_vfiprintf_r+0x120>
 800e698:	4654      	mov	r4, sl
 800e69a:	2000      	movs	r0, #0
 800e69c:	f04f 0c0a 	mov.w	ip, #10
 800e6a0:	9a07      	ldr	r2, [sp, #28]
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6a8:	3b30      	subs	r3, #48	@ 0x30
 800e6aa:	2b09      	cmp	r3, #9
 800e6ac:	d94b      	bls.n	800e746 <_vfiprintf_r+0x1a2>
 800e6ae:	b1b0      	cbz	r0, 800e6de <_vfiprintf_r+0x13a>
 800e6b0:	9207      	str	r2, [sp, #28]
 800e6b2:	e014      	b.n	800e6de <_vfiprintf_r+0x13a>
 800e6b4:	eba0 0308 	sub.w	r3, r0, r8
 800e6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	46a2      	mov	sl, r4
 800e6c0:	9304      	str	r3, [sp, #16]
 800e6c2:	e7d2      	b.n	800e66a <_vfiprintf_r+0xc6>
 800e6c4:	9b03      	ldr	r3, [sp, #12]
 800e6c6:	1d19      	adds	r1, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	9103      	str	r1, [sp, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfbb      	ittet	lt
 800e6d0:	425b      	neglt	r3, r3
 800e6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e6d6:	9307      	strge	r3, [sp, #28]
 800e6d8:	9307      	strlt	r3, [sp, #28]
 800e6da:	bfb8      	it	lt
 800e6dc:	9204      	strlt	r2, [sp, #16]
 800e6de:	7823      	ldrb	r3, [r4, #0]
 800e6e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6e2:	d10a      	bne.n	800e6fa <_vfiprintf_r+0x156>
 800e6e4:	7863      	ldrb	r3, [r4, #1]
 800e6e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6e8:	d132      	bne.n	800e750 <_vfiprintf_r+0x1ac>
 800e6ea:	9b03      	ldr	r3, [sp, #12]
 800e6ec:	3402      	adds	r4, #2
 800e6ee:	1d1a      	adds	r2, r3, #4
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	9203      	str	r2, [sp, #12]
 800e6f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e7c4 <_vfiprintf_r+0x220>
 800e6fe:	2203      	movs	r2, #3
 800e700:	4650      	mov	r0, sl
 800e702:	7821      	ldrb	r1, [r4, #0]
 800e704:	f000 fb34 	bl	800ed70 <memchr>
 800e708:	b138      	cbz	r0, 800e71a <_vfiprintf_r+0x176>
 800e70a:	2240      	movs	r2, #64	@ 0x40
 800e70c:	9b04      	ldr	r3, [sp, #16]
 800e70e:	eba0 000a 	sub.w	r0, r0, sl
 800e712:	4082      	lsls	r2, r0
 800e714:	4313      	orrs	r3, r2
 800e716:	3401      	adds	r4, #1
 800e718:	9304      	str	r3, [sp, #16]
 800e71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71e:	2206      	movs	r2, #6
 800e720:	4829      	ldr	r0, [pc, #164]	@ (800e7c8 <_vfiprintf_r+0x224>)
 800e722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e726:	f000 fb23 	bl	800ed70 <memchr>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d03f      	beq.n	800e7ae <_vfiprintf_r+0x20a>
 800e72e:	4b27      	ldr	r3, [pc, #156]	@ (800e7cc <_vfiprintf_r+0x228>)
 800e730:	bb1b      	cbnz	r3, 800e77a <_vfiprintf_r+0x1d6>
 800e732:	9b03      	ldr	r3, [sp, #12]
 800e734:	3307      	adds	r3, #7
 800e736:	f023 0307 	bic.w	r3, r3, #7
 800e73a:	3308      	adds	r3, #8
 800e73c:	9303      	str	r3, [sp, #12]
 800e73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e740:	443b      	add	r3, r7
 800e742:	9309      	str	r3, [sp, #36]	@ 0x24
 800e744:	e76a      	b.n	800e61c <_vfiprintf_r+0x78>
 800e746:	460c      	mov	r4, r1
 800e748:	2001      	movs	r0, #1
 800e74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e74e:	e7a8      	b.n	800e6a2 <_vfiprintf_r+0xfe>
 800e750:	2300      	movs	r3, #0
 800e752:	f04f 0c0a 	mov.w	ip, #10
 800e756:	4619      	mov	r1, r3
 800e758:	3401      	adds	r4, #1
 800e75a:	9305      	str	r3, [sp, #20]
 800e75c:	4620      	mov	r0, r4
 800e75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e762:	3a30      	subs	r2, #48	@ 0x30
 800e764:	2a09      	cmp	r2, #9
 800e766:	d903      	bls.n	800e770 <_vfiprintf_r+0x1cc>
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0c6      	beq.n	800e6fa <_vfiprintf_r+0x156>
 800e76c:	9105      	str	r1, [sp, #20]
 800e76e:	e7c4      	b.n	800e6fa <_vfiprintf_r+0x156>
 800e770:	4604      	mov	r4, r0
 800e772:	2301      	movs	r3, #1
 800e774:	fb0c 2101 	mla	r1, ip, r1, r2
 800e778:	e7f0      	b.n	800e75c <_vfiprintf_r+0x1b8>
 800e77a:	ab03      	add	r3, sp, #12
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	462a      	mov	r2, r5
 800e780:	4630      	mov	r0, r6
 800e782:	4b13      	ldr	r3, [pc, #76]	@ (800e7d0 <_vfiprintf_r+0x22c>)
 800e784:	a904      	add	r1, sp, #16
 800e786:	f3af 8000 	nop.w
 800e78a:	4607      	mov	r7, r0
 800e78c:	1c78      	adds	r0, r7, #1
 800e78e:	d1d6      	bne.n	800e73e <_vfiprintf_r+0x19a>
 800e790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e792:	07d9      	lsls	r1, r3, #31
 800e794:	d405      	bmi.n	800e7a2 <_vfiprintf_r+0x1fe>
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	059a      	lsls	r2, r3, #22
 800e79a:	d402      	bmi.n	800e7a2 <_vfiprintf_r+0x1fe>
 800e79c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e79e:	f7ff fde1 	bl	800e364 <__retarget_lock_release_recursive>
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	065b      	lsls	r3, r3, #25
 800e7a6:	f53f af1f 	bmi.w	800e5e8 <_vfiprintf_r+0x44>
 800e7aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7ac:	e71e      	b.n	800e5ec <_vfiprintf_r+0x48>
 800e7ae:	ab03      	add	r3, sp, #12
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	462a      	mov	r2, r5
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4b06      	ldr	r3, [pc, #24]	@ (800e7d0 <_vfiprintf_r+0x22c>)
 800e7b8:	a904      	add	r1, sp, #16
 800e7ba:	f000 f87d 	bl	800e8b8 <_printf_i>
 800e7be:	e7e4      	b.n	800e78a <_vfiprintf_r+0x1e6>
 800e7c0:	0800ee46 	.word	0x0800ee46
 800e7c4:	0800ee4c 	.word	0x0800ee4c
 800e7c8:	0800ee50 	.word	0x0800ee50
 800e7cc:	00000000 	.word	0x00000000
 800e7d0:	0800e57f 	.word	0x0800e57f

0800e7d4 <_printf_common>:
 800e7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d8:	4616      	mov	r6, r2
 800e7da:	4698      	mov	r8, r3
 800e7dc:	688a      	ldr	r2, [r1, #8]
 800e7de:	690b      	ldr	r3, [r1, #16]
 800e7e0:	4607      	mov	r7, r0
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	bfb8      	it	lt
 800e7e6:	4613      	movlt	r3, r2
 800e7e8:	6033      	str	r3, [r6, #0]
 800e7ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7f4:	b10a      	cbz	r2, 800e7fa <_printf_common+0x26>
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	6033      	str	r3, [r6, #0]
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	0699      	lsls	r1, r3, #26
 800e7fe:	bf42      	ittt	mi
 800e800:	6833      	ldrmi	r3, [r6, #0]
 800e802:	3302      	addmi	r3, #2
 800e804:	6033      	strmi	r3, [r6, #0]
 800e806:	6825      	ldr	r5, [r4, #0]
 800e808:	f015 0506 	ands.w	r5, r5, #6
 800e80c:	d106      	bne.n	800e81c <_printf_common+0x48>
 800e80e:	f104 0a19 	add.w	sl, r4, #25
 800e812:	68e3      	ldr	r3, [r4, #12]
 800e814:	6832      	ldr	r2, [r6, #0]
 800e816:	1a9b      	subs	r3, r3, r2
 800e818:	42ab      	cmp	r3, r5
 800e81a:	dc2b      	bgt.n	800e874 <_printf_common+0xa0>
 800e81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e820:	6822      	ldr	r2, [r4, #0]
 800e822:	3b00      	subs	r3, #0
 800e824:	bf18      	it	ne
 800e826:	2301      	movne	r3, #1
 800e828:	0692      	lsls	r2, r2, #26
 800e82a:	d430      	bmi.n	800e88e <_printf_common+0xba>
 800e82c:	4641      	mov	r1, r8
 800e82e:	4638      	mov	r0, r7
 800e830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e834:	47c8      	blx	r9
 800e836:	3001      	adds	r0, #1
 800e838:	d023      	beq.n	800e882 <_printf_common+0xae>
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	6922      	ldr	r2, [r4, #16]
 800e83e:	f003 0306 	and.w	r3, r3, #6
 800e842:	2b04      	cmp	r3, #4
 800e844:	bf14      	ite	ne
 800e846:	2500      	movne	r5, #0
 800e848:	6833      	ldreq	r3, [r6, #0]
 800e84a:	f04f 0600 	mov.w	r6, #0
 800e84e:	bf08      	it	eq
 800e850:	68e5      	ldreq	r5, [r4, #12]
 800e852:	f104 041a 	add.w	r4, r4, #26
 800e856:	bf08      	it	eq
 800e858:	1aed      	subeq	r5, r5, r3
 800e85a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e85e:	bf08      	it	eq
 800e860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e864:	4293      	cmp	r3, r2
 800e866:	bfc4      	itt	gt
 800e868:	1a9b      	subgt	r3, r3, r2
 800e86a:	18ed      	addgt	r5, r5, r3
 800e86c:	42b5      	cmp	r5, r6
 800e86e:	d11a      	bne.n	800e8a6 <_printf_common+0xd2>
 800e870:	2000      	movs	r0, #0
 800e872:	e008      	b.n	800e886 <_printf_common+0xb2>
 800e874:	2301      	movs	r3, #1
 800e876:	4652      	mov	r2, sl
 800e878:	4641      	mov	r1, r8
 800e87a:	4638      	mov	r0, r7
 800e87c:	47c8      	blx	r9
 800e87e:	3001      	adds	r0, #1
 800e880:	d103      	bne.n	800e88a <_printf_common+0xb6>
 800e882:	f04f 30ff 	mov.w	r0, #4294967295
 800e886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e88a:	3501      	adds	r5, #1
 800e88c:	e7c1      	b.n	800e812 <_printf_common+0x3e>
 800e88e:	2030      	movs	r0, #48	@ 0x30
 800e890:	18e1      	adds	r1, r4, r3
 800e892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e89c:	4422      	add	r2, r4
 800e89e:	3302      	adds	r3, #2
 800e8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e8a4:	e7c2      	b.n	800e82c <_printf_common+0x58>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4641      	mov	r1, r8
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	47c8      	blx	r9
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d0e6      	beq.n	800e882 <_printf_common+0xae>
 800e8b4:	3601      	adds	r6, #1
 800e8b6:	e7d9      	b.n	800e86c <_printf_common+0x98>

0800e8b8 <_printf_i>:
 800e8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8bc:	7e0f      	ldrb	r7, [r1, #24]
 800e8be:	4691      	mov	r9, r2
 800e8c0:	2f78      	cmp	r7, #120	@ 0x78
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	469a      	mov	sl, r3
 800e8c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8ce:	d807      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8d0:	2f62      	cmp	r7, #98	@ 0x62
 800e8d2:	d80a      	bhi.n	800e8ea <_printf_i+0x32>
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	f000 80d3 	beq.w	800ea80 <_printf_i+0x1c8>
 800e8da:	2f58      	cmp	r7, #88	@ 0x58
 800e8dc:	f000 80ba 	beq.w	800ea54 <_printf_i+0x19c>
 800e8e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8e8:	e03a      	b.n	800e960 <_printf_i+0xa8>
 800e8ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8ee:	2b15      	cmp	r3, #21
 800e8f0:	d8f6      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8f2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8f8 <_printf_i+0x40>)
 800e8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8f8:	0800e951 	.word	0x0800e951
 800e8fc:	0800e965 	.word	0x0800e965
 800e900:	0800e8e1 	.word	0x0800e8e1
 800e904:	0800e8e1 	.word	0x0800e8e1
 800e908:	0800e8e1 	.word	0x0800e8e1
 800e90c:	0800e8e1 	.word	0x0800e8e1
 800e910:	0800e965 	.word	0x0800e965
 800e914:	0800e8e1 	.word	0x0800e8e1
 800e918:	0800e8e1 	.word	0x0800e8e1
 800e91c:	0800e8e1 	.word	0x0800e8e1
 800e920:	0800e8e1 	.word	0x0800e8e1
 800e924:	0800ea67 	.word	0x0800ea67
 800e928:	0800e98f 	.word	0x0800e98f
 800e92c:	0800ea21 	.word	0x0800ea21
 800e930:	0800e8e1 	.word	0x0800e8e1
 800e934:	0800e8e1 	.word	0x0800e8e1
 800e938:	0800ea89 	.word	0x0800ea89
 800e93c:	0800e8e1 	.word	0x0800e8e1
 800e940:	0800e98f 	.word	0x0800e98f
 800e944:	0800e8e1 	.word	0x0800e8e1
 800e948:	0800e8e1 	.word	0x0800e8e1
 800e94c:	0800ea29 	.word	0x0800ea29
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	1d1a      	adds	r2, r3, #4
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6032      	str	r2, [r6, #0]
 800e958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e95c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e960:	2301      	movs	r3, #1
 800e962:	e09e      	b.n	800eaa2 <_printf_i+0x1ea>
 800e964:	6833      	ldr	r3, [r6, #0]
 800e966:	6820      	ldr	r0, [r4, #0]
 800e968:	1d19      	adds	r1, r3, #4
 800e96a:	6031      	str	r1, [r6, #0]
 800e96c:	0606      	lsls	r6, r0, #24
 800e96e:	d501      	bpl.n	800e974 <_printf_i+0xbc>
 800e970:	681d      	ldr	r5, [r3, #0]
 800e972:	e003      	b.n	800e97c <_printf_i+0xc4>
 800e974:	0645      	lsls	r5, r0, #25
 800e976:	d5fb      	bpl.n	800e970 <_printf_i+0xb8>
 800e978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e97c:	2d00      	cmp	r5, #0
 800e97e:	da03      	bge.n	800e988 <_printf_i+0xd0>
 800e980:	232d      	movs	r3, #45	@ 0x2d
 800e982:	426d      	negs	r5, r5
 800e984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e988:	230a      	movs	r3, #10
 800e98a:	4859      	ldr	r0, [pc, #356]	@ (800eaf0 <_printf_i+0x238>)
 800e98c:	e011      	b.n	800e9b2 <_printf_i+0xfa>
 800e98e:	6821      	ldr	r1, [r4, #0]
 800e990:	6833      	ldr	r3, [r6, #0]
 800e992:	0608      	lsls	r0, r1, #24
 800e994:	f853 5b04 	ldr.w	r5, [r3], #4
 800e998:	d402      	bmi.n	800e9a0 <_printf_i+0xe8>
 800e99a:	0649      	lsls	r1, r1, #25
 800e99c:	bf48      	it	mi
 800e99e:	b2ad      	uxthmi	r5, r5
 800e9a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e9a2:	6033      	str	r3, [r6, #0]
 800e9a4:	bf14      	ite	ne
 800e9a6:	230a      	movne	r3, #10
 800e9a8:	2308      	moveq	r3, #8
 800e9aa:	4851      	ldr	r0, [pc, #324]	@ (800eaf0 <_printf_i+0x238>)
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e9b2:	6866      	ldr	r6, [r4, #4]
 800e9b4:	2e00      	cmp	r6, #0
 800e9b6:	bfa8      	it	ge
 800e9b8:	6821      	ldrge	r1, [r4, #0]
 800e9ba:	60a6      	str	r6, [r4, #8]
 800e9bc:	bfa4      	itt	ge
 800e9be:	f021 0104 	bicge.w	r1, r1, #4
 800e9c2:	6021      	strge	r1, [r4, #0]
 800e9c4:	b90d      	cbnz	r5, 800e9ca <_printf_i+0x112>
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d04b      	beq.n	800ea62 <_printf_i+0x1aa>
 800e9ca:	4616      	mov	r6, r2
 800e9cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9d0:	fb03 5711 	mls	r7, r3, r1, r5
 800e9d4:	5dc7      	ldrb	r7, [r0, r7]
 800e9d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9da:	462f      	mov	r7, r5
 800e9dc:	42bb      	cmp	r3, r7
 800e9de:	460d      	mov	r5, r1
 800e9e0:	d9f4      	bls.n	800e9cc <_printf_i+0x114>
 800e9e2:	2b08      	cmp	r3, #8
 800e9e4:	d10b      	bne.n	800e9fe <_printf_i+0x146>
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	07df      	lsls	r7, r3, #31
 800e9ea:	d508      	bpl.n	800e9fe <_printf_i+0x146>
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	6861      	ldr	r1, [r4, #4]
 800e9f0:	4299      	cmp	r1, r3
 800e9f2:	bfde      	ittt	le
 800e9f4:	2330      	movle	r3, #48	@ 0x30
 800e9f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9fe:	1b92      	subs	r2, r2, r6
 800ea00:	6122      	str	r2, [r4, #16]
 800ea02:	464b      	mov	r3, r9
 800ea04:	4621      	mov	r1, r4
 800ea06:	4640      	mov	r0, r8
 800ea08:	f8cd a000 	str.w	sl, [sp]
 800ea0c:	aa03      	add	r2, sp, #12
 800ea0e:	f7ff fee1 	bl	800e7d4 <_printf_common>
 800ea12:	3001      	adds	r0, #1
 800ea14:	d14a      	bne.n	800eaac <_printf_i+0x1f4>
 800ea16:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1a:	b004      	add	sp, #16
 800ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	f043 0320 	orr.w	r3, r3, #32
 800ea26:	6023      	str	r3, [r4, #0]
 800ea28:	2778      	movs	r7, #120	@ 0x78
 800ea2a:	4832      	ldr	r0, [pc, #200]	@ (800eaf4 <_printf_i+0x23c>)
 800ea2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea30:	6823      	ldr	r3, [r4, #0]
 800ea32:	6831      	ldr	r1, [r6, #0]
 800ea34:	061f      	lsls	r7, r3, #24
 800ea36:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea3a:	d402      	bmi.n	800ea42 <_printf_i+0x18a>
 800ea3c:	065f      	lsls	r7, r3, #25
 800ea3e:	bf48      	it	mi
 800ea40:	b2ad      	uxthmi	r5, r5
 800ea42:	6031      	str	r1, [r6, #0]
 800ea44:	07d9      	lsls	r1, r3, #31
 800ea46:	bf44      	itt	mi
 800ea48:	f043 0320 	orrmi.w	r3, r3, #32
 800ea4c:	6023      	strmi	r3, [r4, #0]
 800ea4e:	b11d      	cbz	r5, 800ea58 <_printf_i+0x1a0>
 800ea50:	2310      	movs	r3, #16
 800ea52:	e7ab      	b.n	800e9ac <_printf_i+0xf4>
 800ea54:	4826      	ldr	r0, [pc, #152]	@ (800eaf0 <_printf_i+0x238>)
 800ea56:	e7e9      	b.n	800ea2c <_printf_i+0x174>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	f023 0320 	bic.w	r3, r3, #32
 800ea5e:	6023      	str	r3, [r4, #0]
 800ea60:	e7f6      	b.n	800ea50 <_printf_i+0x198>
 800ea62:	4616      	mov	r6, r2
 800ea64:	e7bd      	b.n	800e9e2 <_printf_i+0x12a>
 800ea66:	6833      	ldr	r3, [r6, #0]
 800ea68:	6825      	ldr	r5, [r4, #0]
 800ea6a:	1d18      	adds	r0, r3, #4
 800ea6c:	6961      	ldr	r1, [r4, #20]
 800ea6e:	6030      	str	r0, [r6, #0]
 800ea70:	062e      	lsls	r6, r5, #24
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	d501      	bpl.n	800ea7a <_printf_i+0x1c2>
 800ea76:	6019      	str	r1, [r3, #0]
 800ea78:	e002      	b.n	800ea80 <_printf_i+0x1c8>
 800ea7a:	0668      	lsls	r0, r5, #25
 800ea7c:	d5fb      	bpl.n	800ea76 <_printf_i+0x1be>
 800ea7e:	8019      	strh	r1, [r3, #0]
 800ea80:	2300      	movs	r3, #0
 800ea82:	4616      	mov	r6, r2
 800ea84:	6123      	str	r3, [r4, #16]
 800ea86:	e7bc      	b.n	800ea02 <_printf_i+0x14a>
 800ea88:	6833      	ldr	r3, [r6, #0]
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	1d1a      	adds	r2, r3, #4
 800ea8e:	6032      	str	r2, [r6, #0]
 800ea90:	681e      	ldr	r6, [r3, #0]
 800ea92:	6862      	ldr	r2, [r4, #4]
 800ea94:	4630      	mov	r0, r6
 800ea96:	f000 f96b 	bl	800ed70 <memchr>
 800ea9a:	b108      	cbz	r0, 800eaa0 <_printf_i+0x1e8>
 800ea9c:	1b80      	subs	r0, r0, r6
 800ea9e:	6060      	str	r0, [r4, #4]
 800eaa0:	6863      	ldr	r3, [r4, #4]
 800eaa2:	6123      	str	r3, [r4, #16]
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eaaa:	e7aa      	b.n	800ea02 <_printf_i+0x14a>
 800eaac:	4632      	mov	r2, r6
 800eaae:	4649      	mov	r1, r9
 800eab0:	4640      	mov	r0, r8
 800eab2:	6923      	ldr	r3, [r4, #16]
 800eab4:	47d0      	blx	sl
 800eab6:	3001      	adds	r0, #1
 800eab8:	d0ad      	beq.n	800ea16 <_printf_i+0x15e>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	079b      	lsls	r3, r3, #30
 800eabe:	d413      	bmi.n	800eae8 <_printf_i+0x230>
 800eac0:	68e0      	ldr	r0, [r4, #12]
 800eac2:	9b03      	ldr	r3, [sp, #12]
 800eac4:	4298      	cmp	r0, r3
 800eac6:	bfb8      	it	lt
 800eac8:	4618      	movlt	r0, r3
 800eaca:	e7a6      	b.n	800ea1a <_printf_i+0x162>
 800eacc:	2301      	movs	r3, #1
 800eace:	4632      	mov	r2, r6
 800ead0:	4649      	mov	r1, r9
 800ead2:	4640      	mov	r0, r8
 800ead4:	47d0      	blx	sl
 800ead6:	3001      	adds	r0, #1
 800ead8:	d09d      	beq.n	800ea16 <_printf_i+0x15e>
 800eada:	3501      	adds	r5, #1
 800eadc:	68e3      	ldr	r3, [r4, #12]
 800eade:	9903      	ldr	r1, [sp, #12]
 800eae0:	1a5b      	subs	r3, r3, r1
 800eae2:	42ab      	cmp	r3, r5
 800eae4:	dcf2      	bgt.n	800eacc <_printf_i+0x214>
 800eae6:	e7eb      	b.n	800eac0 <_printf_i+0x208>
 800eae8:	2500      	movs	r5, #0
 800eaea:	f104 0619 	add.w	r6, r4, #25
 800eaee:	e7f5      	b.n	800eadc <_printf_i+0x224>
 800eaf0:	0800ee57 	.word	0x0800ee57
 800eaf4:	0800ee68 	.word	0x0800ee68

0800eaf8 <__sflush_r>:
 800eaf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	0716      	lsls	r6, r2, #28
 800eb00:	4605      	mov	r5, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	d454      	bmi.n	800ebb0 <__sflush_r+0xb8>
 800eb06:	684b      	ldr	r3, [r1, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dc02      	bgt.n	800eb12 <__sflush_r+0x1a>
 800eb0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	dd48      	ble.n	800eba4 <__sflush_r+0xac>
 800eb12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	d045      	beq.n	800eba4 <__sflush_r+0xac>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb1e:	682f      	ldr	r7, [r5, #0]
 800eb20:	6a21      	ldr	r1, [r4, #32]
 800eb22:	602b      	str	r3, [r5, #0]
 800eb24:	d030      	beq.n	800eb88 <__sflush_r+0x90>
 800eb26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	0759      	lsls	r1, r3, #29
 800eb2c:	d505      	bpl.n	800eb3a <__sflush_r+0x42>
 800eb2e:	6863      	ldr	r3, [r4, #4]
 800eb30:	1ad2      	subs	r2, r2, r3
 800eb32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb34:	b10b      	cbz	r3, 800eb3a <__sflush_r+0x42>
 800eb36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb38:	1ad2      	subs	r2, r2, r3
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb40:	6a21      	ldr	r1, [r4, #32]
 800eb42:	47b0      	blx	r6
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	d106      	bne.n	800eb58 <__sflush_r+0x60>
 800eb4a:	6829      	ldr	r1, [r5, #0]
 800eb4c:	291d      	cmp	r1, #29
 800eb4e:	d82b      	bhi.n	800eba8 <__sflush_r+0xb0>
 800eb50:	4a28      	ldr	r2, [pc, #160]	@ (800ebf4 <__sflush_r+0xfc>)
 800eb52:	410a      	asrs	r2, r1
 800eb54:	07d6      	lsls	r6, r2, #31
 800eb56:	d427      	bmi.n	800eba8 <__sflush_r+0xb0>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	6062      	str	r2, [r4, #4]
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	04d9      	lsls	r1, r3, #19
 800eb60:	6022      	str	r2, [r4, #0]
 800eb62:	d504      	bpl.n	800eb6e <__sflush_r+0x76>
 800eb64:	1c42      	adds	r2, r0, #1
 800eb66:	d101      	bne.n	800eb6c <__sflush_r+0x74>
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	b903      	cbnz	r3, 800eb6e <__sflush_r+0x76>
 800eb6c:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb70:	602f      	str	r7, [r5, #0]
 800eb72:	b1b9      	cbz	r1, 800eba4 <__sflush_r+0xac>
 800eb74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x8a>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fbf3 	bl	800e368 <_free_r>
 800eb82:	2300      	movs	r3, #0
 800eb84:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb86:	e00d      	b.n	800eba4 <__sflush_r+0xac>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b0      	blx	r6
 800eb8e:	4602      	mov	r2, r0
 800eb90:	1c50      	adds	r0, r2, #1
 800eb92:	d1c9      	bne.n	800eb28 <__sflush_r+0x30>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c6      	beq.n	800eb28 <__sflush_r+0x30>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xaa>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d11d      	bne.n	800ebde <__sflush_r+0xe6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	2000      	movs	r0, #0
 800eba6:	e021      	b.n	800ebec <__sflush_r+0xf4>
 800eba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	e01a      	b.n	800ebe6 <__sflush_r+0xee>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0f6      	beq.n	800eba4 <__sflush_r+0xac>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	bf18      	it	ne
 800ebba:	2300      	movne	r3, #0
 800ebbc:	680e      	ldr	r6, [r1, #0]
 800ebbe:	bf08      	it	eq
 800ebc0:	694b      	ldreq	r3, [r1, #20]
 800ebc2:	1bf6      	subs	r6, r6, r7
 800ebc4:	600f      	str	r7, [r1, #0]
 800ebc6:	608b      	str	r3, [r1, #8]
 800ebc8:	2e00      	cmp	r6, #0
 800ebca:	ddeb      	ble.n	800eba4 <__sflush_r+0xac>
 800ebcc:	4633      	mov	r3, r6
 800ebce:	463a      	mov	r2, r7
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	6a21      	ldr	r1, [r4, #32]
 800ebd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ebd8:	47e0      	blx	ip
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	dc07      	bgt.n	800ebee <__sflush_r+0xf6>
 800ebde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebea:	81a3      	strh	r3, [r4, #12]
 800ebec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebee:	4407      	add	r7, r0
 800ebf0:	1a36      	subs	r6, r6, r0
 800ebf2:	e7e9      	b.n	800ebc8 <__sflush_r+0xd0>
 800ebf4:	dfbffffe 	.word	0xdfbffffe

0800ebf8 <_fflush_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	690b      	ldr	r3, [r1, #16]
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	460c      	mov	r4, r1
 800ec00:	b913      	cbnz	r3, 800ec08 <_fflush_r+0x10>
 800ec02:	2500      	movs	r5, #0
 800ec04:	4628      	mov	r0, r5
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	b118      	cbz	r0, 800ec12 <_fflush_r+0x1a>
 800ec0a:	6a03      	ldr	r3, [r0, #32]
 800ec0c:	b90b      	cbnz	r3, 800ec12 <_fflush_r+0x1a>
 800ec0e:	f7ff f9b1 	bl	800df74 <__sinit>
 800ec12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0f3      	beq.n	800ec02 <_fflush_r+0xa>
 800ec1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec1c:	07d0      	lsls	r0, r2, #31
 800ec1e:	d404      	bmi.n	800ec2a <_fflush_r+0x32>
 800ec20:	0599      	lsls	r1, r3, #22
 800ec22:	d402      	bmi.n	800ec2a <_fflush_r+0x32>
 800ec24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec26:	f7ff fb9c 	bl	800e362 <__retarget_lock_acquire_recursive>
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	f7ff ff63 	bl	800eaf8 <__sflush_r>
 800ec32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec34:	4605      	mov	r5, r0
 800ec36:	07da      	lsls	r2, r3, #31
 800ec38:	d4e4      	bmi.n	800ec04 <_fflush_r+0xc>
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	059b      	lsls	r3, r3, #22
 800ec3e:	d4e1      	bmi.n	800ec04 <_fflush_r+0xc>
 800ec40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec42:	f7ff fb8f 	bl	800e364 <__retarget_lock_release_recursive>
 800ec46:	e7dd      	b.n	800ec04 <_fflush_r+0xc>

0800ec48 <__swhatbuf_r>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec50:	4615      	mov	r5, r2
 800ec52:	2900      	cmp	r1, #0
 800ec54:	461e      	mov	r6, r3
 800ec56:	b096      	sub	sp, #88	@ 0x58
 800ec58:	da0c      	bge.n	800ec74 <__swhatbuf_r+0x2c>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec62:	bf14      	ite	ne
 800ec64:	2340      	movne	r3, #64	@ 0x40
 800ec66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	6031      	str	r1, [r6, #0]
 800ec6e:	602b      	str	r3, [r5, #0]
 800ec70:	b016      	add	sp, #88	@ 0x58
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	466a      	mov	r2, sp
 800ec76:	f000 f849 	bl	800ed0c <_fstat_r>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	dbed      	blt.n	800ec5a <__swhatbuf_r+0x12>
 800ec7e:	9901      	ldr	r1, [sp, #4]
 800ec80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec88:	4259      	negs	r1, r3
 800ec8a:	4159      	adcs	r1, r3
 800ec8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec90:	e7eb      	b.n	800ec6a <__swhatbuf_r+0x22>

0800ec92 <__smakebuf_r>:
 800ec92:	898b      	ldrh	r3, [r1, #12]
 800ec94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec96:	079d      	lsls	r5, r3, #30
 800ec98:	4606      	mov	r6, r0
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	d507      	bpl.n	800ecae <__smakebuf_r+0x1c>
 800ec9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	6123      	str	r3, [r4, #16]
 800eca6:	2301      	movs	r3, #1
 800eca8:	6163      	str	r3, [r4, #20]
 800ecaa:	b003      	add	sp, #12
 800ecac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecae:	466a      	mov	r2, sp
 800ecb0:	ab01      	add	r3, sp, #4
 800ecb2:	f7ff ffc9 	bl	800ec48 <__swhatbuf_r>
 800ecb6:	9f00      	ldr	r7, [sp, #0]
 800ecb8:	4605      	mov	r5, r0
 800ecba:	4639      	mov	r1, r7
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7ff fbbd 	bl	800e43c <_malloc_r>
 800ecc2:	b948      	cbnz	r0, 800ecd8 <__smakebuf_r+0x46>
 800ecc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc8:	059a      	lsls	r2, r3, #22
 800ecca:	d4ee      	bmi.n	800ecaa <__smakebuf_r+0x18>
 800eccc:	f023 0303 	bic.w	r3, r3, #3
 800ecd0:	f043 0302 	orr.w	r3, r3, #2
 800ecd4:	81a3      	strh	r3, [r4, #12]
 800ecd6:	e7e2      	b.n	800ec9e <__smakebuf_r+0xc>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ecde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	6020      	str	r0, [r4, #0]
 800ece8:	b15b      	cbz	r3, 800ed02 <__smakebuf_r+0x70>
 800ecea:	4630      	mov	r0, r6
 800ecec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecf0:	f000 f81e 	bl	800ed30 <_isatty_r>
 800ecf4:	b128      	cbz	r0, 800ed02 <__smakebuf_r+0x70>
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	f023 0303 	bic.w	r3, r3, #3
 800ecfc:	f043 0301 	orr.w	r3, r3, #1
 800ed00:	81a3      	strh	r3, [r4, #12]
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	431d      	orrs	r5, r3
 800ed06:	81a5      	strh	r5, [r4, #12]
 800ed08:	e7cf      	b.n	800ecaa <__smakebuf_r+0x18>
	...

0800ed0c <_fstat_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	2300      	movs	r3, #0
 800ed10:	4d06      	ldr	r5, [pc, #24]	@ (800ed2c <_fstat_r+0x20>)
 800ed12:	4604      	mov	r4, r0
 800ed14:	4608      	mov	r0, r1
 800ed16:	4611      	mov	r1, r2
 800ed18:	602b      	str	r3, [r5, #0]
 800ed1a:	f7f6 fc23 	bl	8005564 <_fstat>
 800ed1e:	1c43      	adds	r3, r0, #1
 800ed20:	d102      	bne.n	800ed28 <_fstat_r+0x1c>
 800ed22:	682b      	ldr	r3, [r5, #0]
 800ed24:	b103      	cbz	r3, 800ed28 <_fstat_r+0x1c>
 800ed26:	6023      	str	r3, [r4, #0]
 800ed28:	bd38      	pop	{r3, r4, r5, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20000a98 	.word	0x20000a98

0800ed30 <_isatty_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	2300      	movs	r3, #0
 800ed34:	4d05      	ldr	r5, [pc, #20]	@ (800ed4c <_isatty_r+0x1c>)
 800ed36:	4604      	mov	r4, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	602b      	str	r3, [r5, #0]
 800ed3c:	f7f6 fc21 	bl	8005582 <_isatty>
 800ed40:	1c43      	adds	r3, r0, #1
 800ed42:	d102      	bne.n	800ed4a <_isatty_r+0x1a>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	b103      	cbz	r3, 800ed4a <_isatty_r+0x1a>
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	20000a98 	.word	0x20000a98

0800ed50 <_sbrk_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	2300      	movs	r3, #0
 800ed54:	4d05      	ldr	r5, [pc, #20]	@ (800ed6c <_sbrk_r+0x1c>)
 800ed56:	4604      	mov	r4, r0
 800ed58:	4608      	mov	r0, r1
 800ed5a:	602b      	str	r3, [r5, #0]
 800ed5c:	f7f6 fc28 	bl	80055b0 <_sbrk>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_sbrk_r+0x1a>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_sbrk_r+0x1a>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	20000a98 	.word	0x20000a98

0800ed70 <memchr>:
 800ed70:	4603      	mov	r3, r0
 800ed72:	b510      	push	{r4, lr}
 800ed74:	b2c9      	uxtb	r1, r1
 800ed76:	4402      	add	r2, r0
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	d101      	bne.n	800ed82 <memchr+0x12>
 800ed7e:	2000      	movs	r0, #0
 800ed80:	e003      	b.n	800ed8a <memchr+0x1a>
 800ed82:	7804      	ldrb	r4, [r0, #0]
 800ed84:	3301      	adds	r3, #1
 800ed86:	428c      	cmp	r4, r1
 800ed88:	d1f6      	bne.n	800ed78 <memchr+0x8>
 800ed8a:	bd10      	pop	{r4, pc}

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
